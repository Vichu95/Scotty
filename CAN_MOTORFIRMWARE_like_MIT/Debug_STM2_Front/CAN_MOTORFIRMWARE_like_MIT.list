
CAN_MOTORFIRMWARE_like_MIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006eb0  08006eb0  00007eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee8  08006ee8  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee8  08006ee8  00007ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef0  08006ef0  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef4  08006ef4  00007ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006ef8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  2000007c  08006f74  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08006f74  000086c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f838  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025dc  00000000  00000000  000178e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00019ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0c  00000000  00000000  0001ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002355d  00000000  00000000  0001ba64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b69  00000000  00000000  0003efc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d545e  00000000  00000000  00050b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125f88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b0  00000000  00000000  00125fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0012a97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006e98 	.word	0x08006e98

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	08006e98 	.word	0x08006e98

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295
 8000824:	f04f 30ff 	movne.w	r0, #4294967295
 8000828:	f000 b96a 	b.w	8000b00 <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9d08      	ldr	r5, [sp, #32]
 800084a:	460c      	mov	r4, r1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d14e      	bne.n	80008ee <__udivmoddi4+0xaa>
 8000850:	4694      	mov	ip, r2
 8000852:	458c      	cmp	ip, r1
 8000854:	4686      	mov	lr, r0
 8000856:	fab2 f282 	clz	r2, r2
 800085a:	d962      	bls.n	8000922 <__udivmoddi4+0xde>
 800085c:	b14a      	cbz	r2, 8000872 <__udivmoddi4+0x2e>
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	4091      	lsls	r1, r2
 8000864:	fa20 f303 	lsr.w	r3, r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	4319      	orrs	r1, r3
 800086e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f f68c 	uxth.w	r6, ip
 800087a:	fbb1 f4f7 	udiv	r4, r1, r7
 800087e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000882:	fb07 1114 	mls	r1, r7, r4, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb04 f106 	mul.w	r1, r4, r6
 800088e:	4299      	cmp	r1, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x64>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f104 30ff 	add.w	r0, r4, #4294967295
 800089a:	f080 8112 	bcs.w	8000ac2 <__udivmoddi4+0x27e>
 800089e:	4299      	cmp	r1, r3
 80008a0:	f240 810f 	bls.w	8000ac2 <__udivmoddi4+0x27e>
 80008a4:	3c02      	subs	r4, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1a59      	subs	r1, r3, r1
 80008aa:	fa1f f38e 	uxth.w	r3, lr
 80008ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b2:	fb07 1110 	mls	r1, r7, r0, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f606 	mul.w	r6, r0, r6
 80008be:	429e      	cmp	r6, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x94>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ca:	f080 80fc 	bcs.w	8000ac6 <__udivmoddi4+0x282>
 80008ce:	429e      	cmp	r6, r3
 80008d0:	f240 80f9 	bls.w	8000ac6 <__udivmoddi4+0x282>
 80008d4:	4463      	add	r3, ip
 80008d6:	3802      	subs	r0, #2
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008de:	2100      	movs	r1, #0
 80008e0:	b11d      	cbz	r5, 80008ea <__udivmoddi4+0xa6>
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d905      	bls.n	80008fe <__udivmoddi4+0xba>
 80008f2:	b10d      	cbz	r5, 80008f8 <__udivmoddi4+0xb4>
 80008f4:	e9c5 0100 	strd	r0, r1, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	4608      	mov	r0, r1
 80008fc:	e7f5      	b.n	80008ea <__udivmoddi4+0xa6>
 80008fe:	fab3 f183 	clz	r1, r3
 8000902:	2900      	cmp	r1, #0
 8000904:	d146      	bne.n	8000994 <__udivmoddi4+0x150>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d302      	bcc.n	8000910 <__udivmoddi4+0xcc>
 800090a:	4290      	cmp	r0, r2
 800090c:	f0c0 80f0 	bcc.w	8000af0 <__udivmoddi4+0x2ac>
 8000910:	1a86      	subs	r6, r0, r2
 8000912:	eb64 0303 	sbc.w	r3, r4, r3
 8000916:	2001      	movs	r0, #1
 8000918:	2d00      	cmp	r5, #0
 800091a:	d0e6      	beq.n	80008ea <__udivmoddi4+0xa6>
 800091c:	e9c5 6300 	strd	r6, r3, [r5]
 8000920:	e7e3      	b.n	80008ea <__udivmoddi4+0xa6>
 8000922:	2a00      	cmp	r2, #0
 8000924:	f040 8090 	bne.w	8000a48 <__udivmoddi4+0x204>
 8000928:	eba1 040c 	sub.w	r4, r1, ip
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	fa1f f78c 	uxth.w	r7, ip
 8000934:	2101      	movs	r1, #1
 8000936:	fbb4 f6f8 	udiv	r6, r4, r8
 800093a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093e:	fb08 4416 	mls	r4, r8, r6, r4
 8000942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000946:	fb07 f006 	mul.w	r0, r7, r6
 800094a:	4298      	cmp	r0, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x11c>
 800094e:	eb1c 0303 	adds.w	r3, ip, r3
 8000952:	f106 34ff 	add.w	r4, r6, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x11a>
 8000958:	4298      	cmp	r0, r3
 800095a:	f200 80cd 	bhi.w	8000af8 <__udivmoddi4+0x2b4>
 800095e:	4626      	mov	r6, r4
 8000960:	1a1c      	subs	r4, r3, r0
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb4 f0f8 	udiv	r0, r4, r8
 800096a:	fb08 4410 	mls	r4, r8, r0, r4
 800096e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000972:	fb00 f707 	mul.w	r7, r0, r7
 8000976:	429f      	cmp	r7, r3
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x148>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000982:	d202      	bcs.n	800098a <__udivmoddi4+0x146>
 8000984:	429f      	cmp	r7, r3
 8000986:	f200 80b0 	bhi.w	8000aea <__udivmoddi4+0x2a6>
 800098a:	4620      	mov	r0, r4
 800098c:	1bdb      	subs	r3, r3, r7
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	e7a5      	b.n	80008e0 <__udivmoddi4+0x9c>
 8000994:	f1c1 0620 	rsb	r6, r1, #32
 8000998:	408b      	lsls	r3, r1
 800099a:	fa22 f706 	lsr.w	r7, r2, r6
 800099e:	431f      	orrs	r7, r3
 80009a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a4:	fa04 f301 	lsl.w	r3, r4, r1
 80009a8:	ea43 030c 	orr.w	r3, r3, ip
 80009ac:	40f4      	lsrs	r4, r6
 80009ae:	fa00 f801 	lsl.w	r8, r0, r1
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b8:	fbb4 fef0 	udiv	lr, r4, r0
 80009bc:	fa1f fc87 	uxth.w	ip, r7
 80009c0:	fb00 441e 	mls	r4, r0, lr, r4
 80009c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c8:	fb0e f90c 	mul.w	r9, lr, ip
 80009cc:	45a1      	cmp	r9, r4
 80009ce:	fa02 f201 	lsl.w	r2, r2, r1
 80009d2:	d90a      	bls.n	80009ea <__udivmoddi4+0x1a6>
 80009d4:	193c      	adds	r4, r7, r4
 80009d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009da:	f080 8084 	bcs.w	8000ae6 <__udivmoddi4+0x2a2>
 80009de:	45a1      	cmp	r9, r4
 80009e0:	f240 8081 	bls.w	8000ae6 <__udivmoddi4+0x2a2>
 80009e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	eba4 0409 	sub.w	r4, r4, r9
 80009ee:	fa1f f983 	uxth.w	r9, r3
 80009f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f6:	fb00 4413 	mls	r4, r0, r3, r4
 80009fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a02:	45a4      	cmp	ip, r4
 8000a04:	d907      	bls.n	8000a16 <__udivmoddi4+0x1d2>
 8000a06:	193c      	adds	r4, r7, r4
 8000a08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a0c:	d267      	bcs.n	8000ade <__udivmoddi4+0x29a>
 8000a0e:	45a4      	cmp	ip, r4
 8000a10:	d965      	bls.n	8000ade <__udivmoddi4+0x29a>
 8000a12:	3b02      	subs	r3, #2
 8000a14:	443c      	add	r4, r7
 8000a16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1e:	eba4 040c 	sub.w	r4, r4, ip
 8000a22:	429c      	cmp	r4, r3
 8000a24:	46ce      	mov	lr, r9
 8000a26:	469c      	mov	ip, r3
 8000a28:	d351      	bcc.n	8000ace <__udivmoddi4+0x28a>
 8000a2a:	d04e      	beq.n	8000aca <__udivmoddi4+0x286>
 8000a2c:	b155      	cbz	r5, 8000a44 <__udivmoddi4+0x200>
 8000a2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a32:	eb64 040c 	sbc.w	r4, r4, ip
 8000a36:	fa04 f606 	lsl.w	r6, r4, r6
 8000a3a:	40cb      	lsrs	r3, r1
 8000a3c:	431e      	orrs	r6, r3
 8000a3e:	40cc      	lsrs	r4, r1
 8000a40:	e9c5 6400 	strd	r6, r4, [r5]
 8000a44:	2100      	movs	r1, #0
 8000a46:	e750      	b.n	80008ea <__udivmoddi4+0xa6>
 8000a48:	f1c2 0320 	rsb	r3, r2, #32
 8000a4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	fa24 f303 	lsr.w	r3, r4, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a64:	fa1f f78c 	uxth.w	r7, ip
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb00 f107 	mul.w	r1, r0, r7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x24c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a86:	d22c      	bcs.n	8000ae2 <__udivmoddi4+0x29e>
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d92a      	bls.n	8000ae2 <__udivmoddi4+0x29e>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a98:	fb08 3311 	mls	r3, r8, r1, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb01 f307 	mul.w	r3, r1, r7
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x276>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ab0:	d213      	bcs.n	8000ada <__udivmoddi4+0x296>
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	d911      	bls.n	8000ada <__udivmoddi4+0x296>
 8000ab6:	3902      	subs	r1, #2
 8000ab8:	4464      	add	r4, ip
 8000aba:	1ae4      	subs	r4, r4, r3
 8000abc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ac0:	e739      	b.n	8000936 <__udivmoddi4+0xf2>
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	e6f0      	b.n	80008a8 <__udivmoddi4+0x64>
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e706      	b.n	80008d8 <__udivmoddi4+0x94>
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d2ae      	bcs.n	8000a2c <__udivmoddi4+0x1e8>
 8000ace:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ad2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7a8      	b.n	8000a2c <__udivmoddi4+0x1e8>
 8000ada:	4631      	mov	r1, r6
 8000adc:	e7ed      	b.n	8000aba <__udivmoddi4+0x276>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e799      	b.n	8000a16 <__udivmoddi4+0x1d2>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e7d4      	b.n	8000a90 <__udivmoddi4+0x24c>
 8000ae6:	46d6      	mov	lr, sl
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1a6>
 8000aea:	4463      	add	r3, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	e74d      	b.n	800098c <__udivmoddi4+0x148>
 8000af0:	4606      	mov	r6, r0
 8000af2:	4623      	mov	r3, r4
 8000af4:	4608      	mov	r0, r1
 8000af6:	e70f      	b.n	8000918 <__udivmoddi4+0xd4>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	e730      	b.n	8000960 <__udivmoddi4+0x11c>
 8000afe:	bf00      	nop

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d013      	beq.n	8000b44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00b      	beq.n	8000b44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b2c:	e000      	b.n	8000b30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f9      	beq.n	8000b2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b3a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t State_spi;


// CAN Rx Callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData_buf);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000b5e:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f002 fbc9 	bl	80032fa <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d102      	bne.n	8000b76 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		receivedCanBus=0;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
	}
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000538 	.word	0x20000538
 8000b84:	20000104 	.word	0x20000104
 8000b88:	2000000c 	.word	0x2000000c

08000b8c <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, CAN_RxData_buf);
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000b96:	4a09      	ldr	r2, [pc, #36]	@ (8000bbc <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f002 fbad 	bl	80032fa <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d102      	bne.n	8000bae <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		receivedCanBus=1;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000538 	.word	0x20000538
 8000bbc:	20000104 	.word	0x20000104
 8000bc0:	2000000c 	.word	0x2000000c

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bc8:	f002 f82a 	bl	8002c20 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000bcc:	f001 fa12 	bl	8001ff4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bd0:	f001 fc26 	bl	8002420 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bd4:	f001 fbfc 	bl	80023d0 <MX_DMA_Init>
	MX_CAN1_Init();
 8000bd8:	f001 fa7e 	bl	80020d8 <MX_CAN1_Init>
	MX_TIM1_Init();
 8000bdc:	f001 fb58 	bl	8002290 <MX_TIM1_Init>
	MX_SPI1_Init();
 8000be0:	f001 fb22 	bl	8002228 <MX_SPI1_Init>
	MX_CAN2_Init();
 8000be4:	f001 facc 	bl	8002180 <MX_CAN2_Init>
	MX_TIM8_Init();
 8000be8:	f001 fba2 	bl	8002330 <MX_TIM8_Init>

	HAL_CAN_Start(&hcan1);
 8000bec:	483d      	ldr	r0, [pc, #244]	@ (8000ce4 <main+0x120>)
 8000bee:	f002 fa65 	bl	80030bc <HAL_CAN_Start>
	HAL_CAN_Start(&hcan2);
 8000bf2:	483d      	ldr	r0, [pc, #244]	@ (8000ce8 <main+0x124>)
 8000bf4:	f002 fa62 	bl	80030bc <HAL_CAN_Start>
	HAL_TIM_Base_Start(&htim1);
 8000bf8:	483c      	ldr	r0, [pc, #240]	@ (8000cec <main+0x128>)
 8000bfa:	f005 f91f 	bl	8005e3c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8000bfe:	483c      	ldr	r0, [pc, #240]	@ (8000cf0 <main+0x12c>)
 8000c00:	f005 f91c 	bl	8005e3c <HAL_TIM_Base_Start>


	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c04:	2102      	movs	r1, #2
 8000c06:	4837      	ldr	r0, [pc, #220]	@ (8000ce4 <main+0x120>)
 8000c08:	f002 fc89 	bl	800351e <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	4836      	ldr	r0, [pc, #216]	@ (8000ce8 <main+0x124>)
 8000c10:	f002 fc85 	bl	800351e <HAL_CAN_ActivateNotification>


	TxHeader.DLC = 8;  // data length
 8000c14:	4b37      	ldr	r3, [pc, #220]	@ (8000cf4 <main+0x130>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <main+0x130>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c20:	4b34      	ldr	r3, [pc, #208]	@ (8000cf4 <main+0x130>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]



	printf("start\n");
 8000c26:	4834      	ldr	r0, [pc, #208]	@ (8000cf8 <main+0x134>)
 8000c28:	f005 fd06 	bl	8006638 <puts>
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8000c2c:	2342      	movs	r3, #66	@ 0x42
 8000c2e:	4a33      	ldr	r2, [pc, #204]	@ (8000cfc <main+0x138>)
 8000c30:	4933      	ldr	r1, [pc, #204]	@ (8000d00 <main+0x13c>)
 8000c32:	4834      	ldr	r0, [pc, #208]	@ (8000d04 <main+0x140>)
 8000c34:	f004 fd00 	bl	8005638 <HAL_SPI_TransmitReceive_IT>




	// START MOTOR
	motor_mode(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000c38:	4a33      	ldr	r2, [pc, #204]	@ (8000d08 <main+0x144>)
 8000c3a:	492e      	ldr	r1, [pc, #184]	@ (8000cf4 <main+0x130>)
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 ffb7 	bl	8001bb0 <motor_mode>
	motor_mode(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000c42:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <main+0x144>)
 8000c44:	492b      	ldr	r1, [pc, #172]	@ (8000cf4 <main+0x130>)
 8000c46:	2002      	movs	r0, #2
 8000c48:	f000 ffb2 	bl	8001bb0 <motor_mode>
	motor_mode(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d08 <main+0x144>)
 8000c4e:	4929      	ldr	r1, [pc, #164]	@ (8000cf4 <main+0x130>)
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 ffad 	bl	8001bb0 <motor_mode>
 	delay_us(1000);
 8000c56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c5a:	f001 f89b 	bl	8001d94 <delay_us>
//			time=__HAL_TIM_GET_COUNTER(&htim8);
//	  }


 	// Loop only if count is 2 (SPI) or 1 (CAN)
	while (count == 2 || count == 1)
 8000c5e:	e027      	b.n	8000cb0 <main+0xec>
	{
		__HAL_TIM_SET_COUNTER(&htim8,0);
 8000c60:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <main+0x12c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	@ 0x24

		//count = 2 executes the SPI
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15) == 0 && count==2)
 8000c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6c:	4827      	ldr	r0, [pc, #156]	@ (8000d0c <main+0x148>)
 8000c6e:	f003 fdd7 	bl	8004820 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10d      	bne.n	8000c94 <main+0xd0>
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <main+0x14c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d109      	bne.n	8000c94 <main+0xd0>
		{
			spi_send_receive();
 8000c80:	f000 f84c 	bl	8000d1c <spi_send_receive>
			count=1;
 8000c84:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <main+0x14c>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
			time2=__HAL_TIM_GET_COUNTER(&htim8);
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <main+0x12c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c90:	4a20      	ldr	r2, [pc, #128]	@ (8000d14 <main+0x150>)
 8000c92:	6013      	str	r3, [r2, #0]
		}

		//count = 1 executes the CAN
		if(count==1)
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <main+0x14c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d109      	bne.n	8000cb0 <main+0xec>
		{
			can_send_receive();
 8000c9c:	f000 f92a 	bl	8000ef4 <can_send_receive>
			count=2;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <main+0x14c>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	601a      	str	r2, [r3, #0]
			time=__HAL_TIM_GET_COUNTER(&htim8);
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <main+0x12c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cac:	4a1a      	ldr	r2, [pc, #104]	@ (8000d18 <main+0x154>)
 8000cae:	6013      	str	r3, [r2, #0]
	while (count == 2 || count == 1)
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <main+0x14c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d0d3      	beq.n	8000c60 <main+0x9c>
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <main+0x14c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d0cf      	beq.n	8000c60 <main+0x9c>

	}//end of while


	// STOP MOTOR
	exit_mode(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000cc0:	4a11      	ldr	r2, [pc, #68]	@ (8000d08 <main+0x144>)
 8000cc2:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <main+0x130>)
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 ffb9 	bl	8001c3c <exit_mode>
	exit_mode(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000cca:	4a0f      	ldr	r2, [pc, #60]	@ (8000d08 <main+0x144>)
 8000ccc:	4909      	ldr	r1, [pc, #36]	@ (8000cf4 <main+0x130>)
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f000 ffb4 	bl	8001c3c <exit_mode>
	exit_mode(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <main+0x144>)
 8000cd6:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <main+0x130>)
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 ffaf 	bl	8001c3c <exit_mode>
 8000cde:	2300      	movs	r3, #0


}// end of main
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	200000c4 	.word	0x200000c4
 8000cec:	2000023c 	.word	0x2000023c
 8000cf0:	20000284 	.word	0x20000284
 8000cf4:	200000ec 	.word	0x200000ec
 8000cf8:	08006eb0 	.word	0x08006eb0
 8000cfc:	200004ac 	.word	0x200004ac
 8000d00:	20000428 	.word	0x20000428
 8000d04:	20000124 	.word	0x20000124
 8000d08:	20000530 	.word	0x20000530
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	20000010 	.word	0x20000010
 8000d14:	20000560 	.word	0x20000560
 8000d18:	2000055c 	.word	0x2000055c

08000d1c <spi_send_receive>:
							/***************************************************
							 *  				 S P I
							 ***************************************************/

void spi_send_receive(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	//Pack the torques into the flag.
	 state.flags[0] = encode_floats(torque.ab_t[0], torque.hip_t[0], torque.knee_t[0]) | (state.flags[0]& 0x03);
 8000d22:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <spi_send_receive+0xa8>)
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <spi_send_receive+0xa8>)
 8000d2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d2e:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <spi_send_receive+0xa8>)
 8000d30:	edd3 6a04 	vldr	s13, [r3, #16]
 8000d34:	eeb0 1a66 	vmov.f32	s2, s13
 8000d38:	eef0 0a47 	vmov.f32	s1, s14
 8000d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d40:	f001 f862 	bl	8001e08 <encode_floats>
 8000d44:	4602      	mov	r2, r0
 8000d46:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <spi_send_receive+0xac>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc8 <spi_send_receive+0xac>)
 8000d52:	6313      	str	r3, [r2, #48]	@ 0x30
	 state.flags[1] = encode_floats(torque.ab_t[1], torque.hip_t[1], torque.knee_t[1]) | (state.flags[1]& 0x03);
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <spi_send_receive+0xa8>)
 8000d56:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <spi_send_receive+0xa8>)
 8000d5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <spi_send_receive+0xa8>)
 8000d62:	edd3 6a05 	vldr	s13, [r3, #20]
 8000d66:	eeb0 1a66 	vmov.f32	s2, s13
 8000d6a:	eef0 0a47 	vmov.f32	s1, s14
 8000d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d72:	f001 f849 	bl	8001e08 <encode_floats>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <spi_send_receive+0xac>)
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	4a11      	ldr	r2, [pc, #68]	@ (8000dc8 <spi_send_receive+0xac>)
 8000d84:	6353      	str	r3, [r2, #52]	@ 0x34


	//calculate the checksum
	state.checksum = xor_checksum((uint32_t*)&state,14);
 8000d86:	210e      	movs	r1, #14
 8000d88:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <spi_send_receive+0xac>)
 8000d8a:	f001 f81d 	bl	8001dc8 <xor_checksum>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <spi_send_receive+0xac>)
 8000d92:	6393      	str	r3, [r2, #56]	@ 0x38

	//pack the status variables into the tx buffer
	for(int i = 0; i < STATE_LEN ; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	e00b      	b.n	8000db2 <spi_send_receive+0x96>
	{
		spi_tx_buffer[i] = ((uint16_t*)(&state))[i];
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <spi_send_receive+0xac>)
 8000da0:	4413      	add	r3, r2
 8000da2:	8819      	ldrh	r1, [r3, #0]
 8000da4:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <spi_send_receive+0xb0>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < STATE_LEN ; i++)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3301      	adds	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b1d      	cmp	r3, #29
 8000db6:	ddf0      	ble.n	8000d9a <spi_send_receive+0x7e>
	}

}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000410 	.word	0x20000410
 8000dc8:	200003d4 	.word	0x200003d4
 8000dcc:	20000428 	.word	0x20000428

08000dd0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	//unpack the received bytes from rx buffer into †he valuesrec structur
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==0)
 8000dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ddc:	482c      	ldr	r0, [pc, #176]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0xc0>)
 8000dde:	f003 fd1f 	bl	8004820 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d149      	bne.n	8000e7c <HAL_SPI_TxRxCpltCallback+0xac>
	{
		for(int i = 0; i < RX_LEN; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e00b      	b.n	8000e06 <HAL_SPI_TxRxCpltCallback+0x36>
		{
			((uint16_t*) &valuesrec)[i] = spi_rx_buffer[i];
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4a28      	ldr	r2, [pc, #160]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000df4:	4413      	add	r3, r2
 8000df6:	4928      	ldr	r1, [pc, #160]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0xc8>)
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dfe:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < RX_LEN; i++)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b41      	cmp	r3, #65	@ 0x41
 8000e0a:	ddf0      	ble.n	8000dee <HAL_SPI_TxRxCpltCallback+0x1e>
		}

		//if the communication has no issues the values will write in the control structure
		checksum_calc = xor_checksum((uint32_t*)&valuesrec,32);
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4821      	ldr	r0, [pc, #132]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e10:	f000 ffda 	bl	8001dc8 <xor_checksum>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4a21      	ldr	r2, [pc, #132]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0xcc>)
 8000e18:	6013      	str	r3, [r2, #0]

		//Retrieve the current control Mode stored at higher 16 bits and reset flags to its value
		currentControlMode = (valuesrec.flags[0]>>16);
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea0 <HAL_SPI_TxRxCpltCallback+0xd0>)
 8000e22:	6013      	str	r3, [r2, #0]
		valuesrec.flags[0] = (valuesrec.flags[0] & 0xFFFF);
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e2c:	6793      	str	r3, [r2, #120]	@ 0x78
		valuesrec.flags[1] = (valuesrec.flags[1] & 0xFFFF);
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e36:	67d3      	str	r3, [r2, #124]	@ 0x7c

		if(valuesrec.checksum == checksum_calc && (valuesrec.flags[0]<=3 || valuesrec.flags[1]<=3))
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e3a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0xcc>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d11a      	bne.n	8000e7c <HAL_SPI_TxRxCpltCallback+0xac>
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d903      	bls.n	8000e56 <HAL_SPI_TxRxCpltCallback+0x86>
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d812      	bhi.n	8000e7c <HAL_SPI_TxRxCpltCallback+0xac>
		{
			for(int i = 0; i < CONTROL_LEN; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00c      	b.n	8000e76 <HAL_SPI_TxRxCpltCallback+0xa6>
			{
				((uint16_t*) &control)[i] = ((uint16_t*) &valuesrec)[i];
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4a0c      	ldr	r2, [pc, #48]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000e62:	441a      	add	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	490e      	ldr	r1, [pc, #56]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0xd4>)
 8000e6a:	440b      	add	r3, r1
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < CONTROL_LEN; i++)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b41      	cmp	r3, #65	@ 0x41
 8000e7a:	ddef      	ble.n	8000e5c <HAL_SPI_TxRxCpltCallback+0x8c>
		}

	}

	// Disable the SPI //vishnu : I think this actually enables SPI callback for next
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8000e7c:	2342      	movs	r3, #66	@ 0x42
 8000e7e:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0xc8>)
 8000e80:	4909      	ldr	r1, [pc, #36]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0xd8>)
 8000e82:	480a      	ldr	r0, [pc, #40]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xdc>)
 8000e84:	f004 fbd8 	bl	8005638 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020000 	.word	0x40020000
 8000e94:	200002cc 	.word	0x200002cc
 8000e98:	200004ac 	.word	0x200004ac
 8000e9c:	20000540 	.word	0x20000540
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000350 	.word	0x20000350
 8000ea8:	20000428 	.word	0x20000428
 8000eac:	20000124 	.word	0x20000124

08000eb0 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback (SPI_HandleTypeDef* hspi){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CallbackError_spi=HAL_SPI_GetError(&hspi1);
 8000eb8:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <HAL_SPI_ErrorCallback+0x34>)
 8000eba:	f004 fd4f 	bl	800595c <HAL_SPI_GetError>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <HAL_SPI_ErrorCallback+0x38>)
 8000ec2:	6013      	str	r3, [r2, #0]

	HAL_SPI_DeInit(&hspi1);
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <HAL_SPI_ErrorCallback+0x34>)
 8000ec6:	f004 fb8e 	bl	80055e6 <HAL_SPI_DeInit>
	HAL_SPI_Init(&hspi1);
 8000eca:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <HAL_SPI_ErrorCallback+0x34>)
 8000ecc:	f004 fb02 	bl	80054d4 <HAL_SPI_Init>

	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8000ed0:	2342      	movs	r3, #66	@ 0x42
 8000ed2:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <HAL_SPI_ErrorCallback+0x3c>)
 8000ed4:	4906      	ldr	r1, [pc, #24]	@ (8000ef0 <HAL_SPI_ErrorCallback+0x40>)
 8000ed6:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <HAL_SPI_ErrorCallback+0x34>)
 8000ed8:	f004 fbae 	bl	8005638 <HAL_SPI_TransmitReceive_IT>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000124 	.word	0x20000124
 8000ee8:	20000564 	.word	0x20000564
 8000eec:	200004ac 	.word	0x200004ac
 8000ef0:	20000428 	.word	0x20000428

08000ef4 <can_send_receive>:

							/***************************************************
							 *  				 C A N
							 ***************************************************/

void can_send_receive(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

	// Reset the flags before each CAN communication
	state.flags[0] = 0;
 8000ef8:	4b48      	ldr	r3, [pc, #288]	@ (800101c <can_send_receive+0x128>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	631a      	str	r2, [r3, #48]	@ 0x30
	state.flags[1] = 0;
 8000efe:	4b47      	ldr	r3, [pc, #284]	@ (800101c <can_send_receive+0x128>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	635a      	str	r2, [r3, #52]	@ 0x34

	CAN=0;
 8000f04:	4b46      	ldr	r3, [pc, #280]	@ (8001020 <can_send_receive+0x12c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	pack_message(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000f0a:	4a46      	ldr	r2, [pc, #280]	@ (8001024 <can_send_receive+0x130>)
 8000f0c:	4946      	ldr	r1, [pc, #280]	@ (8001028 <can_send_receive+0x134>)
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 f896 	bl	8001040 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000f14:	4b45      	ldr	r3, [pc, #276]	@ (800102c <can_send_receive+0x138>)
 8000f16:	4a43      	ldr	r2, [pc, #268]	@ (8001024 <can_send_receive+0x130>)
 8000f18:	4943      	ldr	r1, [pc, #268]	@ (8001028 <can_send_receive+0x134>)
 8000f1a:	4845      	ldr	r0, [pc, #276]	@ (8001030 <can_send_receive+0x13c>)
 8000f1c:	f002 f912 	bl	8003144 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8000f20:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f24:	f000 ff36 	bl	8001d94 <delay_us>
	if (receivedCanBus==0){
 8000f28:	4b42      	ldr	r3, [pc, #264]	@ (8001034 <can_send_receive+0x140>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <can_send_receive+0x42>
		unpack_replay(CAN_RxData_buf);
 8000f30:	4841      	ldr	r0, [pc, #260]	@ (8001038 <can_send_receive+0x144>)
 8000f32:	f000 fc13 	bl	800175c <unpack_replay>
	}
	pack_message(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000f36:	4a3b      	ldr	r2, [pc, #236]	@ (8001024 <can_send_receive+0x130>)
 8000f38:	493b      	ldr	r1, [pc, #236]	@ (8001028 <can_send_receive+0x134>)
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f880 	bl	8001040 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000f40:	4b3a      	ldr	r3, [pc, #232]	@ (800102c <can_send_receive+0x138>)
 8000f42:	4a38      	ldr	r2, [pc, #224]	@ (8001024 <can_send_receive+0x130>)
 8000f44:	4938      	ldr	r1, [pc, #224]	@ (8001028 <can_send_receive+0x134>)
 8000f46:	483a      	ldr	r0, [pc, #232]	@ (8001030 <can_send_receive+0x13c>)
 8000f48:	f002 f8fc 	bl	8003144 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8000f4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f50:	f000 ff20 	bl	8001d94 <delay_us>
	if (receivedCanBus==0){
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <can_send_receive+0x140>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <can_send_receive+0x6e>
		unpack_replay(CAN_RxData_buf);
 8000f5c:	4836      	ldr	r0, [pc, #216]	@ (8001038 <can_send_receive+0x144>)
 8000f5e:	f000 fbfd 	bl	800175c <unpack_replay>
	}
	pack_message(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000f62:	4a30      	ldr	r2, [pc, #192]	@ (8001024 <can_send_receive+0x130>)
 8000f64:	4930      	ldr	r1, [pc, #192]	@ (8001028 <can_send_receive+0x134>)
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 f86a 	bl	8001040 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <can_send_receive+0x138>)
 8000f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <can_send_receive+0x130>)
 8000f70:	492d      	ldr	r1, [pc, #180]	@ (8001028 <can_send_receive+0x134>)
 8000f72:	482f      	ldr	r0, [pc, #188]	@ (8001030 <can_send_receive+0x13c>)
 8000f74:	f002 f8e6 	bl	8003144 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8000f78:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f7c:	f000 ff0a 	bl	8001d94 <delay_us>
	if (receivedCanBus==0){
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <can_send_receive+0x140>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <can_send_receive+0x9a>
		unpack_replay(CAN_RxData_buf);
 8000f88:	482b      	ldr	r0, [pc, #172]	@ (8001038 <can_send_receive+0x144>)
 8000f8a:	f000 fbe7 	bl	800175c <unpack_replay>
	}

	CAN=1;
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <can_send_receive+0x12c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
	pack_message(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000f94:	4a23      	ldr	r2, [pc, #140]	@ (8001024 <can_send_receive+0x130>)
 8000f96:	4924      	ldr	r1, [pc, #144]	@ (8001028 <can_send_receive+0x134>)
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 f851 	bl	8001040 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000f9e:	4b23      	ldr	r3, [pc, #140]	@ (800102c <can_send_receive+0x138>)
 8000fa0:	4a20      	ldr	r2, [pc, #128]	@ (8001024 <can_send_receive+0x130>)
 8000fa2:	4921      	ldr	r1, [pc, #132]	@ (8001028 <can_send_receive+0x134>)
 8000fa4:	4825      	ldr	r0, [pc, #148]	@ (800103c <can_send_receive+0x148>)
 8000fa6:	f002 f8cd 	bl	8003144 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8000faa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000fae:	f000 fef1 	bl	8001d94 <delay_us>
	if (receivedCanBus==1){
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <can_send_receive+0x140>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <can_send_receive+0xcc>
		unpack_replay(CAN_RxData_buf);
 8000fba:	481f      	ldr	r0, [pc, #124]	@ (8001038 <can_send_receive+0x144>)
 8000fbc:	f000 fbce 	bl	800175c <unpack_replay>
	}
	pack_message(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000fc0:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <can_send_receive+0x130>)
 8000fc2:	4919      	ldr	r1, [pc, #100]	@ (8001028 <can_send_receive+0x134>)
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 f83b 	bl	8001040 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <can_send_receive+0x138>)
 8000fcc:	4a15      	ldr	r2, [pc, #84]	@ (8001024 <can_send_receive+0x130>)
 8000fce:	4916      	ldr	r1, [pc, #88]	@ (8001028 <can_send_receive+0x134>)
 8000fd0:	481a      	ldr	r0, [pc, #104]	@ (800103c <can_send_receive+0x148>)
 8000fd2:	f002 f8b7 	bl	8003144 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8000fd6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000fda:	f000 fedb 	bl	8001d94 <delay_us>
	if (receivedCanBus==1){
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <can_send_receive+0x140>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <can_send_receive+0xf8>
		unpack_replay(CAN_RxData_buf);
 8000fe6:	4814      	ldr	r0, [pc, #80]	@ (8001038 <can_send_receive+0x144>)
 8000fe8:	f000 fbb8 	bl	800175c <unpack_replay>
	}
	pack_message(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <can_send_receive+0x130>)
 8000fee:	490e      	ldr	r1, [pc, #56]	@ (8001028 <can_send_receive+0x134>)
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f825 	bl	8001040 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <can_send_receive+0x138>)
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <can_send_receive+0x130>)
 8000ffa:	490b      	ldr	r1, [pc, #44]	@ (8001028 <can_send_receive+0x134>)
 8000ffc:	480f      	ldr	r0, [pc, #60]	@ (800103c <can_send_receive+0x148>)
 8000ffe:	f002 f8a1 	bl	8003144 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8001002:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001006:	f000 fec5 	bl	8001d94 <delay_us>
	if (receivedCanBus==1){
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <can_send_receive+0x140>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d102      	bne.n	8001018 <can_send_receive+0x124>
		unpack_replay(CAN_RxData_buf);
 8001012:	4809      	ldr	r0, [pc, #36]	@ (8001038 <can_send_receive+0x144>)
 8001014:	f000 fba2 	bl	800175c <unpack_replay>
	}

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200003d4 	.word	0x200003d4
 8001020:	20000098 	.word	0x20000098
 8001024:	20000530 	.word	0x20000530
 8001028:	200000ec 	.word	0x200000ec
 800102c:	20000120 	.word	0x20000120
 8001030:	2000009c 	.word	0x2000009c
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000538 	.word	0x20000538
 800103c:	200000c4 	.word	0x200000c4

08001040 <pack_message>:

/////////////////////////pack and unpack//////////////////////////

void pack_message(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	@ 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	73fb      	strb	r3, [r7, #15]

	if(ID == Abad_CANID)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b01      	cmp	r3, #1
 8001052:	f040 80c0 	bne.w	80011d6 <pack_message+0x196>
	{
		p_in 	= (control.ab_p[CAN] * ab_mitdirection[CAN]);
 8001056:	4bbd      	ldr	r3, [pc, #756]	@ (800134c <pack_message+0x30c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4abd      	ldr	r2, [pc, #756]	@ (8001350 <pack_message+0x310>)
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	4bb9      	ldr	r3, [pc, #740]	@ (800134c <pack_message+0x30c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4bba      	ldr	r3, [pc, #744]	@ (8001354 <pack_message+0x314>)
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	4bb6      	ldr	r3, [pc, #728]	@ (8001358 <pack_message+0x318>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.ab_v[CAN] * ab_mitdirection[CAN]);
 8001082:	4bb2      	ldr	r3, [pc, #712]	@ (800134c <pack_message+0x30c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4ab2      	ldr	r2, [pc, #712]	@ (8001350 <pack_message+0x310>)
 8001088:	3306      	adds	r3, #6
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	ed93 7a00 	vldr	s14, [r3]
 8001092:	4bae      	ldr	r3, [pc, #696]	@ (800134c <pack_message+0x30c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4bae      	ldr	r3, [pc, #696]	@ (8001354 <pack_message+0x314>)
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010aa:	4bac      	ldr	r3, [pc, #688]	@ (800135c <pack_message+0x31c>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]
		kp_in 	=  control.ab_kp[CAN];   //stifness
 80010b0:	4ba6      	ldr	r3, [pc, #664]	@ (800134c <pack_message+0x30c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4aa6      	ldr	r2, [pc, #664]	@ (8001350 <pack_message+0x310>)
 80010b6:	330c      	adds	r3, #12
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4aa8      	ldr	r2, [pc, #672]	@ (8001360 <pack_message+0x320>)
 80010c0:	6013      	str	r3, [r2, #0]
		kd_in 	=  control.ab_kd[CAN];     //damper
 80010c2:	4ba2      	ldr	r3, [pc, #648]	@ (800134c <pack_message+0x30c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4aa2      	ldr	r2, [pc, #648]	@ (8001350 <pack_message+0x310>)
 80010c8:	3312      	adds	r3, #18
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4aa4      	ldr	r2, [pc, #656]	@ (8001364 <pack_message+0x324>)
 80010d2:	6013      	str	r3, [r2, #0]
		t_in 	= (control.ab_t[CAN] * ab_mitdirection[CAN]);
 80010d4:	4b9d      	ldr	r3, [pc, #628]	@ (800134c <pack_message+0x30c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4a9d      	ldr	r2, [pc, #628]	@ (8001350 <pack_message+0x310>)
 80010da:	3318      	adds	r3, #24
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4b99      	ldr	r3, [pc, #612]	@ (800134c <pack_message+0x30c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b9a      	ldr	r3, [pc, #616]	@ (8001354 <pack_message+0x314>)
 80010ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001368 <pack_message+0x328>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.ab_p[CAN],state.ab_p[CAN],AB_LIM_P, AB_LIM_N))
 8001102:	4b92      	ldr	r3, [pc, #584]	@ (800134c <pack_message+0x30c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4a91      	ldr	r2, [pc, #580]	@ (8001350 <pack_message+0x310>)
 800110a:	441a      	add	r2, r3
 800110c:	4b8f      	ldr	r3, [pc, #572]	@ (800134c <pack_message+0x30c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4996      	ldr	r1, [pc, #600]	@ (800136c <pack_message+0x32c>)
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8001370 <pack_message+0x330>
 800111e:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8001374 <pack_message+0x334>
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	4610      	mov	r0, r2
 8001128:	f000 fc6a 	bl	8001a00 <softstop_joint>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d033      	beq.n	800119a <pack_message+0x15a>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b01;
 8001132:	4b86      	ldr	r3, [pc, #536]	@ (800134c <pack_message+0x30c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4a8d      	ldr	r2, [pc, #564]	@ (800136c <pack_message+0x32c>)
 8001138:	330c      	adds	r3, #12
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	4a83      	ldr	r2, [pc, #524]	@ (800134c <pack_message+0x30c>)
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	4610      	mov	r0, r2
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	4988      	ldr	r1, [pc, #544]	@ (800136c <pack_message+0x32c>)
 800114a:	f100 030c 	add.w	r3, r0, #12
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = p_in * ab_mitdirection[CAN]; // Direction update
 8001152:	4b7e      	ldr	r3, [pc, #504]	@ (800134c <pack_message+0x30c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b7e      	ldr	r3, [pc, #504]	@ (8001354 <pack_message+0x314>)
 800115a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	4b7c      	ldr	r3, [pc, #496]	@ (8001358 <pack_message+0x318>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	4b79      	ldr	r3, [pc, #484]	@ (8001358 <pack_message+0x318>)
 8001172:	edc3 7a00 	vstr	s15, [r3]
			t_in = t_in * ab_mitdirection[CAN]; // Direction update
 8001176:	4b75      	ldr	r3, [pc, #468]	@ (800134c <pack_message+0x30c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b75      	ldr	r3, [pc, #468]	@ (8001354 <pack_message+0x314>)
 800117e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118a:	4b77      	ldr	r3, [pc, #476]	@ (8001368 <pack_message+0x328>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	4b74      	ldr	r3, [pc, #464]	@ (8001368 <pack_message+0x328>)
 8001196:	edc3 7a00 	vstr	s15, [r3]
		}

		// Safety Limit
		safetycheck_reqTrq(state.ab_p[CAN], state.ab_v[CAN], torque.ab_t[CAN]);
 800119a:	4b6c      	ldr	r3, [pc, #432]	@ (800134c <pack_message+0x30c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4a73      	ldr	r2, [pc, #460]	@ (800136c <pack_message+0x32c>)
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	4b68      	ldr	r3, [pc, #416]	@ (800134c <pack_message+0x30c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4a6f      	ldr	r2, [pc, #444]	@ (800136c <pack_message+0x32c>)
 80011ae:	3306      	adds	r3, #6
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	4b64      	ldr	r3, [pc, #400]	@ (800134c <pack_message+0x30c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001378 <pack_message+0x338>)
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edd3 6a00 	vldr	s13, [r3]
 80011c6:	eeb0 1a66 	vmov.f32	s2, s13
 80011ca:	eef0 0a47 	vmov.f32	s1, s14
 80011ce:	eeb0 0a67 	vmov.f32	s0, s15
 80011d2:	f000 fc8d 	bl	8001af0 <safetycheck_reqTrq>
	}
	if(ID == Hip_CANID)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	f040 80e5 	bne.w	80013a8 <pack_message+0x368>
	{
		p_in 	= (control.hip_p[CAN] * hip_mitdirection[CAN]);
 80011de:	4b5b      	ldr	r3, [pc, #364]	@ (800134c <pack_message+0x30c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001350 <pack_message+0x310>)
 80011e4:	3302      	adds	r3, #2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	4b57      	ldr	r3, [pc, #348]	@ (800134c <pack_message+0x30c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b61      	ldr	r3, [pc, #388]	@ (800137c <pack_message+0x33c>)
 80011f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	4b54      	ldr	r3, [pc, #336]	@ (8001358 <pack_message+0x318>)
 8001208:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.hip_v[CAN] * hip_mitdirection[CAN]);
 800120c:	4b4f      	ldr	r3, [pc, #316]	@ (800134c <pack_message+0x30c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4a4f      	ldr	r2, [pc, #316]	@ (8001350 <pack_message+0x310>)
 8001212:	3308      	adds	r3, #8
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	4b4b      	ldr	r3, [pc, #300]	@ (800134c <pack_message+0x30c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b56      	ldr	r3, [pc, #344]	@ (800137c <pack_message+0x33c>)
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	4b49      	ldr	r3, [pc, #292]	@ (800135c <pack_message+0x31c>)
 8001236:	edc3 7a00 	vstr	s15, [r3]
		kp_in	=  control.hip_kp[CAN];   //stifness
 800123a:	4b44      	ldr	r3, [pc, #272]	@ (800134c <pack_message+0x30c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4a44      	ldr	r2, [pc, #272]	@ (8001350 <pack_message+0x310>)
 8001240:	330e      	adds	r3, #14
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a45      	ldr	r2, [pc, #276]	@ (8001360 <pack_message+0x320>)
 800124a:	6013      	str	r3, [r2, #0]
		kd_in	=  control.hip_kd[CAN];     //damper
 800124c:	4b3f      	ldr	r3, [pc, #252]	@ (800134c <pack_message+0x30c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4a3f      	ldr	r2, [pc, #252]	@ (8001350 <pack_message+0x310>)
 8001252:	3314      	adds	r3, #20
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a42      	ldr	r2, [pc, #264]	@ (8001364 <pack_message+0x324>)
 800125c:	6013      	str	r3, [r2, #0]
		t_in	= (control.hip_t[CAN] * hip_mitdirection[CAN]);
 800125e:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <pack_message+0x30c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4a3b      	ldr	r2, [pc, #236]	@ (8001350 <pack_message+0x310>)
 8001264:	331a      	adds	r3, #26
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	4b37      	ldr	r3, [pc, #220]	@ (800134c <pack_message+0x30c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <pack_message+0x33c>)
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001286:	4b38      	ldr	r3, [pc, #224]	@ (8001368 <pack_message+0x328>)
 8001288:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.hip_p[CAN],state.hip_p[CAN], HIP_LIM_P, HIP_LIM_N))
 800128c:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <pack_message+0x30c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3302      	adds	r3, #2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4a2e      	ldr	r2, [pc, #184]	@ (8001350 <pack_message+0x310>)
 8001296:	441a      	add	r2, r3
 8001298:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <pack_message+0x30c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4933      	ldr	r1, [pc, #204]	@ (800136c <pack_message+0x32c>)
 800129e:	3302      	adds	r3, #2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8001380 <pack_message+0x340>
 80012ac:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8001384 <pack_message+0x344>
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	4610      	mov	r0, r2
 80012b6:	f000 fba3 	bl	8001a00 <softstop_joint>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d033      	beq.n	8001328 <pack_message+0x2e8>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b10;
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <pack_message+0x30c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4a29      	ldr	r2, [pc, #164]	@ (800136c <pack_message+0x32c>)
 80012c6:	330c      	adds	r3, #12
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	4a1f      	ldr	r2, [pc, #124]	@ (800134c <pack_message+0x30c>)
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	4610      	mov	r0, r2
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	4925      	ldr	r1, [pc, #148]	@ (800136c <pack_message+0x32c>)
 80012d8:	f100 030c 	add.w	r3, r0, #12
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = p_in * hip_mitdirection[CAN]; // Direction update
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <pack_message+0x30c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b25      	ldr	r3, [pc, #148]	@ (800137c <pack_message+0x33c>)
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <pack_message+0x318>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <pack_message+0x318>)
 8001300:	edc3 7a00 	vstr	s15, [r3]
			t_in = t_in * hip_mitdirection[CAN]; // Direction update
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <pack_message+0x30c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <pack_message+0x33c>)
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <pack_message+0x328>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <pack_message+0x328>)
 8001324:	edc3 7a00 	vstr	s15, [r3]
		}

		// Safety Limit
		safetycheck_reqTrq(state.hip_p[CAN], state.hip_v[CAN], torque.hip_t[CAN]);
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <pack_message+0x30c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <pack_message+0x32c>)
 800132e:	3302      	adds	r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <pack_message+0x30c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <pack_message+0x32c>)
 800133e:	3308      	adds	r3, #8
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	ed93 7a00 	vldr	s14, [r3]
 8001348:	e01e      	b.n	8001388 <pack_message+0x348>
 800134a:	bf00      	nop
 800134c:	20000098 	.word	0x20000098
 8001350:	20000350 	.word	0x20000350
 8001354:	08006eb8 	.word	0x08006eb8
 8001358:	20000544 	.word	0x20000544
 800135c:	20000548 	.word	0x20000548
 8001360:	20000004 	.word	0x20000004
 8001364:	20000008 	.word	0x20000008
 8001368:	2000054c 	.word	0x2000054c
 800136c:	200003d4 	.word	0x200003d4
 8001370:	bfc90ff9 	.word	0xbfc90ff9
 8001374:	3fc90ff9 	.word	0x3fc90ff9
 8001378:	20000410 	.word	0x20000410
 800137c:	08006ec0 	.word	0x08006ec0
 8001380:	c0060aa6 	.word	0xc0060aa6
 8001384:	40060aa6 	.word	0x40060aa6
 8001388:	4bcd      	ldr	r3, [pc, #820]	@ (80016c0 <pack_message+0x680>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4acd      	ldr	r2, [pc, #820]	@ (80016c4 <pack_message+0x684>)
 800138e:	3302      	adds	r3, #2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	edd3 6a00 	vldr	s13, [r3]
 8001398:	eeb0 1a66 	vmov.f32	s2, s13
 800139c:	eef0 0a47 	vmov.f32	s1, s14
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	f000 fba4 	bl	8001af0 <safetycheck_reqTrq>
	}
	if(ID == Knee_CANID)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	f040 80d9 	bne.w	8001562 <pack_message+0x522>
	{
		p_in 	= (control.knee_p[CAN] * knee_mitdirection[CAN]) * KNEE_GEARRATIO;
 80013b0:	4bc3      	ldr	r3, [pc, #780]	@ (80016c0 <pack_message+0x680>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4ac4      	ldr	r2, [pc, #784]	@ (80016c8 <pack_message+0x688>)
 80013b6:	3304      	adds	r3, #4
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	4bbf      	ldr	r3, [pc, #764]	@ (80016c0 <pack_message+0x680>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4bc1      	ldr	r3, [pc, #772]	@ (80016cc <pack_message+0x68c>)
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	4bbb      	ldr	r3, [pc, #748]	@ (80016d0 <pack_message+0x690>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.knee_v[CAN] * knee_mitdirection[CAN]) / KNEE_GEARRATIO;
 80013e6:	4bb6      	ldr	r3, [pc, #728]	@ (80016c0 <pack_message+0x680>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4ab7      	ldr	r2, [pc, #732]	@ (80016c8 <pack_message+0x688>)
 80013ec:	330a      	adds	r3, #10
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	4bb2      	ldr	r3, [pc, #712]	@ (80016c0 <pack_message+0x680>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4bb3      	ldr	r3, [pc, #716]	@ (80016cc <pack_message+0x68c>)
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8001412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001416:	4baf      	ldr	r3, [pc, #700]	@ (80016d4 <pack_message+0x694>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
		kp_in 	=  control.knee_kp[CAN];   //stifness
 800141c:	4ba8      	ldr	r3, [pc, #672]	@ (80016c0 <pack_message+0x680>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4aa9      	ldr	r2, [pc, #676]	@ (80016c8 <pack_message+0x688>)
 8001422:	3310      	adds	r3, #16
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4aab      	ldr	r2, [pc, #684]	@ (80016d8 <pack_message+0x698>)
 800142c:	6013      	str	r3, [r2, #0]
		kd_in	=  control.knee_kd[CAN];     //damper
 800142e:	4ba4      	ldr	r3, [pc, #656]	@ (80016c0 <pack_message+0x680>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4aa5      	ldr	r2, [pc, #660]	@ (80016c8 <pack_message+0x688>)
 8001434:	3316      	adds	r3, #22
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4aa7      	ldr	r2, [pc, #668]	@ (80016dc <pack_message+0x69c>)
 800143e:	6013      	str	r3, [r2, #0]
		t_in 	= (control.knee_t[CAN] * knee_mitdirection[CAN]) * KNEE_GEARRATIO;
 8001440:	4b9f      	ldr	r3, [pc, #636]	@ (80016c0 <pack_message+0x680>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4aa0      	ldr	r2, [pc, #640]	@ (80016c8 <pack_message+0x688>)
 8001446:	331c      	adds	r3, #28
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	4b9b      	ldr	r3, [pc, #620]	@ (80016c0 <pack_message+0x680>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b9d      	ldr	r3, [pc, #628]	@ (80016cc <pack_message+0x68c>)
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	4b9b      	ldr	r3, [pc, #620]	@ (80016e0 <pack_message+0x6a0>)
 8001472:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.knee_p[CAN], state.knee_p[CAN], KNEE_LIM_P, KNEE_LIM_N))
 8001476:	4b92      	ldr	r3, [pc, #584]	@ (80016c0 <pack_message+0x680>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3304      	adds	r3, #4
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4a92      	ldr	r2, [pc, #584]	@ (80016c8 <pack_message+0x688>)
 8001480:	441a      	add	r2, r3
 8001482:	4b8f      	ldr	r3, [pc, #572]	@ (80016c0 <pack_message+0x680>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4997      	ldr	r1, [pc, #604]	@ (80016e4 <pack_message+0x6a4>)
 8001488:	3304      	adds	r3, #4
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 80016e8 <pack_message+0x6a8>
 8001496:	eddf 0a95 	vldr	s1, [pc, #596]	@ 80016ec <pack_message+0x6ac>
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	4610      	mov	r0, r2
 80014a0:	f000 faae 	bl	8001a00 <softstop_joint>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d03b      	beq.n	8001522 <pack_message+0x4e2>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b11;
 80014aa:	4b85      	ldr	r3, [pc, #532]	@ (80016c0 <pack_message+0x680>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4a8d      	ldr	r2, [pc, #564]	@ (80016e4 <pack_message+0x6a4>)
 80014b0:	330c      	adds	r3, #12
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	4a82      	ldr	r2, [pc, #520]	@ (80016c0 <pack_message+0x680>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	4610      	mov	r0, r2
 80014bc:	f043 0203 	orr.w	r2, r3, #3
 80014c0:	4988      	ldr	r1, [pc, #544]	@ (80016e4 <pack_message+0x6a4>)
 80014c2:	f100 030c 	add.w	r3, r0, #12
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = (p_in * knee_mitdirection[CAN]) * KNEE_GEARRATIO; // Direction update
 80014ca:	4b7d      	ldr	r3, [pc, #500]	@ (80016c0 <pack_message+0x680>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b7e      	ldr	r3, [pc, #504]	@ (80016cc <pack_message+0x68c>)
 80014d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014de:	4b7c      	ldr	r3, [pc, #496]	@ (80016d0 <pack_message+0x690>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80014ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f0:	4b77      	ldr	r3, [pc, #476]	@ (80016d0 <pack_message+0x690>)
 80014f2:	edc3 7a00 	vstr	s15, [r3]
			t_in = (t_in * knee_mitdirection[CAN]) * KNEE_GEARRATIO; // Direction update
 80014f6:	4b72      	ldr	r3, [pc, #456]	@ (80016c0 <pack_message+0x680>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b73      	ldr	r3, [pc, #460]	@ (80016cc <pack_message+0x68c>)
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150a:	4b75      	ldr	r3, [pc, #468]	@ (80016e0 <pack_message+0x6a0>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	4b70      	ldr	r3, [pc, #448]	@ (80016e0 <pack_message+0x6a0>)
 800151e:	edc3 7a00 	vstr	s15, [r3]
		}

		// Safety Limit
		safetycheck_reqTrq(state.knee_p[CAN], state.knee_v[CAN], torque.knee_t[CAN]);
 8001522:	4b67      	ldr	r3, [pc, #412]	@ (80016c0 <pack_message+0x680>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4a6f      	ldr	r2, [pc, #444]	@ (80016e4 <pack_message+0x6a4>)
 8001528:	3304      	adds	r3, #4
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	4b63      	ldr	r3, [pc, #396]	@ (80016c0 <pack_message+0x680>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4a6b      	ldr	r2, [pc, #428]	@ (80016e4 <pack_message+0x6a4>)
 8001538:	330a      	adds	r3, #10
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	4b5f      	ldr	r3, [pc, #380]	@ (80016c0 <pack_message+0x680>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4a5f      	ldr	r2, [pc, #380]	@ (80016c4 <pack_message+0x684>)
 8001548:	3304      	adds	r3, #4
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	edd3 6a00 	vldr	s13, [r3]
 8001552:	eeb0 1a66 	vmov.f32	s2, s13
 8001556:	eef0 0a47 	vmov.f32	s1, s14
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	f000 fac7 	bl	8001af0 <safetycheck_reqTrq>
	}

	Header->StdId = ID;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	601a      	str	r2, [r3, #0]

    /// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, p_in), P_MAX);
 8001568:	4b59      	ldr	r3, [pc, #356]	@ (80016d0 <pack_message+0x690>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	f005 fbf3 	bl	8006d60 <fmaxf>
 800157a:	eef0 7a40 	vmov.f32	s15, s0
 800157e:	eef2 0a09 	vmov.f32	s1, #41	@ 0x41480000  12.5
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	f005 fc08 	bl	8006d9a <fminf>
 800158a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	float v_des = fminf(fmaxf(V_MIN, v_in), V_MAX);
 800158e:	4b51      	ldr	r3, [pc, #324]	@ (80016d4 <pack_message+0x694>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eefb 0a0a 	vmov.f32	s1, #186	@ 0xc1d00000 -26.0
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	f005 fbe0 	bl	8006d60 <fmaxf>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	eef3 0a0a 	vmov.f32	s1, #58	@ 0x41d00000  26.0
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f005 fbf5 	bl	8006d9a <fminf>
 80015b0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float kp = fminf(fmaxf(KP_MIN, kp_in), KP_MAX);
 80015b4:	4b48      	ldr	r3, [pc, #288]	@ (80016d8 <pack_message+0x698>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 80016ec <pack_message+0x6ac>
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	f005 fbcd 	bl	8006d60 <fmaxf>
 80015c6:	eef0 7a40 	vmov.f32	s15, s0
 80015ca:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80016f0 <pack_message+0x6b0>
 80015ce:	eeb0 0a67 	vmov.f32	s0, s15
 80015d2:	f005 fbe2 	bl	8006d9a <fminf>
 80015d6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float kd = fminf(fmaxf(KD_MIN, kd_in), KD_MAX);
 80015da:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <pack_message+0x69c>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80016ec <pack_message+0x6ac>
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	f005 fbba 	bl	8006d60 <fmaxf>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	f005 fbcf 	bl	8006d9a <fminf>
 80015fc:	ed87 0a08 	vstr	s0, [r7, #32]
	float t_ff = fminf(fmaxf(T_MIN, t_in), T_MAX);
 8001600:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <pack_message+0x6a0>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	f005 fba7 	bl	8006d60 <fmaxf>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
 8001616:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	f005 fbbc 	bl	8006d9a <fminf>
 8001622:	ed87 0a07 	vstr	s0, [r7, #28]

    /// convert floats to unsigned ints ///
    uint16_t p_int = float_to_uint(p_des, MOTOR_P_MIN, MOTOR_P_MAX, 16);
 8001626:	2010      	movs	r0, #16
 8001628:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 800162c:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8001630:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001634:	f000 fb48 	bl	8001cc8 <float_to_uint>
 8001638:	4603      	mov	r3, r0
 800163a:	837b      	strh	r3, [r7, #26]
    uint16_t v_int = float_to_uint(v_des, MOTOR_V_MIN, MOTOR_V_MAX, 12);
 800163c:	200c      	movs	r0, #12
 800163e:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 80016f4 <pack_message+0x6b4>
 8001642:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80016f8 <pack_message+0x6b8>
 8001646:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800164a:	f000 fb3d 	bl	8001cc8 <float_to_uint>
 800164e:	4603      	mov	r3, r0
 8001650:	833b      	strh	r3, [r7, #24]
    uint16_t kp_int = float_to_uint(kp, MOTOR_KP_MIN, MOTOR_KP_MAX, 12);
 8001652:	200c      	movs	r0, #12
 8001654:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 80016f0 <pack_message+0x6b0>
 8001658:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80016ec <pack_message+0x6ac>
 800165c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001660:	f000 fb32 	bl	8001cc8 <float_to_uint>
 8001664:	4603      	mov	r3, r0
 8001666:	82fb      	strh	r3, [r7, #22]
    uint16_t kd_int = float_to_uint(kd, MOTOR_KD_MIN, MOTOR_KD_MAX, 12);
 8001668:	200c      	movs	r0, #12
 800166a:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800166e:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80016ec <pack_message+0x6ac>
 8001672:	ed97 0a08 	vldr	s0, [r7, #32]
 8001676:	f000 fb27 	bl	8001cc8 <float_to_uint>
 800167a:	4603      	mov	r3, r0
 800167c:	82bb      	strh	r3, [r7, #20]
    uint16_t t_int = float_to_uint(t_ff, MOTOR_T_MIN, MOTOR_T_MAX, 12);
 800167e:	200c      	movs	r0, #12
 8001680:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 80016fc <pack_message+0x6bc>
 8001684:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8001700 <pack_message+0x6c0>
 8001688:	ed97 0a07 	vldr	s0, [r7, #28]
 800168c:	f000 fb1c 	bl	8001cc8 <float_to_uint>
 8001690:	4603      	mov	r3, r0
 8001692:	827b      	strh	r3, [r7, #18]

    /// pack ints into the can buffer ///
    Data[0] = p_int>>8;
 8001694:	8b7b      	ldrh	r3, [r7, #26]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29b      	uxth	r3, r3
 800169a:	b2da      	uxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	701a      	strb	r2, [r3, #0]
    Data[1] = p_int&0xFF;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3301      	adds	r3, #1
 80016a4:	8b7a      	ldrh	r2, [r7, #26]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]
    Data[2] = v_int>>4;
 80016aa:	8b3b      	ldrh	r3, [r7, #24]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3302      	adds	r3, #2
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
    Data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80016b8:	8b3b      	ldrh	r3, [r7, #24]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	e021      	b.n	8001704 <pack_message+0x6c4>
 80016c0:	20000098 	.word	0x20000098
 80016c4:	20000410 	.word	0x20000410
 80016c8:	20000350 	.word	0x20000350
 80016cc:	08006ec8 	.word	0x08006ec8
 80016d0:	20000544 	.word	0x20000544
 80016d4:	20000548 	.word	0x20000548
 80016d8:	20000004 	.word	0x20000004
 80016dc:	20000008 	.word	0x20000008
 80016e0:	2000054c 	.word	0x2000054c
 80016e4:	200003d4 	.word	0x200003d4
 80016e8:	c08074d1 	.word	0xc08074d1
 80016ec:	00000000 	.word	0x00000000
 80016f0:	43fa0000 	.word	0x43fa0000
 80016f4:	42480000 	.word	0x42480000
 80016f8:	c2480000 	.word	0xc2480000
 80016fc:	42820000 	.word	0x42820000
 8001700:	c2820000 	.word	0xc2820000
 8001704:	8afb      	ldrh	r3, [r7, #22]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25a      	sxtb	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3303      	adds	r3, #3
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
    Data[4] = kp_int&0xFF;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3304      	adds	r3, #4
 800171c:	8afa      	ldrh	r2, [r7, #22]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
    Data[5] = kd_int>>4;
 8001722:	8abb      	ldrh	r3, [r7, #20]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3305      	adds	r3, #5
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
    Data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 8001730:	8abb      	ldrh	r3, [r7, #20]
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	b25a      	sxtb	r2, r3
 8001736:	8a7b      	ldrh	r3, [r7, #18]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b29b      	uxth	r3, r3
 800173c:	b25b      	sxtb	r3, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	b25a      	sxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3306      	adds	r3, #6
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]
    Data[7] = t_int&0xff;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3307      	adds	r3, #7
 800174e:	8a7a      	ldrh	r2, [r7, #18]
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]

}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	@ 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <unpack_replay>:


void unpack_replay(uint8_t*Data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	/// unpack ints from can buffer ///

	uint16_t id = Data[0];
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	81fb      	strh	r3, [r7, #14]
	uint16_t p_int = (Data[1]<<8)|Data[2];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3301      	adds	r3, #1
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3302      	adds	r3, #2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	81bb      	strh	r3, [r7, #12]
	uint16_t v_int = (Data[3]<<4)|(Data[4]>>4);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	b21a      	sxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3304      	adds	r3, #4
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	b2db      	uxtb	r3, r3
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21b      	sxth	r3, r3
 800179c:	817b      	strh	r3, [r7, #10]
	uint16_t i_int = ((Data[4]&0xF)<<8)|Data[5];
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3305      	adds	r3, #5
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	813b      	strh	r3, [r7, #8]
	/// convert uints to floats ///
	p_out = uint_to_float(p_int, MOTOR_P_MIN, MOTOR_P_MAX, 16);
 80017bc:	89bb      	ldrh	r3, [r7, #12]
 80017be:	2110      	movs	r1, #16
 80017c0:	eef2 0a09 	vmov.f32	s1, #41	@ 0x41480000  12.5
 80017c4:	eeba 0a09 	vmov.f32	s0, #169	@ 0xc1480000 -12.5
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fab0 	bl	8001d2e <uint_to_float>
 80017ce:	eef0 7a40 	vmov.f32	s15, s0
 80017d2:	4b7e      	ldr	r3, [pc, #504]	@ (80019cc <unpack_replay+0x270>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
	v_out = uint_to_float(v_int, MOTOR_V_MIN, MOTOR_V_MAX, 12);
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	210c      	movs	r1, #12
 80017dc:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 80019d0 <unpack_replay+0x274>
 80017e0:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80019d4 <unpack_replay+0x278>
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 faa2 	bl	8001d2e <uint_to_float>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
 80017ee:	4b7a      	ldr	r3, [pc, #488]	@ (80019d8 <unpack_replay+0x27c>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	t_out = uint_to_float(i_int, MOTOR_T_MIN, MOTOR_T_MAX, 12);
 80017f4:	893b      	ldrh	r3, [r7, #8]
 80017f6:	210c      	movs	r1, #12
 80017f8:	eddf 0a78 	vldr	s1, [pc, #480]	@ 80019dc <unpack_replay+0x280>
 80017fc:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80019e0 <unpack_replay+0x284>
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fa94 	bl	8001d2e <uint_to_float>
 8001806:	eef0 7a40 	vmov.f32	s15, s0
 800180a:	4b76      	ldr	r3, [pc, #472]	@ (80019e4 <unpack_replay+0x288>)
 800180c:	edc3 7a00 	vstr	s15, [r3]

	if(id == Abad_CANID)
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d13f      	bne.n	8001896 <unpack_replay+0x13a>
	{
		state.ab_p[receivedCanBus]=  (p_out * ab_mitdirection[receivedCanBus]);
 8001816:	4b74      	ldr	r3, [pc, #464]	@ (80019e8 <unpack_replay+0x28c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a74      	ldr	r2, [pc, #464]	@ (80019ec <unpack_replay+0x290>)
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001828:	4b68      	ldr	r3, [pc, #416]	@ (80019cc <unpack_replay+0x270>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	4b6e      	ldr	r3, [pc, #440]	@ (80019e8 <unpack_replay+0x28c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	4a6e      	ldr	r2, [pc, #440]	@ (80019f0 <unpack_replay+0x294>)
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	edc3 7a00 	vstr	s15, [r3]
		state.ab_v[receivedCanBus]=  (v_out * ab_mitdirection[receivedCanBus]);
 8001840:	4b69      	ldr	r3, [pc, #420]	@ (80019e8 <unpack_replay+0x28c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a69      	ldr	r2, [pc, #420]	@ (80019ec <unpack_replay+0x290>)
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001852:	4b61      	ldr	r3, [pc, #388]	@ (80019d8 <unpack_replay+0x27c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	4b63      	ldr	r3, [pc, #396]	@ (80019e8 <unpack_replay+0x28c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001860:	4a63      	ldr	r2, [pc, #396]	@ (80019f0 <unpack_replay+0x294>)
 8001862:	3306      	adds	r3, #6
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	edc3 7a00 	vstr	s15, [r3]
		torque.ab_t[receivedCanBus]= (t_out * ab_mitdirection[receivedCanBus]);
 800186c:	4b5e      	ldr	r3, [pc, #376]	@ (80019e8 <unpack_replay+0x28c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a5e      	ldr	r2, [pc, #376]	@ (80019ec <unpack_replay+0x290>)
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187e:	4b59      	ldr	r3, [pc, #356]	@ (80019e4 <unpack_replay+0x288>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	4b58      	ldr	r3, [pc, #352]	@ (80019e8 <unpack_replay+0x28c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188c:	4a59      	ldr	r2, [pc, #356]	@ (80019f4 <unpack_replay+0x298>)
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	edc3 7a00 	vstr	s15, [r3]
	}
	if(id == Hip_CANID)
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d141      	bne.n	8001920 <unpack_replay+0x1c4>
	{
		state.hip_p[receivedCanBus]=  (p_out * hip_mitdirection[receivedCanBus]);
 800189c:	4b52      	ldr	r3, [pc, #328]	@ (80019e8 <unpack_replay+0x28c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a55      	ldr	r2, [pc, #340]	@ (80019f8 <unpack_replay+0x29c>)
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ae:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <unpack_replay+0x270>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	4b4c      	ldr	r3, [pc, #304]	@ (80019e8 <unpack_replay+0x28c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	4a4c      	ldr	r2, [pc, #304]	@ (80019f0 <unpack_replay+0x294>)
 80018be:	3302      	adds	r3, #2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	edc3 7a00 	vstr	s15, [r3]
		state.hip_v[receivedCanBus]=  (v_out * hip_mitdirection[receivedCanBus]);
 80018c8:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <unpack_replay+0x28c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a4a      	ldr	r2, [pc, #296]	@ (80019f8 <unpack_replay+0x29c>)
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018da:	4b3f      	ldr	r3, [pc, #252]	@ (80019d8 <unpack_replay+0x27c>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	4b41      	ldr	r3, [pc, #260]	@ (80019e8 <unpack_replay+0x28c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e8:	4a41      	ldr	r2, [pc, #260]	@ (80019f0 <unpack_replay+0x294>)
 80018ea:	3308      	adds	r3, #8
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	edc3 7a00 	vstr	s15, [r3]
		torque.hip_t[receivedCanBus]= (t_out * hip_mitdirection[receivedCanBus]);
 80018f4:	4b3c      	ldr	r3, [pc, #240]	@ (80019e8 <unpack_replay+0x28c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3f      	ldr	r2, [pc, #252]	@ (80019f8 <unpack_replay+0x29c>)
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <unpack_replay+0x288>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <unpack_replay+0x28c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	4a37      	ldr	r2, [pc, #220]	@ (80019f4 <unpack_replay+0x298>)
 8001916:	3302      	adds	r3, #2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	edc3 7a00 	vstr	s15, [r3]
	}
	if(id == Knee_CANID)
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d14d      	bne.n	80019c2 <unpack_replay+0x266>
	{
		state.knee_p[receivedCanBus]=  (p_out * knee_mitdirection[receivedCanBus])/ KNEE_GEARRATIO;
 8001926:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <unpack_replay+0x28c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a34      	ldr	r2, [pc, #208]	@ (80019fc <unpack_replay+0x2a0>)
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001938:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <unpack_replay+0x270>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001942:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <unpack_replay+0x28c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	4a28      	ldr	r2, [pc, #160]	@ (80019f0 <unpack_replay+0x294>)
 8001950:	3304      	adds	r3, #4
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	edc3 7a00 	vstr	s15, [r3]
		state.knee_v[receivedCanBus]=  (v_out * knee_mitdirection[receivedCanBus])* KNEE_GEARRATIO;
 800195a:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <unpack_replay+0x28c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <unpack_replay+0x2a0>)
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <unpack_replay+0x27c>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <unpack_replay+0x28c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800197e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001982:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <unpack_replay+0x294>)
 8001984:	330a      	adds	r3, #10
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	edc3 7a00 	vstr	s15, [r3]
		torque.knee_t[receivedCanBus]= (t_out * knee_mitdirection[receivedCanBus])/ KNEE_GEARRATIO;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <unpack_replay+0x28c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1a      	ldr	r2, [pc, #104]	@ (80019fc <unpack_replay+0x2a0>)
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <unpack_replay+0x288>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <unpack_replay+0x28c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80019b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b6:	4a0f      	ldr	r2, [pc, #60]	@ (80019f4 <unpack_replay+0x298>)
 80019b8:	3304      	adds	r3, #4
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000550 	.word	0x20000550
 80019d0:	42480000 	.word	0x42480000
 80019d4:	c2480000 	.word	0xc2480000
 80019d8:	20000554 	.word	0x20000554
 80019dc:	42820000 	.word	0x42820000
 80019e0:	c2820000 	.word	0xc2820000
 80019e4:	20000558 	.word	0x20000558
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	08006eb8 	.word	0x08006eb8
 80019f0:	200003d4 	.word	0x200003d4
 80019f4:	20000410 	.word	0x20000410
 80019f8:	08006ec0 	.word	0x08006ec0
 80019fc:	08006ec8 	.word	0x08006ec8

08001a00 <softstop_joint>:

////////////////////////softstop//////////////////////////////////
//actuator only can move to a limit position

int softstop_joint(float *control,float state, float limit_p, float limit_n)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a10:	ed87 1a00 	vstr	s2, [r7]
	if(*control>=limit_p)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d821      	bhi.n	8001a6c <softstop_joint+0x6c>
	{
		//*control = limit_p;
		p_in = limit_p;
 8001a28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad4 <softstop_joint+0xd4>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
		v_in = 0.0f;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <softstop_joint+0xd8>)
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
		kp_in = 0.0f;
 8001a36:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <softstop_joint+0xdc>)
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
		kd_in = KD_SOFTSTOP;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <softstop_joint+0xe0>)
 8001a40:	4a28      	ldr	r2, [pc, #160]	@ (8001ae4 <softstop_joint+0xe4>)
 8001a42:	601a      	str	r2, [r3, #0]
		t_in += KP_SOFTSTOP*(limit_p - state);
 8001a44:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001ae8 <softstop_joint+0xe8>
 8001a54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a58:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <softstop_joint+0xec>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <softstop_joint+0xec>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e02c      	b.n	8001ac6 <softstop_joint+0xc6>
	}
	if(*control<=limit_n)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ed97 7a00 	vldr	s14, [r7]
 8001a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	db21      	blt.n	8001ac4 <softstop_joint+0xc4>
	{
		//*control = limit_n;
		p_in = limit_n;
 8001a80:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <softstop_joint+0xd4>)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6013      	str	r3, [r2, #0]
		v_in = 0.0f;
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <softstop_joint+0xd8>)
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
		kp_in = 0.0f;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <softstop_joint+0xdc>)
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
		kd_in = KD_SOFTSTOP;
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <softstop_joint+0xe0>)
 8001a98:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <softstop_joint+0xe4>)
 8001a9a:	601a      	str	r2, [r3, #0]
		t_in += KP_SOFTSTOP*(limit_n - state);
 8001a9c:	ed97 7a00 	vldr	s14, [r7]
 8001aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001ae8 <softstop_joint+0xe8>
 8001aac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <softstop_joint+0xec>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <softstop_joint+0xec>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <softstop_joint+0xc6>
	}

  return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000544 	.word	0x20000544
 8001ad8:	20000548 	.word	0x20000548
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	3ecccccd 	.word	0x3ecccccd
 8001ae8:	42c80000 	.word	0x42c80000
 8001aec:	2000054c 	.word	0x2000054c

08001af0 <safetycheck_reqTrq>:


////////////////////////safetycheck_reqTrq//////////////////////////////////
//To add additional check on the torque requested to the motor. Calculated based on the PID model of motor.
void safetycheck_reqTrq(float p_act, float v_act, float t_ff)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001afa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001afe:	ed87 1a01 	vstr	s2, [r7, #4]

	float trqreq = (p_in - p_act)*kp_in + (v_in - v_act)*kd_in + t_ff;
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <safetycheck_reqTrq+0xac>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <safetycheck_reqTrq+0xb0>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <safetycheck_reqTrq+0xb4>)
 8001b1c:	edd3 6a00 	vldr	s13, [r3]
 8001b20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <safetycheck_reqTrq+0xb8>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3e:	edc7 7a05 	vstr	s15, [r7, #20]

	// Incase the Trq to be calculated at the motor is too high, cancel the req by setting everything to zero
	if (trqreq >= TRQ_REQ_MAX || trqreq <= -TRQ_REQ_MAX)
 8001b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b46:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	da09      	bge.n	8001b68 <safetycheck_reqTrq+0x78>
 8001b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b58:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	d900      	bls.n	8001b68 <safetycheck_reqTrq+0x78>
		v_in = 0.0f;
		kp_in = 0.0f;
		kd_in = 0.0f;
		t_in = 0.0f;
	}
}
 8001b66:	e013      	b.n	8001b90 <safetycheck_reqTrq+0xa0>
		p_in = 0.0f;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <safetycheck_reqTrq+0xac>)
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
		v_in = 0.0f;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <safetycheck_reqTrq+0xb4>)
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
		kp_in = 0.0f;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <safetycheck_reqTrq+0xb0>)
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
		kd_in = 0.0f;
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <safetycheck_reqTrq+0xb8>)
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
		t_in = 0.0f;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <safetycheck_reqTrq+0xbc>)
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000544 	.word	0x20000544
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	20000548 	.word	0x20000548
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	2000054c 	.word	0x2000054c

08001bb0 <motor_mode>:
									 *  		M O T O R    M O D E S
									 ***************************************************/


//Start motor
void motor_mode(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	601a      	str	r2, [r3, #0]
	Data[0] = 0xFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	22ff      	movs	r2, #255	@ 0xff
 8001bc8:	701a      	strb	r2, [r3, #0]
	Data[1] = 0xFF;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	22ff      	movs	r2, #255	@ 0xff
 8001bd0:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xFF;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	22ff      	movs	r2, #255	@ 0xff
 8001bd8:	701a      	strb	r2, [r3, #0]
	Data[3] = 0xFF;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3303      	adds	r3, #3
 8001bde:	22ff      	movs	r2, #255	@ 0xff
 8001be0:	701a      	strb	r2, [r3, #0]
	Data[4] = 0xFF;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3304      	adds	r3, #4
 8001be6:	22ff      	movs	r2, #255	@ 0xff
 8001be8:	701a      	strb	r2, [r3, #0]
	Data[5] = 0xFF;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3305      	adds	r3, #5
 8001bee:	22ff      	movs	r2, #255	@ 0xff
 8001bf0:	701a      	strb	r2, [r3, #0]
	Data[6] = 0xFF;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	22ff      	movs	r2, #255	@ 0xff
 8001bf8:	701a      	strb	r2, [r3, #0]
	Data[7] = 0xFC;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3307      	adds	r3, #7
 8001bfe:	22fc      	movs	r2, #252	@ 0xfc
 8001c00:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <motor_mode+0x7c>)
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	490a      	ldr	r1, [pc, #40]	@ (8001c30 <motor_mode+0x80>)
 8001c08:	480a      	ldr	r0, [pc, #40]	@ (8001c34 <motor_mode+0x84>)
 8001c0a:	f001 fa9b 	bl	8003144 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <motor_mode+0x7c>)
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4907      	ldr	r1, [pc, #28]	@ (8001c30 <motor_mode+0x80>)
 8001c14:	4808      	ldr	r0, [pc, #32]	@ (8001c38 <motor_mode+0x88>)
 8001c16:	f001 fa95 	bl	8003144 <HAL_CAN_AddTxMessage>
	delay_us(300);
 8001c1a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c1e:	f000 f8b9 	bl	8001d94 <delay_us>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000120 	.word	0x20000120
 8001c30:	200000ec 	.word	0x200000ec
 8001c34:	2000009c 	.word	0x2000009c
 8001c38:	200000c4 	.word	0x200000c4

08001c3c <exit_mode>:

//stop motor
void exit_mode(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	601a      	str	r2, [r3, #0]
	Data[0] = 0xFF;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	22ff      	movs	r2, #255	@ 0xff
 8001c54:	701a      	strb	r2, [r3, #0]
	Data[1] = 0xFF;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	22ff      	movs	r2, #255	@ 0xff
 8001c5c:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xFF;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3302      	adds	r3, #2
 8001c62:	22ff      	movs	r2, #255	@ 0xff
 8001c64:	701a      	strb	r2, [r3, #0]
	Data[3] = 0xFF;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3303      	adds	r3, #3
 8001c6a:	22ff      	movs	r2, #255	@ 0xff
 8001c6c:	701a      	strb	r2, [r3, #0]
	Data[4] = 0xFF;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	22ff      	movs	r2, #255	@ 0xff
 8001c74:	701a      	strb	r2, [r3, #0]
	Data[5] = 0xFF;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3305      	adds	r3, #5
 8001c7a:	22ff      	movs	r2, #255	@ 0xff
 8001c7c:	701a      	strb	r2, [r3, #0]
	Data[6] = 0xFF;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3306      	adds	r3, #6
 8001c82:	22ff      	movs	r2, #255	@ 0xff
 8001c84:	701a      	strb	r2, [r3, #0]
	Data[7] = 0xFD;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3307      	adds	r3, #7
 8001c8a:	22fd      	movs	r2, #253	@ 0xfd
 8001c8c:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <exit_mode+0x7c>)
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	490a      	ldr	r1, [pc, #40]	@ (8001cbc <exit_mode+0x80>)
 8001c94:	480a      	ldr	r0, [pc, #40]	@ (8001cc0 <exit_mode+0x84>)
 8001c96:	f001 fa55 	bl	8003144 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <exit_mode+0x7c>)
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <exit_mode+0x80>)
 8001ca0:	4808      	ldr	r0, [pc, #32]	@ (8001cc4 <exit_mode+0x88>)
 8001ca2:	f001 fa4f 	bl	8003144 <HAL_CAN_AddTxMessage>
	delay_us(300);
 8001ca6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001caa:	f000 f873 	bl	8001d94 <delay_us>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000120 	.word	0x20000120
 8001cbc:	200000ec 	.word	0x200000ec
 8001cc0:	2000009c 	.word	0x2000009c
 8001cc4:	200000c4 	.word	0x200000c4

08001cc8 <float_to_uint>:
									 ***************************************************/


//math
int float_to_uint(float x, float x_min, float x_max, int bits)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cd6:	ed87 1a01 	vstr	s2, [r7, #4]
 8001cda:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8001cdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ce0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce8:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8001cf0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d12:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1e:	ee17 3a90 	vmov	r3, s15
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <uint_to_float>:

float uint_to_float(int x_int, float x_min, float x_max, int bits)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b087      	sub	sp, #28
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d3a:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8001d40:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d66:	2201      	movs	r2, #1
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d80:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <delay_us>:

//delay
void delay_us (uint16_t us)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <delay_us+0x30>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8001da6:	bf00      	nop
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <delay_us+0x30>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d8f8      	bhi.n	8001da8 <delay_us+0x14>
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	2000023c 	.word	0x2000023c

08001dc8 <xor_checksum>:

//spi checksum
uint32_t xor_checksum(uint32_t* data, int len)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    uint32_t t = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	e00a      	b.n	8001df2 <xor_checksum+0x2a>
        t = t ^ data[i];
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4053      	eors	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf0      	blt.n	8001ddc <xor_checksum+0x14>
    return t;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <encode_floats>:
/*
 * This funciton encodes the torque value into high 30 bits of a 32bit variable.
 * This is used to encode torque into flag for logging it in UP
 */
uint32_t encode_floats(float a, float b, float c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e12:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e16:	ed87 1a01 	vstr	s2, [r7, #4]
    uint32_t encoded = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]

    // Clamp each value to the range [-70, 70] using conditional statements
    if (a < -70.0f) a = -70.0f;
 8001e1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e22:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001fa8 <encode_floats+0x1a0>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	d501      	bpl.n	8001e34 <encode_floats+0x2c>
 8001e30:	4b5e      	ldr	r3, [pc, #376]	@ (8001fac <encode_floats+0x1a4>)
 8001e32:	60fb      	str	r3, [r7, #12]
    if (a > 70.0f) a = 70.0f;
 8001e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e38:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001fb0 <encode_floats+0x1a8>
 8001e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	dd01      	ble.n	8001e4a <encode_floats+0x42>
 8001e46:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb4 <encode_floats+0x1ac>)
 8001e48:	60fb      	str	r3, [r7, #12]

    if (b < -70.0f) b = -70.0f;
 8001e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4e:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001fa8 <encode_floats+0x1a0>
 8001e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	d501      	bpl.n	8001e60 <encode_floats+0x58>
 8001e5c:	4b53      	ldr	r3, [pc, #332]	@ (8001fac <encode_floats+0x1a4>)
 8001e5e:	60bb      	str	r3, [r7, #8]
    if (b > 70.0f) b = 70.0f;
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001fb0 <encode_floats+0x1a8>
 8001e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	dd01      	ble.n	8001e76 <encode_floats+0x6e>
 8001e72:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <encode_floats+0x1ac>)
 8001e74:	60bb      	str	r3, [r7, #8]

    if (c < -70.0f) c = -70.0f;
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001fa8 <encode_floats+0x1a0>
 8001e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	d501      	bpl.n	8001e8c <encode_floats+0x84>
 8001e88:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <encode_floats+0x1a4>)
 8001e8a:	607b      	str	r3, [r7, #4]
    if (c > 70.0f) c = 70.0f;
 8001e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e90:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001fb0 <encode_floats+0x1a8>
 8001e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9c:	dd01      	ble.n	8001ea2 <encode_floats+0x9a>
 8001e9e:	4b45      	ldr	r3, [pc, #276]	@ (8001fb4 <encode_floats+0x1ac>)
 8001ea0:	607b      	str	r3, [r7, #4]


    // Normalize and encode each float to 10 bits
    uint16_t a_enc = (uint16_t)round((a + 70) * (1023.0 / 140.0));
 8001ea2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ea6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001fb0 <encode_floats+0x1a8>
 8001eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eae:	ee17 0a90 	vmov	r0, s15
 8001eb2:	f7fe fc37 	bl	8000724 <__aeabi_f2d>
 8001eb6:	a33a      	add	r3, pc, #232	@ (adr r3, 8001fa0 <encode_floats+0x198>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe f9a4 	bl	8000208 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	ec43 2b17 	vmov	d7, r2, r3
 8001ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ecc:	eef0 0a67 	vmov.f32	s1, s15
 8001ed0:	f004 ff9c 	bl	8006e0c <round>
 8001ed4:	ec53 2b10 	vmov	r2, r3, d0
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fc7a 	bl	80007d4 <__aeabi_d2uiz>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	837b      	strh	r3, [r7, #26]
    uint16_t b_enc = (uint16_t)round((b + 70) * (1023.0 / 140.0));
 8001ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001fb0 <encode_floats+0x1a8>
 8001eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ef0:	ee17 0a90 	vmov	r0, s15
 8001ef4:	f7fe fc16 	bl	8000724 <__aeabi_f2d>
 8001ef8:	a329      	add	r3, pc, #164	@ (adr r3, 8001fa0 <encode_floats+0x198>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe f983 	bl	8000208 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	ec43 2b17 	vmov	d7, r2, r3
 8001f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0e:	eef0 0a67 	vmov.f32	s1, s15
 8001f12:	f004 ff7b 	bl	8006e0c <round>
 8001f16:	ec53 2b10 	vmov	r2, r3, d0
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fc59 	bl	80007d4 <__aeabi_d2uiz>
 8001f22:	4603      	mov	r3, r0
 8001f24:	833b      	strh	r3, [r7, #24]
    uint16_t c_enc = (uint16_t)round((c + 70) * (1023.0 / 140.0));
 8001f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001fb0 <encode_floats+0x1a8>
 8001f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f32:	ee17 0a90 	vmov	r0, s15
 8001f36:	f7fe fbf5 	bl	8000724 <__aeabi_f2d>
 8001f3a:	a319      	add	r3, pc, #100	@ (adr r3, 8001fa0 <encode_floats+0x198>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe f962 	bl	8000208 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	ec43 2b17 	vmov	d7, r2, r3
 8001f4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f50:	eef0 0a67 	vmov.f32	s1, s15
 8001f54:	f004 ff5a 	bl	8006e0c <round>
 8001f58:	ec53 2b10 	vmov	r2, r3, d0
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fc38 	bl	80007d4 <__aeabi_d2uiz>
 8001f64:	4603      	mov	r3, r0
 8001f66:	82fb      	strh	r3, [r7, #22]

    // Pack into 32 bits, leaving the first 2 bits unused
    encoded |= (a_enc & 0x3FF) << 2;        // First 10 bits start at bit 2
 8001f68:	8b7b      	ldrh	r3, [r7, #26]
 8001f6a:	009a      	lsls	r2, r3, #2
 8001f6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f70:	4013      	ands	r3, r2
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61fb      	str	r3, [r7, #28]
    encoded |= (b_enc & 0x3FF) << 12;       // Next 10 bits start at bit 12
 8001f78:	8b3b      	ldrh	r3, [r7, #24]
 8001f7a:	031a      	lsls	r2, r3, #12
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <encode_floats+0x1b0>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61fb      	str	r3, [r7, #28]
    encoded |= (c_enc & 0x3FF) << 22;       // Last 10 bits start at bit 22
 8001f86:	8afb      	ldrh	r3, [r7, #22]
 8001f88:	059b      	lsls	r3, r3, #22
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61fb      	str	r3, [r7, #28]

    return encoded;
 8001f90:	69fb      	ldr	r3, [r7, #28]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	a83a83a8 	.word	0xa83a83a8
 8001fa4:	401d3a83 	.word	0x401d3a83
 8001fa8:	c28c0000 	.word	0xc28c0000
 8001fac:	c28c0000 	.word	0xc28c0000
 8001fb0:	428c0000 	.word	0x428c0000
 8001fb4:	428c0000 	.word	0x428c0000
 8001fb8:	003ff000 	.word	0x003ff000

08001fbc <_write>:


//Printfunction
int _write(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e009      	b.n	8001fe2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fd94 	bl	8000b04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbf1      	blt.n	8001fce <_write+0x12>
	}
	return len;
 8001fea:	687b      	ldr	r3, [r7, #4]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b094      	sub	sp, #80	@ 0x50
 8001ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	2234      	movs	r2, #52	@ 0x34
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fbf8 	bl	80067f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002008:	f107 0308 	add.w	r3, r7, #8
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	4b2c      	ldr	r3, [pc, #176]	@ (80020d0 <SystemClock_Config+0xdc>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	4a2b      	ldr	r2, [pc, #172]	@ (80020d0 <SystemClock_Config+0xdc>)
 8002022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002026:	6413      	str	r3, [r2, #64]	@ 0x40
 8002028:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <SystemClock_Config+0xdc>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002034:	2300      	movs	r3, #0
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <SystemClock_Config+0xe0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a25      	ldr	r2, [pc, #148]	@ (80020d4 <SystemClock_Config+0xe0>)
 800203e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <SystemClock_Config+0xe0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002050:	2301      	movs	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002058:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800205a:	2302      	movs	r3, #2
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800205e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002062:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002064:	2304      	movs	r3, #4
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002068:	23b4      	movs	r3, #180	@ 0xb4
 800206a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800206c:	2302      	movs	r3, #2
 800206e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002070:	2302      	movs	r3, #2
 8002072:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002074:	2302      	movs	r3, #2
 8002076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4618      	mov	r0, r3
 800207e:	f002 ff8b 	bl	8004f98 <HAL_RCC_OscConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002088:	f000 fa6c 	bl	8002564 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800208c:	f002 fc1e 	bl	80048cc <HAL_PWREx_EnableOverDrive>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002096:	f000 fa65 	bl	8002564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800209a:	230f      	movs	r3, #15
 800209c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800209e:	2302      	movs	r3, #2
 80020a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	2105      	movs	r1, #5
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fc57 	bl	800496c <HAL_RCC_ClockConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80020c4:	f000 fa4e 	bl	8002564 <Error_Handler>
  }
}
 80020c8:	bf00      	nop
 80020ca:	3750      	adds	r7, #80	@ 0x50
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000

080020d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <MX_CAN1_Init+0xa0>)
 80020e0:	4a26      	ldr	r2, [pc, #152]	@ (800217c <MX_CAN1_Init+0xa4>)
 80020e2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <MX_CAN1_Init+0xa0>)
 80020e6:	2209      	movs	r2, #9
 80020e8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020ea:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <MX_CAN1_Init+0xa0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020f0:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <MX_CAN1_Init+0xa0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <MX_CAN1_Init+0xa0>)
 80020f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <MX_CAN1_Init+0xa0>)
 8002100:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002104:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <MX_CAN1_Init+0xa0>)
 8002108:	2200      	movs	r2, #0
 800210a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800210c:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <MX_CAN1_Init+0xa0>)
 800210e:	2200      	movs	r2, #0
 8002110:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <MX_CAN1_Init+0xa0>)
 8002114:	2200      	movs	r2, #0
 8002116:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <MX_CAN1_Init+0xa0>)
 800211a:	2200      	movs	r2, #0
 800211c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <MX_CAN1_Init+0xa0>)
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002124:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <MX_CAN1_Init+0xa0>)
 8002126:	2200      	movs	r2, #0
 8002128:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800212a:	4813      	ldr	r0, [pc, #76]	@ (8002178 <MX_CAN1_Init+0xa0>)
 800212c:	f000 fdea 	bl	8002d04 <HAL_CAN_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002136:	f000 fa15 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800213a:	2301      	movs	r3, #1
 800213c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones 18
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0xFFFF;
 800214e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002152:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0xFFFC;
 8002154:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002158:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can) 20
 8002162:	230e      	movs	r3, #14
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002166:	463b      	mov	r3, r7
 8002168:	4619      	mov	r1, r3
 800216a:	4803      	ldr	r0, [pc, #12]	@ (8002178 <MX_CAN1_Init+0xa0>)
 800216c:	f000 fec6 	bl	8002efc <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	@ 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000009c 	.word	0x2000009c
 800217c:	40006400 	.word	0x40006400

08002180 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	@ 0x28
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002186:	4b26      	ldr	r3, [pc, #152]	@ (8002220 <MX_CAN2_Init+0xa0>)
 8002188:	4a26      	ldr	r2, [pc, #152]	@ (8002224 <MX_CAN2_Init+0xa4>)
 800218a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 800218c:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <MX_CAN2_Init+0xa0>)
 800218e:	2209      	movs	r2, #9
 8002190:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <MX_CAN2_Init+0xa0>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002198:	4b21      	ldr	r3, [pc, #132]	@ (8002220 <MX_CAN2_Init+0xa0>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800219e:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021a4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021ac:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80021c0:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80021c6:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80021d2:	4813      	ldr	r0, [pc, #76]	@ (8002220 <MX_CAN2_Init+0xa0>)
 80021d4:	f000 fd96 	bl	8002d04 <HAL_CAN_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80021de:	f000 f9c1 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig2;

  canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	623b      	str	r3, [r7, #32]
  canfilterconfig2.FilterBank = 15;  // which filter bank to use from the assigned ones
 80021e6:	230f      	movs	r3, #15
 80021e8:	617b      	str	r3, [r7, #20]
  canfilterconfig2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	613b      	str	r3, [r7, #16]
  canfilterconfig2.FilterIdHigh = 0x0000;
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
  canfilterconfig2.FilterIdLow = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
  canfilterconfig2.FilterMaskIdHigh = 0xFFFF;
 80021f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021fa:	60bb      	str	r3, [r7, #8]
  canfilterconfig2.FilterMaskIdLow = 0xFFFC;
 80021fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002200:	60fb      	str	r3, [r7, #12]
  canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8002206:	2301      	movs	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
  canfilterconfig2.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 800220a:	230e      	movs	r3, #14
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2);
 800220e:	463b      	mov	r3, r7
 8002210:	4619      	mov	r1, r3
 8002212:	4803      	ldr	r0, [pc, #12]	@ (8002220 <MX_CAN2_Init+0xa0>)
 8002214:	f000 fe72 	bl	8002efc <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200000c4 	.word	0x200000c4
 8002224:	40006800 	.word	0x40006800

08002228 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <MX_SPI1_Init+0x60>)
 800222e:	4a17      	ldr	r2, [pc, #92]	@ (800228c <MX_SPI1_Init+0x64>)
 8002230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <MX_SPI1_Init+0x60>)
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <MX_SPI1_Init+0x60>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <MX_SPI1_Init+0x60>)
 8002240:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <MX_SPI1_Init+0x60>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800224c:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <MX_SPI1_Init+0x60>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002252:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <MX_SPI1_Init+0x60>)
 8002254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002258:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <MX_SPI1_Init+0x60>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <MX_SPI1_Init+0x60>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <MX_SPI1_Init+0x60>)
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <MX_SPI1_Init+0x60>)
 800226e:	220a      	movs	r2, #10
 8002270:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	@ (8002288 <MX_SPI1_Init+0x60>)
 8002274:	f003 f92e 	bl	80054d4 <HAL_SPI_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 800227e:	f000 f971 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000124 	.word	0x20000124
 800228c:	40013000 	.word	0x40013000

08002290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022ae:	4a1f      	ldr	r2, [pc, #124]	@ (800232c <MX_TIM1_Init+0x9c>)
 80022b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 80022b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022b4:	22b4      	movs	r2, #180	@ 0xb4
 80022b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80022be:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022c0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80022c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c6:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022d8:	4813      	ldr	r0, [pc, #76]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022da:	f003 fd5f 	bl	8005d9c <HAL_TIM_Base_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022e4:	f000 f93e 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	4619      	mov	r1, r3
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <MX_TIM1_Init+0x98>)
 80022f6:	f003 fe09 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002300:	f000 f930 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	@ (8002328 <MX_TIM1_Init+0x98>)
 8002312:	f003 fffd 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800231c:	f000 f922 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000023c 	.word	0x2000023c
 800232c:	40010000 	.word	0x40010000

08002330 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002344:	463b      	mov	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <MX_TIM8_Init+0x98>)
 800234e:	4a1f      	ldr	r2, [pc, #124]	@ (80023cc <MX_TIM8_Init+0x9c>)
 8002350:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180;
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <MX_TIM8_Init+0x98>)
 8002354:	22b4      	movs	r2, #180	@ 0xb4
 8002356:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <MX_TIM8_Init+0x98>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800235e:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <MX_TIM8_Init+0x98>)
 8002360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002364:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <MX_TIM8_Init+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <MX_TIM8_Init+0x98>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <MX_TIM8_Init+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002378:	4813      	ldr	r0, [pc, #76]	@ (80023c8 <MX_TIM8_Init+0x98>)
 800237a:	f003 fd0f 	bl	8005d9c <HAL_TIM_Base_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002384:	f000 f8ee 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4619      	mov	r1, r3
 8002394:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <MX_TIM8_Init+0x98>)
 8002396:	f003 fdb9 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80023a0:	f000 f8e0 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <MX_TIM8_Init+0x98>)
 80023b2:	f003 ffad 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80023bc:	f000 f8d2 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000284 	.word	0x20000284
 80023cc:	40010400 	.word	0x40010400

080023d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <MX_DMA_Init+0x4c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a0f      	ldr	r2, [pc, #60]	@ (800241c <MX_DMA_Init+0x4c>)
 80023e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <MX_DMA_Init+0x4c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2038      	movs	r0, #56	@ 0x38
 80023f8:	f001 fbdb 	bl	8003bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023fc:	2038      	movs	r0, #56	@ 0x38
 80023fe:	f001 fbf4 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	203b      	movs	r0, #59	@ 0x3b
 8002408:	f001 fbd3 	bl	8003bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800240c:	203b      	movs	r0, #59	@ 0x3b
 800240e:	f001 fbec 	bl	8003bea <HAL_NVIC_EnableIRQ>

}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	4b46      	ldr	r3, [pc, #280]	@ (8002554 <MX_GPIO_Init+0x134>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a45      	ldr	r2, [pc, #276]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b43      	ldr	r3, [pc, #268]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	4b3f      	ldr	r3, [pc, #252]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4a3e      	ldr	r2, [pc, #248]	@ (8002554 <MX_GPIO_Init+0x134>)
 800245c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002460:	6313      	str	r3, [r2, #48]	@ 0x30
 8002462:	4b3c      	ldr	r3, [pc, #240]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a37      	ldr	r2, [pc, #220]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b35      	ldr	r3, [pc, #212]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	4b31      	ldr	r3, [pc, #196]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a30      	ldr	r2, [pc, #192]	@ (8002554 <MX_GPIO_Init+0x134>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b2e      	ldr	r3, [pc, #184]	@ (8002554 <MX_GPIO_Init+0x134>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80024ac:	482a      	ldr	r0, [pc, #168]	@ (8002558 <MX_GPIO_Init+0x138>)
 80024ae:	f002 f9cf 	bl	8004850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	4824      	ldr	r0, [pc, #144]	@ (800255c <MX_GPIO_Init+0x13c>)
 80024ca:	f001 ff21 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024ce:	2303      	movs	r3, #3
 80024d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	481d      	ldr	r0, [pc, #116]	@ (8002558 <MX_GPIO_Init+0x138>)
 80024e2:	f001 ff15 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80024ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4816      	ldr	r0, [pc, #88]	@ (8002558 <MX_GPIO_Init+0x138>)
 8002500:	f001 ff06 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002504:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800250e:	2302      	movs	r3, #2
 8002510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4810      	ldr	r0, [pc, #64]	@ (800255c <MX_GPIO_Init+0x13c>)
 800251a:	f001 fef9 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800251e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002524:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	480a      	ldr	r0, [pc, #40]	@ (8002560 <MX_GPIO_Init+0x140>)
 8002536:	f001 feeb 	bl	8004310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2028      	movs	r0, #40	@ 0x28
 8002540:	f001 fb37 	bl	8003bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002544:	2028      	movs	r0, #40	@ 0x28
 8002546:	f001 fb50 	bl	8003bea <HAL_NVIC_EnableIRQ>

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	@ 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020000 	.word	0x40020000

08002564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002568:	b672      	cpsid	i
}
 800256a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <Error_Handler+0x8>

08002570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	4a0f      	ldr	r2, [pc, #60]	@ (80025bc <HAL_MspInit+0x4c>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002584:	6453      	str	r3, [r2, #68]	@ 0x44
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_MspInit+0x4c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_MspInit+0x4c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	4a08      	ldr	r2, [pc, #32]	@ (80025bc <HAL_MspInit+0x4c>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_MspInit+0x4c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800

080025c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	@ 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002718 <HAL_CAN_MspInit+0x158>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d13e      	bne.n	8002660 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025e2:	4b4e      	ldr	r3, [pc, #312]	@ (800271c <HAL_CAN_MspInit+0x15c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a4c      	ldr	r2, [pc, #304]	@ (800271c <HAL_CAN_MspInit+0x15c>)
 80025ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025ec:	4b4b      	ldr	r3, [pc, #300]	@ (800271c <HAL_CAN_MspInit+0x15c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10d      	bne.n	8002610 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	4b49      	ldr	r3, [pc, #292]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4a48      	ldr	r2, [pc, #288]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 80025fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002602:	6413      	str	r3, [r2, #64]	@ 0x40
 8002604:	4b46      	ldr	r3, [pc, #280]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	4b42      	ldr	r3, [pc, #264]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	4a41      	ldr	r2, [pc, #260]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002620:	4b3f      	ldr	r3, [pc, #252]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800262c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800263e:	2309      	movs	r3, #9
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	4836      	ldr	r0, [pc, #216]	@ (8002724 <HAL_CAN_MspInit+0x164>)
 800264a:	f001 fe61 	bl	8004310 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2014      	movs	r0, #20
 8002654:	f001 faad 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002658:	2014      	movs	r0, #20
 800265a:	f001 fac6 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800265e:	e057      	b.n	8002710 <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a30      	ldr	r2, [pc, #192]	@ (8002728 <HAL_CAN_MspInit+0x168>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d152      	bne.n	8002710 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 8002674:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002686:	4b25      	ldr	r3, [pc, #148]	@ (800271c <HAL_CAN_MspInit+0x15c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	4a23      	ldr	r2, [pc, #140]	@ (800271c <HAL_CAN_MspInit+0x15c>)
 800268e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002690:	4b22      	ldr	r3, [pc, #136]	@ (800271c <HAL_CAN_MspInit+0x15c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10d      	bne.n	80026b4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 80026a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	4a18      	ldr	r2, [pc, #96]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c4:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_CAN_MspInit+0x160>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026d0:	2360      	movs	r3, #96	@ 0x60
 80026d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80026e0:	2309      	movs	r3, #9
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	4619      	mov	r1, r3
 80026ea:	4810      	ldr	r0, [pc, #64]	@ (800272c <HAL_CAN_MspInit+0x16c>)
 80026ec:	f001 fe10 	bl	8004310 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2040      	movs	r0, #64	@ 0x40
 80026f6:	f001 fa5c 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80026fa:	2040      	movs	r0, #64	@ 0x40
 80026fc:	f001 fa75 	bl	8003bea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2041      	movs	r0, #65	@ 0x41
 8002706:	f001 fa54 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800270a:	2041      	movs	r0, #65	@ 0x41
 800270c:	f001 fa6d 	bl	8003bea <HAL_NVIC_EnableIRQ>
}
 8002710:	bf00      	nop
 8002712:	3730      	adds	r7, #48	@ 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40006400 	.word	0x40006400
 800271c:	20000568 	.word	0x20000568
 8002720:	40023800 	.word	0x40023800
 8002724:	40020000 	.word	0x40020000
 8002728:	40006800 	.word	0x40006800
 800272c:	40020400 	.word	0x40020400

08002730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a5a      	ldr	r2, [pc, #360]	@ (80028b8 <HAL_SPI_MspInit+0x188>)
 800274e:	4293      	cmp	r3, r2
 8002750:	f040 80ae 	bne.w	80028b0 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	4b58      	ldr	r3, [pc, #352]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	4a57      	ldr	r2, [pc, #348]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 800275e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002762:	6453      	str	r3, [r2, #68]	@ 0x44
 8002764:	4b55      	ldr	r3, [pc, #340]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 8002766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	4a50      	ldr	r2, [pc, #320]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002780:	4b4e      	ldr	r3, [pc, #312]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	4a49      	ldr	r2, [pc, #292]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	6313      	str	r3, [r2, #48]	@ 0x30
 800279c:	4b47      	ldr	r3, [pc, #284]	@ (80028bc <HAL_SPI_MspInit+0x18c>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a8:	23c0      	movs	r3, #192	@ 0xc0
 80027aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027b8:	2305      	movs	r3, #5
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4619      	mov	r1, r3
 80027c2:	483f      	ldr	r0, [pc, #252]	@ (80028c0 <HAL_SPI_MspInit+0x190>)
 80027c4:	f001 fda4 	bl	8004310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027c8:	2308      	movs	r3, #8
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027d8:	2305      	movs	r3, #5
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4838      	ldr	r0, [pc, #224]	@ (80028c4 <HAL_SPI_MspInit+0x194>)
 80027e4:	f001 fd94 	bl	8004310 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80027e8:	4b37      	ldr	r3, [pc, #220]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 80027ea:	4a38      	ldr	r2, [pc, #224]	@ (80028cc <HAL_SPI_MspInit+0x19c>)
 80027ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 80027f0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80027f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f6:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fc:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 8002804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002808:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280a:	4b2f      	ldr	r3, [pc, #188]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002810:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002816:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800281c:	4b2a      	ldr	r3, [pc, #168]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002822:	4b29      	ldr	r3, [pc, #164]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002828:	4827      	ldr	r0, [pc, #156]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 800282a:	f001 fa07 	bl	8003c3c <HAL_DMA_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8002834:	f7ff fe96 	bl	8002564 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a23      	ldr	r2, [pc, #140]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 800283c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800283e:	4a22      	ldr	r2, [pc, #136]	@ (80028c8 <HAL_SPI_MspInit+0x198>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002844:	4b22      	ldr	r3, [pc, #136]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002846:	4a23      	ldr	r2, [pc, #140]	@ (80028d4 <HAL_SPI_MspInit+0x1a4>)
 8002848:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800284a:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 800284c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002850:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002852:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002854:	2240      	movs	r2, #64	@ 0x40
 8002856:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285e:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002864:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002866:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286c:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002872:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002878:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002884:	4812      	ldr	r0, [pc, #72]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002886:	f001 f9d9 	bl	8003c3c <HAL_DMA_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8002890:	f7ff fe68 	bl	8002564 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0e      	ldr	r2, [pc, #56]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 8002898:	649a      	str	r2, [r3, #72]	@ 0x48
 800289a:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <HAL_SPI_MspInit+0x1a0>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	2023      	movs	r0, #35	@ 0x23
 80028a6:	f001 f984 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028aa:	2023      	movs	r0, #35	@ 0x23
 80028ac:	f001 f99d 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	@ 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40013000 	.word	0x40013000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400
 80028c8:	2000017c 	.word	0x2000017c
 80028cc:	40026410 	.word	0x40026410
 80028d0:	200001dc 	.word	0x200001dc
 80028d4:	40026458 	.word	0x40026458

080028d8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a10      	ldr	r2, [pc, #64]	@ (8002928 <HAL_SPI_MspDeInit+0x50>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d11a      	bne.n	8002920 <HAL_SPI_MspDeInit+0x48>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80028ea:	4b10      	ldr	r3, [pc, #64]	@ (800292c <HAL_SPI_MspDeInit+0x54>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	4a0f      	ldr	r2, [pc, #60]	@ (800292c <HAL_SPI_MspDeInit+0x54>)
 80028f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028f4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 80028f6:	21c0      	movs	r1, #192	@ 0xc0
 80028f8:	480d      	ldr	r0, [pc, #52]	@ (8002930 <HAL_SPI_MspDeInit+0x58>)
 80028fa:	f001 fe9d 	bl	8004638 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 80028fe:	2108      	movs	r1, #8
 8002900:	480c      	ldr	r0, [pc, #48]	@ (8002934 <HAL_SPI_MspDeInit+0x5c>)
 8002902:	f001 fe99 	bl	8004638 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	4618      	mov	r0, r3
 800290c:	f001 fa44 	bl	8003d98 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002914:	4618      	mov	r0, r3
 8002916:	f001 fa3f 	bl	8003d98 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800291a:	2023      	movs	r0, #35	@ 0x23
 800291c:	f001 f973 	bl	8003c06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40013000 	.word	0x40013000
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400

08002938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a15      	ldr	r2, [pc, #84]	@ (800299c <HAL_TIM_Base_MspInit+0x64>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <HAL_TIM_Base_MspInit+0x68>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <HAL_TIM_Base_MspInit+0x68>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6453      	str	r3, [r2, #68]	@ 0x44
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_TIM_Base_MspInit+0x68>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002966:	e012      	b.n	800298e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <HAL_TIM_Base_MspInit+0x6c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10d      	bne.n	800298e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_TIM_Base_MspInit+0x68>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_TIM_Base_MspInit+0x68>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6453      	str	r3, [r2, #68]	@ 0x44
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <HAL_TIM_Base_MspInit+0x68>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40010400 	.word	0x40010400

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <NMI_Handler+0x4>

080029b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <MemManage_Handler+0x4>

080029c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <UsageFault_Handler+0x4>

080029d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fe:	f000 f961 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <CAN1_RX0_IRQHandler+0x10>)
 8002a0e:	f000 fdac 	bl	800356a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000009c 	.word	0x2000009c

08002a1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <SPI1_IRQHandler+0x10>)
 8002a22:	f002 fe9d 	bl	8005760 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000124 	.word	0x20000124

08002a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a38:	f001 ff24 	bl	8004884 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002a3c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002a40:	f001 ff20 	bl	8004884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <DMA2_Stream0_IRQHandler+0x10>)
 8002a4e:	f001 fa23 	bl	8003e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000017c 	.word	0x2000017c

08002a5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <DMA2_Stream3_IRQHandler+0x10>)
 8002a62:	f001 fa19 	bl	8003e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200001dc 	.word	0x200001dc

08002a70 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002a74:	4802      	ldr	r0, [pc, #8]	@ (8002a80 <CAN2_RX0_IRQHandler+0x10>)
 8002a76:	f000 fd78 	bl	800356a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200000c4 	.word	0x200000c4

08002a84 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002a88:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <CAN2_RX1_IRQHandler+0x10>)
 8002a8a:	f000 fd6e 	bl	800356a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200000c4 	.word	0x200000c4

08002a98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e00a      	b.n	8002ac0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aaa:	f3af 8000 	nop.w
 8002aae:	4601      	mov	r1, r0
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	60ba      	str	r2, [r7, #8]
 8002ab6:	b2ca      	uxtb	r2, r1
 8002ab8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dbf0      	blt.n	8002aaa <_read+0x12>
	}

return len;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
	return -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002afa:	605a      	str	r2, [r3, #4]
	return 0;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_isatty>:

int _isatty(int file)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
	return 1;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b44:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <_sbrk+0x5c>)
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <_sbrk+0x60>)
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <_sbrk+0x64>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <_sbrk+0x68>)
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b6c:	f003 fe92 	bl	8006894 <__errno>
 8002b70:	4603      	mov	r3, r0
 8002b72:	220c      	movs	r2, #12
 8002b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e009      	b.n	8002b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b82:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <_sbrk+0x64>)
 8002b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20020000 	.word	0x20020000
 8002b9c:	00000400 	.word	0x00000400
 8002ba0:	2000056c 	.word	0x2000056c
 8002ba4:	200006c0 	.word	0x200006c0

08002ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <SystemInit+0x20>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	4a05      	ldr	r2, [pc, #20]	@ (8002bc8 <SystemInit+0x20>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd0:	480d      	ldr	r0, [pc, #52]	@ (8002c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bd2:	490e      	ldr	r1, [pc, #56]	@ (8002c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd8:	e002      	b.n	8002be0 <LoopCopyDataInit>

08002bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bde:	3304      	adds	r3, #4

08002be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be4:	d3f9      	bcc.n	8002bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be6:	4a0b      	ldr	r2, [pc, #44]	@ (8002c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002be8:	4c0b      	ldr	r4, [pc, #44]	@ (8002c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bec:	e001      	b.n	8002bf2 <LoopFillZerobss>

08002bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf0:	3204      	adds	r2, #4

08002bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf4:	d3fb      	bcc.n	8002bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bf6:	f7ff ffd7 	bl	8002ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bfa:	f003 fe51 	bl	80068a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfe:	f7fd ffe1 	bl	8000bc4 <main>
  bx  lr    
 8002c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c0c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002c10:	08006ef8 	.word	0x08006ef8
  ldr r2, =_sbss
 8002c14:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002c18:	200006c0 	.word	0x200006c0

08002c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <ADC_IRQHandler>
	...

08002c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c24:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_Init+0x40>)
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <HAL_Init+0x40>)
 8002c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <HAL_Init+0x40>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f000 ffa7 	bl	8003b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f000 f808 	bl	8002c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff fc8c 	bl	8002570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_InitTick+0x54>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <HAL_InitTick+0x58>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 ffcd 	bl	8003c22 <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f000 ff87 	bl	8003bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	@ (8002cc0 <HAL_InitTick+0x5c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000014 	.word	0x20000014
 8002cbc:	2000001c 	.word	0x2000001c
 8002cc0:	20000018 	.word	0x20000018

08002cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_IncTick+0x20>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_IncTick+0x24>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <HAL_IncTick+0x24>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	2000001c 	.word	0x2000001c
 8002ce8:	20000570 	.word	0x20000570

08002cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	@ (8002d00 <HAL_GetTick+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000570 	.word	0x20000570

08002d04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0ed      	b.n	8002ef2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fc4c 	bl	80025c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d38:	f7ff ffd8 	bl	8002cec <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d3e:	e012      	b.n	8002d66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d40:	f7ff ffd4 	bl	8002cec <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b0a      	cmp	r3, #10
 8002d4c:	d90b      	bls.n	8002d66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0c5      	b.n	8002ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0e5      	beq.n	8002d40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0202 	bic.w	r2, r2, #2
 8002d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d84:	f7ff ffb2 	bl	8002cec <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d8a:	e012      	b.n	8002db2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d8c:	f7ff ffae 	bl	8002cec <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b0a      	cmp	r3, #10
 8002d98:	d90b      	bls.n	8002db2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2205      	movs	r2, #5
 8002daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e09f      	b.n	8002ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e5      	bne.n	8002d8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7e1b      	ldrb	r3, [r3, #24]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d108      	bne.n	8002dda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e007      	b.n	8002dea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7e5b      	ldrb	r3, [r3, #25]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d108      	bne.n	8002e04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e007      	b.n	8002e14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7e9b      	ldrb	r3, [r3, #26]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d108      	bne.n	8002e2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0220 	orr.w	r2, r2, #32
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e007      	b.n	8002e3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0220 	bic.w	r2, r2, #32
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7edb      	ldrb	r3, [r3, #27]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d108      	bne.n	8002e58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0210 	bic.w	r2, r2, #16
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e007      	b.n	8002e68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0210 	orr.w	r2, r2, #16
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7f1b      	ldrb	r3, [r3, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0208 	orr.w	r2, r2, #8
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e007      	b.n	8002e92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0208 	bic.w	r2, r2, #8
 8002e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7f5b      	ldrb	r3, [r3, #29]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0204 	orr.w	r2, r2, #4
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e007      	b.n	8002ebc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0204 	bic.w	r2, r2, #4
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	ea42 0103 	orr.w	r1, r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d003      	beq.n	8002f22 <HAL_CAN_ConfigFilter+0x26>
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	f040 80be 	bne.w	800309e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002f22:	4b65      	ldr	r3, [pc, #404]	@ (80030b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002f24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f3c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	431a      	orrs	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2201      	movs	r2, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	401a      	ands	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d123      	bne.n	8002fcc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002fa6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3248      	adds	r2, #72	@ 0x48
 8002fac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fc2:	6979      	ldr	r1, [r7, #20]
 8002fc4:	3348      	adds	r3, #72	@ 0x48
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d122      	bne.n	800301a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ff4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3248      	adds	r2, #72	@ 0x48
 8002ffa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800300e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003010:	6979      	ldr	r1, [r7, #20]
 8003012:	3348      	adds	r3, #72	@ 0x48
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43db      	mvns	r3, r3
 800302c:	401a      	ands	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003034:	e007      	b.n	8003046 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	431a      	orrs	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003060:	e007      	b.n	8003072 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	431a      	orrs	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d107      	bne.n	800308a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	431a      	orrs	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003090:	f023 0201 	bic.w	r2, r3, #1
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e006      	b.n	80030ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40006400 	.word	0x40006400

080030bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d12e      	bne.n	800312e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030e8:	f7ff fe00 	bl	8002cec <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030ee:	e012      	b.n	8003116 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f0:	f7ff fdfc 	bl	8002cec <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b0a      	cmp	r3, #10
 80030fc:	d90b      	bls.n	8003116 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2205      	movs	r2, #5
 800310e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e012      	b.n	800313c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e5      	bne.n	80030f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e006      	b.n	800313c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003158:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003162:	7ffb      	ldrb	r3, [r7, #31]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d003      	beq.n	8003170 <HAL_CAN_AddTxMessage+0x2c>
 8003168:	7ffb      	ldrb	r3, [r7, #31]
 800316a:	2b02      	cmp	r3, #2
 800316c:	f040 80b8 	bne.w	80032e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80a0 	beq.w	80032d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	0e1b      	lsrs	r3, r3, #24
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d907      	bls.n	80031b0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e09e      	b.n	80032ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80031b0:	2201      	movs	r2, #1
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	409a      	lsls	r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031cc:	68f9      	ldr	r1, [r7, #12]
 80031ce:	6809      	ldr	r1, [r1, #0]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3318      	adds	r3, #24
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	440b      	add	r3, r1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e00f      	b.n	80031fe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80031f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3318      	adds	r3, #24
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	440b      	add	r3, r1
 80031fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3318      	adds	r3, #24
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	440b      	add	r3, r1
 800320e:	3304      	adds	r3, #4
 8003210:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	7d1b      	ldrb	r3, [r3, #20]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d111      	bne.n	800323e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3318      	adds	r3, #24
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6811      	ldr	r1, [r2, #0]
 800322e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3318      	adds	r3, #24
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	440b      	add	r3, r1
 800323a:	3304      	adds	r3, #4
 800323c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3307      	adds	r3, #7
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	061a      	lsls	r2, r3, #24
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3306      	adds	r3, #6
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3305      	adds	r3, #5
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	4313      	orrs	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	3204      	adds	r2, #4
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	4610      	mov	r0, r2
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6811      	ldr	r1, [r2, #0]
 8003266:	ea43 0200 	orr.w	r2, r3, r0
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	440b      	add	r3, r1
 8003270:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003274:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3303      	adds	r3, #3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	061a      	lsls	r2, r3, #24
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3302      	adds	r3, #2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	4313      	orrs	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	4610      	mov	r0, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	6811      	ldr	r1, [r2, #0]
 800329c:	ea43 0200 	orr.w	r2, r3, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80032aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3318      	adds	r3, #24
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	4413      	add	r3, r2
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	6811      	ldr	r1, [r2, #0]
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3318      	adds	r3, #24
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	440b      	add	r3, r1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e00e      	b.n	80032ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e006      	b.n	80032ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d003      	beq.n	800331e <HAL_CAN_GetRxMessage+0x24>
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b02      	cmp	r3, #2
 800331a:	f040 80f3 	bne.w	8003504 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10e      	bne.n	8003342 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d116      	bne.n	8003360 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0e7      	b.n	8003512 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0d8      	b.n	8003512 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	331b      	adds	r3, #27
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0204 	and.w	r2, r3, #4
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	331b      	adds	r3, #27
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0d5b      	lsrs	r3, r3, #21
 800338e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	331b      	adds	r3, #27
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	4413      	add	r3, r2
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	08db      	lsrs	r3, r3, #3
 80033a8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	331b      	adds	r3, #27
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0202 	and.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	331b      	adds	r3, #27
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 020f 	and.w	r2, r3, #15
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	331b      	adds	r3, #27
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	331b      	adds	r3, #27
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	4413      	add	r3, r2
 8003418:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0a1a      	lsrs	r2, r3, #8
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0c1a      	lsrs	r2, r3, #16
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	3302      	adds	r3, #2
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	4413      	add	r3, r2
 8003462:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e1a      	lsrs	r2, r3, #24
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3303      	adds	r3, #3
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	3304      	adds	r3, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	4413      	add	r3, r2
 8003494:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0a1a      	lsrs	r2, r3, #8
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	3305      	adds	r3, #5
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0c1a      	lsrs	r2, r3, #16
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	3306      	adds	r3, #6
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	0e1a      	lsrs	r2, r3, #24
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	3307      	adds	r3, #7
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d108      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0220 	orr.w	r2, r2, #32
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	e007      	b.n	8003500 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0220 	orr.w	r2, r2, #32
 80034fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e006      	b.n	8003512 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d002      	beq.n	800353c <HAL_CAN_ActivateNotification+0x1e>
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d109      	bne.n	8003550 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6959      	ldr	r1, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e006      	b.n	800355e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b08a      	sub	sp, #40	@ 0x28
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d07c      	beq.n	80036aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d023      	beq.n	8003602 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2201      	movs	r2, #1
 80035c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f983 	bl	80038d8 <HAL_CAN_TxMailbox0CompleteCallback>
 80035d2:	e016      	b.n	8003602 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e6:	e00c      	b.n	8003602 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fa:	e002      	b.n	8003602 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f989 	bl	8003914 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d024      	beq.n	8003656 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003614:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f963 	bl	80038ec <HAL_CAN_TxMailbox1CompleteCallback>
 8003626:	e016      	b.n	8003656 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
 800363a:	e00c      	b.n	8003656 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
 800364e:	e002      	b.n	8003656 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f969 	bl	8003928 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d024      	beq.n	80036aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003668:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f943 	bl	8003900 <HAL_CAN_TxMailbox2CompleteCallback>
 800367a:	e016      	b.n	80036aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
 800368e:	e00c      	b.n	80036aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a2:	e002      	b.n	80036aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f949 	bl	800393c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00c      	beq.n	80036ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2208      	movs	r2, #8
 80036e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f930 	bl	8003950 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fd fa23 	bl	8000b54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2210      	movs	r2, #16
 8003730:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2208      	movs	r2, #8
 800374c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f908 	bl	8003964 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd fa0d 	bl	8000b8c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2210      	movs	r2, #16
 800378c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8f2 	bl	8003978 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2208      	movs	r2, #8
 80037ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8eb 	bl	800398c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d07b      	beq.n	80038b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d072      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003824:	2b00      	cmp	r3, #0
 8003826:	d043      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800382e:	2b00      	cmp	r3, #0
 8003830:	d03e      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003838:	2b60      	cmp	r3, #96	@ 0x60
 800383a:	d02b      	beq.n	8003894 <HAL_CAN_IRQHandler+0x32a>
 800383c:	2b60      	cmp	r3, #96	@ 0x60
 800383e:	d82e      	bhi.n	800389e <HAL_CAN_IRQHandler+0x334>
 8003840:	2b50      	cmp	r3, #80	@ 0x50
 8003842:	d022      	beq.n	800388a <HAL_CAN_IRQHandler+0x320>
 8003844:	2b50      	cmp	r3, #80	@ 0x50
 8003846:	d82a      	bhi.n	800389e <HAL_CAN_IRQHandler+0x334>
 8003848:	2b40      	cmp	r3, #64	@ 0x40
 800384a:	d019      	beq.n	8003880 <HAL_CAN_IRQHandler+0x316>
 800384c:	2b40      	cmp	r3, #64	@ 0x40
 800384e:	d826      	bhi.n	800389e <HAL_CAN_IRQHandler+0x334>
 8003850:	2b30      	cmp	r3, #48	@ 0x30
 8003852:	d010      	beq.n	8003876 <HAL_CAN_IRQHandler+0x30c>
 8003854:	2b30      	cmp	r3, #48	@ 0x30
 8003856:	d822      	bhi.n	800389e <HAL_CAN_IRQHandler+0x334>
 8003858:	2b10      	cmp	r3, #16
 800385a:	d002      	beq.n	8003862 <HAL_CAN_IRQHandler+0x2f8>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d005      	beq.n	800386c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003860:	e01d      	b.n	800389e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800386a:	e019      	b.n	80038a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	f043 0310 	orr.w	r3, r3, #16
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003874:	e014      	b.n	80038a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	f043 0320 	orr.w	r3, r3, #32
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800387e:	e00f      	b.n	80038a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003888:	e00a      	b.n	80038a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003892:	e005      	b.n	80038a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800389c:	e000      	b.n	80038a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800389e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80038ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2204      	movs	r2, #4
 80038b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f868 	bl	80039a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038d0:	bf00      	nop
 80038d2:	3728      	adds	r7, #40	@ 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <__NVIC_SetPriorityGrouping>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e6:	4a04      	ldr	r2, [pc, #16]	@ (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	60d3      	str	r3, [r2, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_GetPriorityGrouping>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_EnableIRQ>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	db0b      	blt.n	8003a42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4907      	ldr	r1, [pc, #28]	@ (8003a50 <__NVIC_EnableIRQ+0x38>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2001      	movs	r0, #1
 8003a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_DisableIRQ>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db12      	blt.n	8003a8c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	490a      	ldr	r1, [pc, #40]	@ (8003a98 <__NVIC_DisableIRQ+0x44>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2001      	movs	r0, #1
 8003a76:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7a:	3320      	adds	r3, #32
 8003a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a80:	f3bf 8f4f 	dsb	sy
}
 8003a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a86:	f3bf 8f6f 	isb	sy
}
 8003a8a:	bf00      	nop
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	@ (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	@ (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	@ 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	@ 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <SysTick_Config>:
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b68:	d301      	bcc.n	8003b6e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00f      	b.n	8003b8e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <SysTick_Config+0x40>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b76:	210f      	movs	r1, #15
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f7ff ff8e 	bl	8003a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <SysTick_Config+0x40>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b86:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <SysTick_Config+0x40>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff05 	bl	80039b4 <__NVIC_SetPriorityGrouping>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc4:	f7ff ff1a 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff ff8e 	bl	8003af0 <NVIC_EncodePriority>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff5d 	bl	8003a9c <__NVIC_SetPriority>
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff0d 	bl	8003a18 <__NVIC_EnableIRQ>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff1d 	bl	8003a54 <__NVIC_DisableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ff94 	bl	8003b58 <SysTick_Config>
 8003c30:	4603      	mov	r3, r0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff f850 	bl	8002cec <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e099      	b.n	8003d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c78:	e00f      	b.n	8003c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c7a:	f7ff f837 	bl	8002cec <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d908      	bls.n	8003c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2203      	movs	r2, #3
 8003c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e078      	b.n	8003d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e8      	bne.n	8003c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4b38      	ldr	r3, [pc, #224]	@ (8003d94 <HAL_DMA_Init+0x158>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d107      	bne.n	8003d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0307 	bic.w	r3, r3, #7
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d117      	bne.n	8003d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00e      	beq.n	8003d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fa69 	bl	8004218 <DMA_CheckFifoParam>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2240      	movs	r2, #64	@ 0x40
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e016      	b.n	8003d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa20 	bl	80041ac <DMA_CalcBaseAndBitshift>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d74:	223f      	movs	r2, #63	@ 0x3f
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	f010803f 	.word	0xf010803f

08003d98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e050      	b.n	8003e4c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d101      	bne.n	8003dba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
 8003db8:	e048      	b.n	8003e4c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2221      	movs	r2, #33	@ 0x21
 8003df8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9d6 	bl	80041ac <DMA_CalcBaseAndBitshift>
 8003e00:	4603      	mov	r3, r0
 8003e02:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	223f      	movs	r2, #63	@ 0x3f
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2280      	movs	r2, #128	@ 0x80
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e00c      	b.n	8003e8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2205      	movs	r2, #5
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ea4:	4b8e      	ldr	r3, [pc, #568]	@ (80040e0 <HAL_DMA_IRQHandler+0x248>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80040e4 <HAL_DMA_IRQHandler+0x24c>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0a9b      	lsrs	r3, r3, #10
 8003eb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01a      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0204 	bic.w	r2, r2, #4
 8003eea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d012      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f26:	2201      	movs	r2, #1
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	2204      	movs	r2, #4
 8003f40:	409a      	lsls	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d012      	beq.n	8003f70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f68:	f043 0204 	orr.w	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	2210      	movs	r2, #16
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d043      	beq.n	8004008 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d03c      	beq.n	8004008 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	2210      	movs	r2, #16
 8003f94:	409a      	lsls	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d018      	beq.n	8003fda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d024      	beq.n	8004008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
 8003fc6:	e01f      	b.n	8004008 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e016      	b.n	8004008 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0208 	bic.w	r2, r2, #8
 8003ff6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	2220      	movs	r2, #32
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 808f 	beq.w	8004138 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8087 	beq.w	8004138 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	2220      	movs	r2, #32
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b05      	cmp	r3, #5
 8004040:	d136      	bne.n	80040b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0216 	bic.w	r2, r2, #22
 8004050:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004060:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_DMA_IRQHandler+0x1da>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0208 	bic.w	r2, r2, #8
 8004080:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	223f      	movs	r2, #63	@ 0x3f
 8004088:	409a      	lsls	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d07e      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
        }
        return;
 80040ae:	e079      	b.n	80041a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01d      	beq.n	80040fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10d      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d031      	beq.n	8004138 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
 80040dc:	e02c      	b.n	8004138 <HAL_DMA_IRQHandler+0x2a0>
 80040de:	bf00      	nop
 80040e0:	20000014 	.word	0x20000014
 80040e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d023      	beq.n	8004138 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
 80040f8:	e01e      	b.n	8004138 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10f      	bne.n	8004128 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0210 	bic.w	r2, r2, #16
 8004116:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413c:	2b00      	cmp	r3, #0
 800413e:	d032      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d022      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2205      	movs	r2, #5
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	3301      	adds	r3, #1
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	d307      	bcc.n	8004180 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f2      	bne.n	8004164 <HAL_DMA_IRQHandler+0x2cc>
 800417e:	e000      	b.n	8004182 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004180:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
 80041a2:	e000      	b.n	80041a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80041a4:	bf00      	nop
    }
  }
}
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	3b10      	subs	r3, #16
 80041bc:	4a14      	ldr	r2, [pc, #80]	@ (8004210 <DMA_CalcBaseAndBitshift+0x64>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041c6:	4a13      	ldr	r2, [pc, #76]	@ (8004214 <DMA_CalcBaseAndBitshift+0x68>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d909      	bls.n	80041ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80041ec:	e007      	b.n	80041fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	aaaaaaab 	.word	0xaaaaaaab
 8004214:	08006ee0 	.word	0x08006ee0

08004218 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11f      	bne.n	8004272 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d856      	bhi.n	80042e6 <DMA_CheckFifoParam+0xce>
 8004238:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <DMA_CheckFifoParam+0x28>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004251 	.word	0x08004251
 8004244:	08004263 	.word	0x08004263
 8004248:	08004251 	.word	0x08004251
 800424c:	080042e7 	.word	0x080042e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d046      	beq.n	80042ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004260:	e043      	b.n	80042ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800426a:	d140      	bne.n	80042ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004270:	e03d      	b.n	80042ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427a:	d121      	bne.n	80042c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d837      	bhi.n	80042f2 <DMA_CheckFifoParam+0xda>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <DMA_CheckFifoParam+0x70>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	08004299 	.word	0x08004299
 800428c:	0800429f 	.word	0x0800429f
 8004290:	08004299 	.word	0x08004299
 8004294:	080042b1 	.word	0x080042b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      break;
 800429c:	e030      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d025      	beq.n	80042f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ae:	e022      	b.n	80042f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042b8:	d11f      	bne.n	80042fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042be:	e01c      	b.n	80042fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d903      	bls.n	80042ce <DMA_CheckFifoParam+0xb6>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d003      	beq.n	80042d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042cc:	e018      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
      break;
 80042d2:	e015      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e00b      	b.n	80042fe <DMA_CheckFifoParam+0xe6>
      break;
 80042e6:	bf00      	nop
 80042e8:	e00a      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e008      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e006      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e004      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e002      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      break;   
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <DMA_CheckFifoParam+0xe8>
      break;
 80042fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop

08004310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	@ 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	e165      	b.n	80045f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800432c:	2201      	movs	r2, #1
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	429a      	cmp	r2, r3
 8004346:	f040 8154 	bne.w	80045f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d005      	beq.n	8004362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435e:	2b02      	cmp	r3, #2
 8004360:	d130      	bne.n	80043c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	2203      	movs	r2, #3
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4313      	orrs	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004398:	2201      	movs	r2, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 0201 	and.w	r2, r3, #1
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d017      	beq.n	8004400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d123      	bne.n	8004454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	08da      	lsrs	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3208      	adds	r2, #8
 8004414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	220f      	movs	r2, #15
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	08da      	lsrs	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3208      	adds	r2, #8
 800444e:	69b9      	ldr	r1, [r7, #24]
 8004450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2203      	movs	r2, #3
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0203 	and.w	r2, r3, #3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80ae 	beq.w	80045f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b5d      	ldr	r3, [pc, #372]	@ (8004610 <HAL_GPIO_Init+0x300>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	4a5c      	ldr	r2, [pc, #368]	@ (8004610 <HAL_GPIO_Init+0x300>)
 80044a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004610 <HAL_GPIO_Init+0x300>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044b2:	4a58      	ldr	r2, [pc, #352]	@ (8004614 <HAL_GPIO_Init+0x304>)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	3302      	adds	r3, #2
 80044ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	220f      	movs	r2, #15
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4013      	ands	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004618 <HAL_GPIO_Init+0x308>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_Init+0x21a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4e      	ldr	r2, [pc, #312]	@ (800461c <HAL_GPIO_Init+0x30c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_Init+0x216>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004620 <HAL_GPIO_Init+0x310>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x212>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004624 <HAL_GPIO_Init+0x314>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x20e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004628 <HAL_GPIO_Init+0x318>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x20a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4a      	ldr	r2, [pc, #296]	@ (800462c <HAL_GPIO_Init+0x31c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x206>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a49      	ldr	r2, [pc, #292]	@ (8004630 <HAL_GPIO_Init+0x320>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x202>
 800450e:	2306      	movs	r3, #6
 8004510:	e00c      	b.n	800452c <HAL_GPIO_Init+0x21c>
 8004512:	2307      	movs	r3, #7
 8004514:	e00a      	b.n	800452c <HAL_GPIO_Init+0x21c>
 8004516:	2305      	movs	r3, #5
 8004518:	e008      	b.n	800452c <HAL_GPIO_Init+0x21c>
 800451a:	2304      	movs	r3, #4
 800451c:	e006      	b.n	800452c <HAL_GPIO_Init+0x21c>
 800451e:	2303      	movs	r3, #3
 8004520:	e004      	b.n	800452c <HAL_GPIO_Init+0x21c>
 8004522:	2302      	movs	r3, #2
 8004524:	e002      	b.n	800452c <HAL_GPIO_Init+0x21c>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_GPIO_Init+0x21c>
 800452a:	2300      	movs	r3, #0
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	f002 0203 	and.w	r2, r2, #3
 8004532:	0092      	lsls	r2, r2, #2
 8004534:	4093      	lsls	r3, r2
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800453c:	4935      	ldr	r1, [pc, #212]	@ (8004614 <HAL_GPIO_Init+0x304>)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	3302      	adds	r3, #2
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800454a:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <HAL_GPIO_Init+0x324>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800456e:	4a31      	ldr	r2, [pc, #196]	@ (8004634 <HAL_GPIO_Init+0x324>)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004574:	4b2f      	ldr	r3, [pc, #188]	@ (8004634 <HAL_GPIO_Init+0x324>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004598:	4a26      	ldr	r2, [pc, #152]	@ (8004634 <HAL_GPIO_Init+0x324>)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800459e:	4b25      	ldr	r3, [pc, #148]	@ (8004634 <HAL_GPIO_Init+0x324>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4013      	ands	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004634 <HAL_GPIO_Init+0x324>)
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004634 <HAL_GPIO_Init+0x324>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045ec:	4a11      	ldr	r2, [pc, #68]	@ (8004634 <HAL_GPIO_Init+0x324>)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	f67f ae96 	bls.w	800432c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	3724      	adds	r7, #36	@ 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	40013800 	.word	0x40013800
 8004618:	40020000 	.word	0x40020000
 800461c:	40020400 	.word	0x40020400
 8004620:	40020800 	.word	0x40020800
 8004624:	40020c00 	.word	0x40020c00
 8004628:	40021000 	.word	0x40021000
 800462c:	40021400 	.word	0x40021400
 8004630:	40021800 	.word	0x40021800
 8004634:	40013c00 	.word	0x40013c00

08004638 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e0c7      	b.n	80047e4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004654:	2201      	movs	r2, #1
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	f040 80b7 	bne.w	80047de <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004670:	4a62      	ldr	r2, [pc, #392]	@ (80047fc <HAL_GPIO_DeInit+0x1c4>)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	089b      	lsrs	r3, r3, #2
 8004676:	3302      	adds	r3, #2
 8004678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	220f      	movs	r2, #15
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	4013      	ands	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a5a      	ldr	r2, [pc, #360]	@ (8004800 <HAL_GPIO_DeInit+0x1c8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d025      	beq.n	80046e6 <HAL_GPIO_DeInit+0xae>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a59      	ldr	r2, [pc, #356]	@ (8004804 <HAL_GPIO_DeInit+0x1cc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01f      	beq.n	80046e2 <HAL_GPIO_DeInit+0xaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a58      	ldr	r2, [pc, #352]	@ (8004808 <HAL_GPIO_DeInit+0x1d0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d019      	beq.n	80046de <HAL_GPIO_DeInit+0xa6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a57      	ldr	r2, [pc, #348]	@ (800480c <HAL_GPIO_DeInit+0x1d4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_GPIO_DeInit+0xa2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a56      	ldr	r2, [pc, #344]	@ (8004810 <HAL_GPIO_DeInit+0x1d8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00d      	beq.n	80046d6 <HAL_GPIO_DeInit+0x9e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a55      	ldr	r2, [pc, #340]	@ (8004814 <HAL_GPIO_DeInit+0x1dc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <HAL_GPIO_DeInit+0x9a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a54      	ldr	r2, [pc, #336]	@ (8004818 <HAL_GPIO_DeInit+0x1e0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <HAL_GPIO_DeInit+0x96>
 80046ca:	2306      	movs	r3, #6
 80046cc:	e00c      	b.n	80046e8 <HAL_GPIO_DeInit+0xb0>
 80046ce:	2307      	movs	r3, #7
 80046d0:	e00a      	b.n	80046e8 <HAL_GPIO_DeInit+0xb0>
 80046d2:	2305      	movs	r3, #5
 80046d4:	e008      	b.n	80046e8 <HAL_GPIO_DeInit+0xb0>
 80046d6:	2304      	movs	r3, #4
 80046d8:	e006      	b.n	80046e8 <HAL_GPIO_DeInit+0xb0>
 80046da:	2303      	movs	r3, #3
 80046dc:	e004      	b.n	80046e8 <HAL_GPIO_DeInit+0xb0>
 80046de:	2302      	movs	r3, #2
 80046e0:	e002      	b.n	80046e8 <HAL_GPIO_DeInit+0xb0>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_GPIO_DeInit+0xb0>
 80046e6:	2300      	movs	r3, #0
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	f002 0203 	and.w	r2, r2, #3
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	4093      	lsls	r3, r2
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d132      	bne.n	800475e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046f8:	4b48      	ldr	r3, [pc, #288]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	43db      	mvns	r3, r3
 8004700:	4946      	ldr	r1, [pc, #280]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 8004702:	4013      	ands	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004706:	4b45      	ldr	r3, [pc, #276]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	43db      	mvns	r3, r3
 800470e:	4943      	ldr	r1, [pc, #268]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 8004710:	4013      	ands	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004714:	4b41      	ldr	r3, [pc, #260]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	43db      	mvns	r3, r3
 800471c:	493f      	ldr	r1, [pc, #252]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 800471e:	4013      	ands	r3, r2
 8004720:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004722:	4b3e      	ldr	r3, [pc, #248]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	43db      	mvns	r3, r3
 800472a:	493c      	ldr	r1, [pc, #240]	@ (800481c <HAL_GPIO_DeInit+0x1e4>)
 800472c:	4013      	ands	r3, r2
 800472e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	220f      	movs	r2, #15
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004740:	4a2e      	ldr	r2, [pc, #184]	@ (80047fc <HAL_GPIO_DeInit+0x1c4>)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	3302      	adds	r3, #2
 8004748:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	43da      	mvns	r2, r3
 8004750:	482a      	ldr	r0, [pc, #168]	@ (80047fc <HAL_GPIO_DeInit+0x1c4>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	089b      	lsrs	r3, r3, #2
 8004756:	400a      	ands	r2, r1
 8004758:	3302      	adds	r3, #2
 800475a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2103      	movs	r1, #3
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	401a      	ands	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	08da      	lsrs	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3208      	adds	r2, #8
 800477c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	08d2      	lsrs	r2, r2, #3
 8004794:	4019      	ands	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3208      	adds	r2, #8
 800479a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	2103      	movs	r1, #3
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	2101      	movs	r1, #1
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	2103      	movs	r1, #3
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	401a      	ands	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	3301      	adds	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	f67f af34 	bls.w	8004654 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40013800 	.word	0x40013800
 8004800:	40020000 	.word	0x40020000
 8004804:	40020400 	.word	0x40020400
 8004808:	40020800 	.word	0x40020800
 800480c:	40020c00 	.word	0x40020c00
 8004810:	40021000 	.word	0x40021000
 8004814:	40021400 	.word	0x40021400
 8004818:	40021800 	.word	0x40021800
 800481c:	40013c00 	.word	0x40013c00

08004820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	e001      	b.n	8004842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
 800485c:	4613      	mov	r3, r2
 800485e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004860:	787b      	ldrb	r3, [r7, #1]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800486c:	e003      	b.n	8004876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800486e:	887b      	ldrh	r3, [r7, #2]
 8004870:	041a      	lsls	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	619a      	str	r2, [r3, #24]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800488e:	4b08      	ldr	r3, [pc, #32]	@ (80048b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d006      	beq.n	80048a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800489a:	4a05      	ldr	r2, [pc, #20]	@ (80048b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f806 	bl	80048b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40013c00 	.word	0x40013c00

080048b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_PWREx_EnableOverDrive+0x90>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	4a1f      	ldr	r2, [pc, #124]	@ (800495c <HAL_PWREx_EnableOverDrive+0x90>)
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048e6:	4b1d      	ldr	r3, [pc, #116]	@ (800495c <HAL_PWREx_EnableOverDrive+0x90>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <HAL_PWREx_EnableOverDrive+0x94>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f8:	f7fe f9f8 	bl	8002cec <HAL_GetTick>
 80048fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048fe:	e009      	b.n	8004914 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004900:	f7fe f9f4 	bl	8002cec <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800490e:	d901      	bls.n	8004914 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e01f      	b.n	8004954 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004914:	4b13      	ldr	r3, [pc, #76]	@ (8004964 <HAL_PWREx_EnableOverDrive+0x98>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d1ee      	bne.n	8004900 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004922:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004928:	f7fe f9e0 	bl	8002cec <HAL_GetTick>
 800492c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800492e:	e009      	b.n	8004944 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004930:	f7fe f9dc 	bl	8002cec <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800493e:	d901      	bls.n	8004944 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e007      	b.n	8004954 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004944:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <HAL_PWREx_EnableOverDrive+0x98>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004950:	d1ee      	bne.n	8004930 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	420e0040 	.word	0x420e0040
 8004964:	40007000 	.word	0x40007000
 8004968:	420e0044 	.word	0x420e0044

0800496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0cc      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b68      	ldr	r3, [pc, #416]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d90c      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b63      	ldr	r3, [pc, #396]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0b8      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c0:	4b59      	ldr	r3, [pc, #356]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a58      	ldr	r2, [pc, #352]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d8:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a52      	ldr	r2, [pc, #328]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b50      	ldr	r3, [pc, #320]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	494d      	ldr	r1, [pc, #308]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d044      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b47      	ldr	r3, [pc, #284]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d119      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e067      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b37      	ldr	r3, [pc, #220]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4934      	ldr	r1, [pc, #208]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe f946 	bl	8002cec <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe f942 	bl	8002cec <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e04f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b25      	ldr	r3, [pc, #148]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d20c      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b22      	ldr	r3, [pc, #136]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e032      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4916      	ldr	r1, [pc, #88]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490e      	ldr	r1, [pc, #56]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004af2:	f000 f821 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	490a      	ldr	r1, [pc, #40]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	5ccb      	ldrb	r3, [r1, r3]
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	4a09      	ldr	r2, [pc, #36]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b0e:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe f8a6 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	08006ed0 	.word	0x08006ed0
 8004b30:	20000014 	.word	0x20000014
 8004b34:	20000018 	.word	0x20000018

08004b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b3c:	b0ae      	sub	sp, #184	@ 0xb8
 8004b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b5e:	4bcb      	ldr	r3, [pc, #812]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	f200 8206 	bhi.w	8004f78 <HAL_RCC_GetSysClockFreq+0x440>
 8004b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004ba9 	.word	0x08004ba9
 8004b78:	08004f79 	.word	0x08004f79
 8004b7c:	08004f79 	.word	0x08004f79
 8004b80:	08004f79 	.word	0x08004f79
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004f79 	.word	0x08004f79
 8004b8c:	08004f79 	.word	0x08004f79
 8004b90:	08004f79 	.word	0x08004f79
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004f79 	.word	0x08004f79
 8004b9c:	08004f79 	.word	0x08004f79
 8004ba0:	08004f79 	.word	0x08004f79
 8004ba4:	08004da9 	.word	0x08004da9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba8:	4bb9      	ldr	r3, [pc, #740]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x358>)
 8004baa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004bae:	e1e7      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb0:	4bb8      	ldr	r3, [pc, #736]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bb6:	e1e3      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb8:	4bb4      	ldr	r3, [pc, #720]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc4:	4bb1      	ldr	r3, [pc, #708]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d071      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd0:	4bae      	ldr	r3, [pc, #696]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	099b      	lsrs	r3, r3, #6
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bdc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	0159      	lsls	r1, r3, #5
 8004c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c08:	0150      	lsls	r0, r2, #5
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4621      	mov	r1, r4
 8004c10:	1a51      	subs	r1, r2, r1
 8004c12:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c14:	4629      	mov	r1, r5
 8004c16:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c28:	4649      	mov	r1, r9
 8004c2a:	018b      	lsls	r3, r1, #6
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c32:	4641      	mov	r1, r8
 8004c34:	018a      	lsls	r2, r1, #6
 8004c36:	4641      	mov	r1, r8
 8004c38:	1a51      	subs	r1, r2, r1
 8004c3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c50:	4649      	mov	r1, r9
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4641      	mov	r1, r8
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4622      	mov	r2, r4
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c6a:	462b      	mov	r3, r5
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	eb42 0303 	adc.w	r3, r2, r3
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c80:	4629      	mov	r1, r5
 8004c82:	024b      	lsls	r3, r1, #9
 8004c84:	4621      	mov	r1, r4
 8004c86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	024a      	lsls	r2, r1, #9
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ca0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004ca4:	f7fb fdb6 	bl	8000814 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4613      	mov	r3, r2
 8004cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cb2:	e067      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb4:	4b75      	ldr	r3, [pc, #468]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cc0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ccc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cce:	2300      	movs	r3, #0
 8004cd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	462b      	mov	r3, r5
 8004cda:	f04f 0000 	mov.w	r0, #0
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	0159      	lsls	r1, r3, #5
 8004ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce8:	0150      	lsls	r0, r2, #5
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4621      	mov	r1, r4
 8004cf0:	1a51      	subs	r1, r2, r1
 8004cf2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d08:	4649      	mov	r1, r9
 8004d0a:	018b      	lsls	r3, r1, #6
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d12:	4641      	mov	r1, r8
 8004d14:	018a      	lsls	r2, r1, #6
 8004d16:	4641      	mov	r1, r8
 8004d18:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d36:	4692      	mov	sl, r2
 8004d38:	469b      	mov	fp, r3
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	eb1a 0303 	adds.w	r3, sl, r3
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	462b      	mov	r3, r5
 8004d44:	eb4b 0303 	adc.w	r3, fp, r3
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d56:	4629      	mov	r1, r5
 8004d58:	028b      	lsls	r3, r1, #10
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d60:	4621      	mov	r1, r4
 8004d62:	028a      	lsls	r2, r1, #10
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d70:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d76:	f7fb fd4d 	bl	8000814 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4613      	mov	r3, r2
 8004d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d84:	4b41      	ldr	r3, [pc, #260]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004da6:	e0eb      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da8:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004db0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db4:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d06b      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc0:	4b32      	ldr	r3, [pc, #200]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x354>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	099b      	lsrs	r3, r3, #6
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004ddc:	4622      	mov	r2, r4
 8004dde:	462b      	mov	r3, r5
 8004de0:	f04f 0000 	mov.w	r0, #0
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	0159      	lsls	r1, r3, #5
 8004dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dee:	0150      	lsls	r0, r2, #5
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4621      	mov	r1, r4
 8004df6:	1a51      	subs	r1, r2, r1
 8004df8:	61b9      	str	r1, [r7, #24]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	eb63 0301 	sbc.w	r3, r3, r1
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e0e:	4659      	mov	r1, fp
 8004e10:	018b      	lsls	r3, r1, #6
 8004e12:	4651      	mov	r1, sl
 8004e14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e18:	4651      	mov	r1, sl
 8004e1a:	018a      	lsls	r2, r1, #6
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	ebb2 0801 	subs.w	r8, r2, r1
 8004e22:	4659      	mov	r1, fp
 8004e24:	eb63 0901 	sbc.w	r9, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3c:	4690      	mov	r8, r2
 8004e3e:	4699      	mov	r9, r3
 8004e40:	4623      	mov	r3, r4
 8004e42:	eb18 0303 	adds.w	r3, r8, r3
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	462b      	mov	r3, r5
 8004e4a:	eb49 0303 	adc.w	r3, r9, r3
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	024b      	lsls	r3, r1, #9
 8004e60:	4621      	mov	r1, r4
 8004e62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e66:	4621      	mov	r1, r4
 8004e68:	024a      	lsls	r2, r1, #9
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e72:	2200      	movs	r2, #0
 8004e74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e7c:	f7fb fcca 	bl	8000814 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e8a:	e065      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x420>
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e98:	4b3d      	ldr	r3, [pc, #244]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ea8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eaa:	2300      	movs	r3, #0
 8004eac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004eb2:	4642      	mov	r2, r8
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	f04f 0000 	mov.w	r0, #0
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	0159      	lsls	r1, r3, #5
 8004ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec4:	0150      	lsls	r0, r2, #5
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4641      	mov	r1, r8
 8004ecc:	1a51      	subs	r1, r2, r1
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	018b      	lsls	r3, r1, #6
 8004ee8:	4651      	mov	r1, sl
 8004eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eee:	4651      	mov	r1, sl
 8004ef0:	018a      	lsls	r2, r1, #6
 8004ef2:	4651      	mov	r1, sl
 8004ef4:	1a54      	subs	r4, r2, r1
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	eb63 0501 	sbc.w	r5, r3, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	00eb      	lsls	r3, r5, #3
 8004f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0a:	00e2      	lsls	r2, r4, #3
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	461d      	mov	r5, r3
 8004f10:	4643      	mov	r3, r8
 8004f12:	18e3      	adds	r3, r4, r3
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	464b      	mov	r3, r9
 8004f18:	eb45 0303 	adc.w	r3, r5, r3
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	028b      	lsls	r3, r1, #10
 8004f2e:	4621      	mov	r1, r4
 8004f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f34:	4621      	mov	r1, r4
 8004f36:	028a      	lsls	r2, r1, #10
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f40:	2200      	movs	r2, #0
 8004f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f4a:	f7fb fc63 	bl	8000814 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4613      	mov	r3, r2
 8004f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f58:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	0f1b      	lsrs	r3, r3, #28
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004f66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f76:	e003      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f78:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	37b8      	adds	r7, #184	@ 0xb8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	00f42400 	.word	0x00f42400

08004f98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e28d      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8083 	beq.w	80050be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fb8:	4b94      	ldr	r3, [pc, #592]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d019      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fc4:	4b91      	ldr	r3, [pc, #580]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d106      	bne.n	8004fde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fdc:	d00c      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fde:	4b8b      	ldr	r3, [pc, #556]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d112      	bne.n	8005010 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fea:	4b88      	ldr	r3, [pc, #544]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff6:	d10b      	bne.n	8005010 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	4b84      	ldr	r3, [pc, #528]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05b      	beq.n	80050bc <HAL_RCC_OscConfig+0x124>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d157      	bne.n	80050bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e25a      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005018:	d106      	bne.n	8005028 <HAL_RCC_OscConfig+0x90>
 800501a:	4b7c      	ldr	r3, [pc, #496]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a7b      	ldr	r2, [pc, #492]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e01d      	b.n	8005064 <HAL_RCC_OscConfig+0xcc>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0xb4>
 8005032:	4b76      	ldr	r3, [pc, #472]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a75      	ldr	r2, [pc, #468]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b73      	ldr	r3, [pc, #460]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a72      	ldr	r2, [pc, #456]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0xcc>
 800504c:	4b6f      	ldr	r3, [pc, #444]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a6e      	ldr	r2, [pc, #440]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	4b6c      	ldr	r3, [pc, #432]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a6b      	ldr	r2, [pc, #428]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 800505e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd fe3e 	bl	8002cec <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd fe3a 	bl	8002cec <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e21f      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b61      	ldr	r3, [pc, #388]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0xdc>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd fe2a 	bl	8002cec <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800509c:	f7fd fe26 	bl	8002cec <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	@ 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e20b      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ae:	4b57      	ldr	r3, [pc, #348]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x104>
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d06f      	beq.n	80051aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050ca:	4b50      	ldr	r3, [pc, #320]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d017      	beq.n	8005106 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050d6:	4b4d      	ldr	r3, [pc, #308]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d105      	bne.n	80050ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050e2:	4b4a      	ldr	r3, [pc, #296]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ee:	4b47      	ldr	r3, [pc, #284]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d11c      	bne.n	8005134 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fa:	4b44      	ldr	r3, [pc, #272]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d116      	bne.n	8005134 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005106:	4b41      	ldr	r3, [pc, #260]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_RCC_OscConfig+0x186>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d001      	beq.n	800511e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e1d3      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511e:	4b3b      	ldr	r3, [pc, #236]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4937      	ldr	r1, [pc, #220]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 800512e:	4313      	orrs	r3, r2
 8005130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	e03a      	b.n	80051aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513c:	4b34      	ldr	r3, [pc, #208]	@ (8005210 <HAL_RCC_OscConfig+0x278>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fd fdd3 	bl	8002cec <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514a:	f7fd fdcf 	bl	8002cec <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e1b4      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	4b2b      	ldr	r3, [pc, #172]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b28      	ldr	r3, [pc, #160]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4925      	ldr	r1, [pc, #148]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]
 800517c:	e015      	b.n	80051aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517e:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <HAL_RCC_OscConfig+0x278>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd fdb2 	bl	8002cec <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518c:	f7fd fdae 	bl	8002cec <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e193      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d036      	beq.n	8005224 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd fd92 	bl	8002cec <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051cc:	f7fd fd8e 	bl	8002cec <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e173      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCC_OscConfig+0x274>)
 80051e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x234>
 80051ea:	e01b      	b.n	8005224 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ec:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f2:	f7fd fd7b 	bl	8002cec <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f8:	e00e      	b.n	8005218 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fa:	f7fd fd77 	bl	8002cec <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d907      	bls.n	8005218 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e15c      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
 800520c:	40023800 	.word	0x40023800
 8005210:	42470000 	.word	0x42470000
 8005214:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005218:	4b8a      	ldr	r3, [pc, #552]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 800521a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ea      	bne.n	80051fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8097 	beq.w	8005360 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005236:	4b83      	ldr	r3, [pc, #524]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	4b7f      	ldr	r3, [pc, #508]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	4a7e      	ldr	r2, [pc, #504]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005250:	6413      	str	r3, [r2, #64]	@ 0x40
 8005252:	4b7c      	ldr	r3, [pc, #496]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005262:	4b79      	ldr	r3, [pc, #484]	@ (8005448 <HAL_RCC_OscConfig+0x4b0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d118      	bne.n	80052a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526e:	4b76      	ldr	r3, [pc, #472]	@ (8005448 <HAL_RCC_OscConfig+0x4b0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a75      	ldr	r2, [pc, #468]	@ (8005448 <HAL_RCC_OscConfig+0x4b0>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527a:	f7fd fd37 	bl	8002cec <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fd fd33 	bl	8002cec <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e118      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	4b6c      	ldr	r3, [pc, #432]	@ (8005448 <HAL_RCC_OscConfig+0x4b0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x31e>
 80052a8:	4b66      	ldr	r3, [pc, #408]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ac:	4a65      	ldr	r2, [pc, #404]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b4:	e01c      	b.n	80052f0 <HAL_RCC_OscConfig+0x358>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x340>
 80052be:	4b61      	ldr	r3, [pc, #388]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c2:	4a60      	ldr	r2, [pc, #384]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ca:	4b5e      	ldr	r3, [pc, #376]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d6:	e00b      	b.n	80052f0 <HAL_RCC_OscConfig+0x358>
 80052d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052dc:	4a59      	ldr	r2, [pc, #356]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e4:	4b57      	ldr	r3, [pc, #348]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	4a56      	ldr	r2, [pc, #344]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80052ea:	f023 0304 	bic.w	r3, r3, #4
 80052ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fd fcf8 	bl	8002cec <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	e00a      	b.n	8005316 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fd fcf4 	bl	8002cec <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e0d7      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	4b4b      	ldr	r3, [pc, #300]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ee      	beq.n	8005300 <HAL_RCC_OscConfig+0x368>
 8005322:	e014      	b.n	800534e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fd fce2 	bl	8002cec <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fd fcde 	bl	8002cec <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0c1      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005342:	4b40      	ldr	r3, [pc, #256]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ee      	bne.n	800532c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005354:	4b3b      	ldr	r3, [pc, #236]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	4a3a      	ldr	r2, [pc, #232]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 800535a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800535e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80ad 	beq.w	80054c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536a:	4b36      	ldr	r3, [pc, #216]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b08      	cmp	r3, #8
 8005374:	d060      	beq.n	8005438 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d145      	bne.n	800540a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537e:	4b33      	ldr	r3, [pc, #204]	@ (800544c <HAL_RCC_OscConfig+0x4b4>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd fcb2 	bl	8002cec <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538c:	f7fd fcae 	bl	8002cec <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e093      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	4b29      	ldr	r3, [pc, #164]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69da      	ldr	r2, [r3, #28]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	019b      	lsls	r3, r3, #6
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	3b01      	subs	r3, #1
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d4:	071b      	lsls	r3, r3, #28
 80053d6:	491b      	ldr	r1, [pc, #108]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053dc:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <HAL_RCC_OscConfig+0x4b4>)
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fd fc83 	bl	8002cec <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ea:	f7fd fc7f 	bl	8002cec <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e064      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fc:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x452>
 8005408:	e05c      	b.n	80054c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540a:	4b10      	ldr	r3, [pc, #64]	@ (800544c <HAL_RCC_OscConfig+0x4b4>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fd fc6c 	bl	8002cec <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005418:	f7fd fc68 	bl	8002cec <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e04d      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542a:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_RCC_OscConfig+0x4ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x480>
 8005436:	e045      	b.n	80054c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d107      	bne.n	8005450 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e040      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
 8005444:	40023800 	.word	0x40023800
 8005448:	40007000 	.word	0x40007000
 800544c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005450:	4b1f      	ldr	r3, [pc, #124]	@ (80054d0 <HAL_RCC_OscConfig+0x538>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d030      	beq.n	80054c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005468:	429a      	cmp	r2, r3
 800546a:	d129      	bne.n	80054c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d122      	bne.n	80054c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005488:	4293      	cmp	r3, r2
 800548a:	d119      	bne.n	80054c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	3b01      	subs	r3, #1
 800549a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d10f      	bne.n	80054c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800

080054d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e07b      	b.n	80055de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d108      	bne.n	8005500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054f6:	d009      	beq.n	800550c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
 80054fe:	e005      	b.n	800550c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fd f902 	bl	8002730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005590:	ea42 0103 	orr.w	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	f003 0104 	and.w	r1, r3, #4
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	f003 0210 	and.w	r2, r3, #16
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e01a      	b.n	800562e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800560e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fd f961 	bl	80028d8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_SPI_TransmitReceive_IT+0x20>
 8005654:	2302      	movs	r3, #2
 8005656:	e075      	b.n	8005744 <HAL_SPI_TransmitReceive_IT+0x10c>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005666:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800566e:	7dbb      	ldrb	r3, [r7, #22]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d00d      	beq.n	8005690 <HAL_SPI_TransmitReceive_IT+0x58>
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800567a:	d106      	bne.n	800568a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <HAL_SPI_TransmitReceive_IT+0x52>
 8005684:	7dbb      	ldrb	r3, [r7, #22]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d002      	beq.n	8005690 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800568a:	2302      	movs	r3, #2
 800568c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800568e:	e054      	b.n	800573a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_SPI_TransmitReceive_IT+0x6a>
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d102      	bne.n	80056a8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056a6:	e048      	b.n	800573a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d003      	beq.n	80056bc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2205      	movs	r2, #5
 80056b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	887a      	ldrh	r2, [r7, #2]
 80056cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	887a      	ldrh	r2, [r7, #2]
 80056d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	887a      	ldrh	r2, [r7, #2]
 80056de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d006      	beq.n	80056fc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <HAL_SPI_TransmitReceive_IT+0x118>)
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a17      	ldr	r2, [pc, #92]	@ (8005754 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80056fa:	e005      	b.n	8005708 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a16      	ldr	r2, [pc, #88]	@ (8005758 <HAL_SPI_TransmitReceive_IT+0x120>)
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a15      	ldr	r2, [pc, #84]	@ (800575c <HAL_SPI_TransmitReceive_IT+0x124>)
 8005706:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005716:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b40      	cmp	r3, #64	@ 0x40
 8005724:	d008      	beq.n	8005738 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e000      	b.n	800573a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005738:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	08005a61 	.word	0x08005a61
 8005754:	08005ac1 	.word	0x08005ac1
 8005758:	0800599d 	.word	0x0800599d
 800575c:	08005a01 	.word	0x08005a01

08005760 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10e      	bne.n	80057a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
    return;
 800579e:	e0ce      	b.n	800593e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <HAL_SPI_IRQHandler+0x5e>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4798      	blx	r3
    return;
 80057bc:	e0bf      	b.n	800593e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <HAL_SPI_IRQHandler+0x7e>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80b0 	beq.w	800593e <HAL_SPI_IRQHandler+0x1de>
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80aa 	beq.w	800593e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d023      	beq.n	800583c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d011      	beq.n	8005824 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005804:	f043 0204 	orr.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	e00b      	b.n	800583c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]
        return;
 800583a:	e080      	b.n	800593e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f043 0208 	orr.w	r2, r3, #8
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005898:	2b00      	cmp	r3, #0
 800589a:	d04f      	beq.n	800593c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_SPI_IRQHandler+0x168>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d034      	beq.n	8005932 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0203 	bic.w	r2, r2, #3
 80058d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d011      	beq.n	8005904 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e4:	4a17      	ldr	r2, [pc, #92]	@ (8005944 <HAL_SPI_IRQHandler+0x1e4>)
 80058e6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe fab1 	bl	8003e54 <HAL_DMA_Abort_IT>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005908:	2b00      	cmp	r3, #0
 800590a:	d016      	beq.n	800593a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005910:	4a0c      	ldr	r2, [pc, #48]	@ (8005944 <HAL_SPI_IRQHandler+0x1e4>)
 8005912:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fa9b 	bl	8003e54 <HAL_DMA_Abort_IT>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005928:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005930:	e003      	b.n	800593a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb fabc 	bl	8000eb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005938:	e000      	b.n	800593c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800593a:	bf00      	nop
    return;
 800593c:	bf00      	nop
  }
}
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	08005975 	.word	0x08005975

08005948 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005980:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7fb fa8e 	bl	8000eb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f103 020c 	add.w	r2, r3, #12
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	7812      	ldrb	r2, [r2, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10f      	bne.n	80059f8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f95e 	bl	8005cb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10f      	bne.n	8005a58 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a46:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f92e 	bl	8005cb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	b292      	uxth	r2, r2
 8005a74:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10f      	bne.n	8005ab8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aa6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8fe 	bl	8005cb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	881a      	ldrh	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	1c9a      	adds	r2, r3, #2
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10f      	bne.n	8005b16 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b04:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8cf 	bl	8005cb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b30:	f7fd f8dc 	bl	8002cec <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b40:	f7fd f8d4 	bl	8002cec <HAL_GetTick>
 8005b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b46:	4b39      	ldr	r3, [pc, #228]	@ (8005c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	015b      	lsls	r3, r3, #5
 8005b4c:	0d1b      	lsrs	r3, r3, #20
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b56:	e054      	b.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d050      	beq.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b60:	f7fd f8c4 	bl	8002cec <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d902      	bls.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d13d      	bne.n	8005bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b8e:	d111      	bne.n	8005bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b98:	d004      	beq.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba2:	d107      	bne.n	8005bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bbc:	d10f      	bne.n	8005bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e017      	b.n	8005c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d19b      	bne.n	8005b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000014 	.word	0x20000014

08005c30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <SPI_EndRxTxTransaction+0x7c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb0 <SPI_EndRxTxTransaction+0x80>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0d5b      	lsrs	r3, r3, #21
 8005c48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c5a:	d112      	bne.n	8005c82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	2180      	movs	r1, #128	@ 0x80
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff ff5a 	bl	8005b20 <SPI_WaitFlagStateUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d016      	beq.n	8005ca0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e00f      	b.n	8005ca2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c98:	2b80      	cmp	r3, #128	@ 0x80
 8005c9a:	d0f2      	beq.n	8005c82 <SPI_EndRxTxTransaction+0x52>
 8005c9c:	e000      	b.n	8005ca0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c9e:	bf00      	nop
  }

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000014 	.word	0x20000014
 8005cb0:	165e9f81 	.word	0x165e9f81

08005cb4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005cbc:	4b35      	ldr	r3, [pc, #212]	@ (8005d94 <SPI_CloseRxTx_ISR+0xe0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a35      	ldr	r2, [pc, #212]	@ (8005d98 <SPI_CloseRxTx_ISR+0xe4>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	0a5b      	lsrs	r3, r3, #9
 8005cc8:	2264      	movs	r2, #100	@ 0x64
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd0:	f7fd f80c 	bl	8002cec <HAL_GetTick>
 8005cd4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0220 	bic.w	r2, r2, #32
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	f043 0220 	orr.w	r2, r3, #32
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cf8:	e009      	b.n	8005d0e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0eb      	beq.n	8005ce6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	2164      	movs	r1, #100	@ 0x64
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ff8c 	bl	8005c30 <SPI_EndRxTxTransaction>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d115      	bne.n	8005d7c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d107      	bne.n	8005d6c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fdef 	bl	8005948 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005d6a:	e00e      	b.n	8005d8a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7fb f82b 	bl	8000dd0 <HAL_SPI_TxRxCpltCallback>
}
 8005d7a:	e006      	b.n	8005d8a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fb f893 	bl	8000eb0 <HAL_SPI_ErrorCallback>
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000014 	.word	0x20000014
 8005d98:	057619f1 	.word	0x057619f1

08005d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e041      	b.n	8005e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc fdb8 	bl	8002938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f000 f95e 	bl	800609c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e046      	b.n	8005ee2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a23      	ldr	r2, [pc, #140]	@ (8005ef0 <HAL_TIM_Base_Start+0xb4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d022      	beq.n	8005eac <HAL_TIM_Base_Start+0x70>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6e:	d01d      	beq.n	8005eac <HAL_TIM_Base_Start+0x70>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1f      	ldr	r2, [pc, #124]	@ (8005ef4 <HAL_TIM_Base_Start+0xb8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <HAL_TIM_Base_Start+0x70>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef8 <HAL_TIM_Base_Start+0xbc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <HAL_TIM_Base_Start+0x70>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	@ (8005efc <HAL_TIM_Base_Start+0xc0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_TIM_Base_Start+0x70>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1b      	ldr	r2, [pc, #108]	@ (8005f00 <HAL_TIM_Base_Start+0xc4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_TIM_Base_Start+0x70>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	@ (8005f04 <HAL_TIM_Base_Start+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_TIM_Base_Start+0x70>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	@ (8005f08 <HAL_TIM_Base_Start+0xcc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d111      	bne.n	8005ed0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b06      	cmp	r3, #6
 8005ebc:	d010      	beq.n	8005ee0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	e007      	b.n	8005ee0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIM_ConfigClockSource+0x1c>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e0b4      	b.n	8006092 <HAL_TIM_ConfigClockSource+0x186>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f60:	d03e      	beq.n	8005fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f66:	f200 8087 	bhi.w	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6e:	f000 8086 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x172>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f76:	d87f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b70      	cmp	r3, #112	@ 0x70
 8005f7a:	d01a      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005f7c:	2b70      	cmp	r3, #112	@ 0x70
 8005f7e:	d87b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b60      	cmp	r3, #96	@ 0x60
 8005f82:	d050      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x11a>
 8005f84:	2b60      	cmp	r3, #96	@ 0x60
 8005f86:	d877      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b50      	cmp	r3, #80	@ 0x50
 8005f8a:	d03c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xfa>
 8005f8c:	2b50      	cmp	r3, #80	@ 0x50
 8005f8e:	d873      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d058      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x13a>
 8005f94:	2b40      	cmp	r3, #64	@ 0x40
 8005f96:	d86f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b30      	cmp	r3, #48	@ 0x30
 8005f9a:	d064      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005f9c:	2b30      	cmp	r3, #48	@ 0x30
 8005f9e:	d86b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d060      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d867      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05c      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d05a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	e062      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f000 f985 	bl	80062d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
      break;
 8005fde:	e04f      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f000 f96e 	bl	80062d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006002:	609a      	str	r2, [r3, #8]
      break;
 8006004:	e03c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	461a      	mov	r2, r3
 8006014:	f000 f8e2 	bl	80061dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2150      	movs	r1, #80	@ 0x50
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f93b 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8006024:	e02c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	461a      	mov	r2, r3
 8006034:	f000 f901 	bl	800623a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2160      	movs	r1, #96	@ 0x60
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f92b 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8006044:	e01c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	461a      	mov	r2, r3
 8006054:	f000 f8c2 	bl	80061dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2140      	movs	r1, #64	@ 0x40
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f91b 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8006064:	e00c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 f912 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8006076:	e003      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	e000      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800607e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a40      	ldr	r2, [pc, #256]	@ (80061b0 <TIM_Base_SetConfig+0x114>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ba:	d00f      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a3d      	ldr	r2, [pc, #244]	@ (80061b4 <TIM_Base_SetConfig+0x118>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a3c      	ldr	r2, [pc, #240]	@ (80061b8 <TIM_Base_SetConfig+0x11c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a3b      	ldr	r2, [pc, #236]	@ (80061bc <TIM_Base_SetConfig+0x120>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a3a      	ldr	r2, [pc, #232]	@ (80061c0 <TIM_Base_SetConfig+0x124>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d108      	bne.n	80060ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2f      	ldr	r2, [pc, #188]	@ (80061b0 <TIM_Base_SetConfig+0x114>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d02b      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fc:	d027      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2c      	ldr	r2, [pc, #176]	@ (80061b4 <TIM_Base_SetConfig+0x118>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d023      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2b      	ldr	r2, [pc, #172]	@ (80061b8 <TIM_Base_SetConfig+0x11c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d01f      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2a      	ldr	r2, [pc, #168]	@ (80061bc <TIM_Base_SetConfig+0x120>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01b      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a29      	ldr	r2, [pc, #164]	@ (80061c0 <TIM_Base_SetConfig+0x124>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d017      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a28      	ldr	r2, [pc, #160]	@ (80061c4 <TIM_Base_SetConfig+0x128>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a27      	ldr	r2, [pc, #156]	@ (80061c8 <TIM_Base_SetConfig+0x12c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00f      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a26      	ldr	r2, [pc, #152]	@ (80061cc <TIM_Base_SetConfig+0x130>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00b      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a25      	ldr	r2, [pc, #148]	@ (80061d0 <TIM_Base_SetConfig+0x134>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a24      	ldr	r2, [pc, #144]	@ (80061d4 <TIM_Base_SetConfig+0x138>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a23      	ldr	r2, [pc, #140]	@ (80061d8 <TIM_Base_SetConfig+0x13c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a0a      	ldr	r2, [pc, #40]	@ (80061b0 <TIM_Base_SetConfig+0x114>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_Base_SetConfig+0xf8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a0c      	ldr	r2, [pc, #48]	@ (80061c0 <TIM_Base_SetConfig+0x124>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d103      	bne.n	800619c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	615a      	str	r2, [r3, #20]
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	40000c00 	.word	0x40000c00
 80061c0:	40010400 	.word	0x40010400
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40014400 	.word	0x40014400
 80061cc:	40014800 	.word	0x40014800
 80061d0:	40001800 	.word	0x40001800
 80061d4:	40001c00 	.word	0x40001c00
 80061d8:	40002000 	.word	0x40002000

080061dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f023 0201 	bic.w	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 030a 	bic.w	r3, r3, #10
 8006218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623a:	b480      	push	{r7}
 800623c:	b087      	sub	sp, #28
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 0210 	bic.w	r2, r3, #16
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006276:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f043 0307 	orr.w	r3, r3, #7
 80062bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	609a      	str	r2, [r3, #8]
}
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006324:	2302      	movs	r3, #2
 8006326:	e05a      	b.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a21      	ldr	r2, [pc, #132]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d022      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006374:	d01d      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1d      	ldr	r2, [pc, #116]	@ (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1b      	ldr	r2, [pc, #108]	@ (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1a      	ldr	r2, [pc, #104]	@ (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a17      	ldr	r2, [pc, #92]	@ (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a15      	ldr	r2, [pc, #84]	@ (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10c      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800

08006408 <std>:
 8006408:	2300      	movs	r3, #0
 800640a:	b510      	push	{r4, lr}
 800640c:	4604      	mov	r4, r0
 800640e:	e9c0 3300 	strd	r3, r3, [r0]
 8006412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006416:	6083      	str	r3, [r0, #8]
 8006418:	8181      	strh	r1, [r0, #12]
 800641a:	6643      	str	r3, [r0, #100]	@ 0x64
 800641c:	81c2      	strh	r2, [r0, #14]
 800641e:	6183      	str	r3, [r0, #24]
 8006420:	4619      	mov	r1, r3
 8006422:	2208      	movs	r2, #8
 8006424:	305c      	adds	r0, #92	@ 0x5c
 8006426:	f000 f9e7 	bl	80067f8 <memset>
 800642a:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <std+0x58>)
 800642c:	6263      	str	r3, [r4, #36]	@ 0x24
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <std+0x5c>)
 8006430:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <std+0x60>)
 8006434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006436:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <std+0x64>)
 8006438:	6323      	str	r3, [r4, #48]	@ 0x30
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <std+0x68>)
 800643c:	6224      	str	r4, [r4, #32]
 800643e:	429c      	cmp	r4, r3
 8006440:	d006      	beq.n	8006450 <std+0x48>
 8006442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006446:	4294      	cmp	r4, r2
 8006448:	d002      	beq.n	8006450 <std+0x48>
 800644a:	33d0      	adds	r3, #208	@ 0xd0
 800644c:	429c      	cmp	r4, r3
 800644e:	d105      	bne.n	800645c <std+0x54>
 8006450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006458:	f000 ba46 	b.w	80068e8 <__retarget_lock_init_recursive>
 800645c:	bd10      	pop	{r4, pc}
 800645e:	bf00      	nop
 8006460:	08006649 	.word	0x08006649
 8006464:	0800666b 	.word	0x0800666b
 8006468:	080066a3 	.word	0x080066a3
 800646c:	080066c7 	.word	0x080066c7
 8006470:	20000574 	.word	0x20000574

08006474 <stdio_exit_handler>:
 8006474:	4a02      	ldr	r2, [pc, #8]	@ (8006480 <stdio_exit_handler+0xc>)
 8006476:	4903      	ldr	r1, [pc, #12]	@ (8006484 <stdio_exit_handler+0x10>)
 8006478:	4803      	ldr	r0, [pc, #12]	@ (8006488 <stdio_exit_handler+0x14>)
 800647a:	f000 b869 	b.w	8006550 <_fwalk_sglue>
 800647e:	bf00      	nop
 8006480:	20000020 	.word	0x20000020
 8006484:	08006be9 	.word	0x08006be9
 8006488:	20000030 	.word	0x20000030

0800648c <cleanup_stdio>:
 800648c:	6841      	ldr	r1, [r0, #4]
 800648e:	4b0c      	ldr	r3, [pc, #48]	@ (80064c0 <cleanup_stdio+0x34>)
 8006490:	4299      	cmp	r1, r3
 8006492:	b510      	push	{r4, lr}
 8006494:	4604      	mov	r4, r0
 8006496:	d001      	beq.n	800649c <cleanup_stdio+0x10>
 8006498:	f000 fba6 	bl	8006be8 <_fflush_r>
 800649c:	68a1      	ldr	r1, [r4, #8]
 800649e:	4b09      	ldr	r3, [pc, #36]	@ (80064c4 <cleanup_stdio+0x38>)
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d002      	beq.n	80064aa <cleanup_stdio+0x1e>
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fb9f 	bl	8006be8 <_fflush_r>
 80064aa:	68e1      	ldr	r1, [r4, #12]
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <cleanup_stdio+0x3c>)
 80064ae:	4299      	cmp	r1, r3
 80064b0:	d004      	beq.n	80064bc <cleanup_stdio+0x30>
 80064b2:	4620      	mov	r0, r4
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b8:	f000 bb96 	b.w	8006be8 <_fflush_r>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	bf00      	nop
 80064c0:	20000574 	.word	0x20000574
 80064c4:	200005dc 	.word	0x200005dc
 80064c8:	20000644 	.word	0x20000644

080064cc <global_stdio_init.part.0>:
 80064cc:	b510      	push	{r4, lr}
 80064ce:	4b0b      	ldr	r3, [pc, #44]	@ (80064fc <global_stdio_init.part.0+0x30>)
 80064d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006500 <global_stdio_init.part.0+0x34>)
 80064d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006504 <global_stdio_init.part.0+0x38>)
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	4620      	mov	r0, r4
 80064d8:	2200      	movs	r2, #0
 80064da:	2104      	movs	r1, #4
 80064dc:	f7ff ff94 	bl	8006408 <std>
 80064e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064e4:	2201      	movs	r2, #1
 80064e6:	2109      	movs	r1, #9
 80064e8:	f7ff ff8e 	bl	8006408 <std>
 80064ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064f0:	2202      	movs	r2, #2
 80064f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f6:	2112      	movs	r1, #18
 80064f8:	f7ff bf86 	b.w	8006408 <std>
 80064fc:	200006ac 	.word	0x200006ac
 8006500:	20000574 	.word	0x20000574
 8006504:	08006475 	.word	0x08006475

08006508 <__sfp_lock_acquire>:
 8006508:	4801      	ldr	r0, [pc, #4]	@ (8006510 <__sfp_lock_acquire+0x8>)
 800650a:	f000 b9ee 	b.w	80068ea <__retarget_lock_acquire_recursive>
 800650e:	bf00      	nop
 8006510:	200006b5 	.word	0x200006b5

08006514 <__sfp_lock_release>:
 8006514:	4801      	ldr	r0, [pc, #4]	@ (800651c <__sfp_lock_release+0x8>)
 8006516:	f000 b9e9 	b.w	80068ec <__retarget_lock_release_recursive>
 800651a:	bf00      	nop
 800651c:	200006b5 	.word	0x200006b5

08006520 <__sinit>:
 8006520:	b510      	push	{r4, lr}
 8006522:	4604      	mov	r4, r0
 8006524:	f7ff fff0 	bl	8006508 <__sfp_lock_acquire>
 8006528:	6a23      	ldr	r3, [r4, #32]
 800652a:	b11b      	cbz	r3, 8006534 <__sinit+0x14>
 800652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006530:	f7ff bff0 	b.w	8006514 <__sfp_lock_release>
 8006534:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <__sinit+0x28>)
 8006536:	6223      	str	r3, [r4, #32]
 8006538:	4b04      	ldr	r3, [pc, #16]	@ (800654c <__sinit+0x2c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f5      	bne.n	800652c <__sinit+0xc>
 8006540:	f7ff ffc4 	bl	80064cc <global_stdio_init.part.0>
 8006544:	e7f2      	b.n	800652c <__sinit+0xc>
 8006546:	bf00      	nop
 8006548:	0800648d 	.word	0x0800648d
 800654c:	200006ac 	.word	0x200006ac

08006550 <_fwalk_sglue>:
 8006550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006554:	4607      	mov	r7, r0
 8006556:	4688      	mov	r8, r1
 8006558:	4614      	mov	r4, r2
 800655a:	2600      	movs	r6, #0
 800655c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006560:	f1b9 0901 	subs.w	r9, r9, #1
 8006564:	d505      	bpl.n	8006572 <_fwalk_sglue+0x22>
 8006566:	6824      	ldr	r4, [r4, #0]
 8006568:	2c00      	cmp	r4, #0
 800656a:	d1f7      	bne.n	800655c <_fwalk_sglue+0xc>
 800656c:	4630      	mov	r0, r6
 800656e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d907      	bls.n	8006588 <_fwalk_sglue+0x38>
 8006578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800657c:	3301      	adds	r3, #1
 800657e:	d003      	beq.n	8006588 <_fwalk_sglue+0x38>
 8006580:	4629      	mov	r1, r5
 8006582:	4638      	mov	r0, r7
 8006584:	47c0      	blx	r8
 8006586:	4306      	orrs	r6, r0
 8006588:	3568      	adds	r5, #104	@ 0x68
 800658a:	e7e9      	b.n	8006560 <_fwalk_sglue+0x10>

0800658c <_puts_r>:
 800658c:	6a03      	ldr	r3, [r0, #32]
 800658e:	b570      	push	{r4, r5, r6, lr}
 8006590:	6884      	ldr	r4, [r0, #8]
 8006592:	4605      	mov	r5, r0
 8006594:	460e      	mov	r6, r1
 8006596:	b90b      	cbnz	r3, 800659c <_puts_r+0x10>
 8006598:	f7ff ffc2 	bl	8006520 <__sinit>
 800659c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800659e:	07db      	lsls	r3, r3, #31
 80065a0:	d405      	bmi.n	80065ae <_puts_r+0x22>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	0598      	lsls	r0, r3, #22
 80065a6:	d402      	bmi.n	80065ae <_puts_r+0x22>
 80065a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065aa:	f000 f99e 	bl	80068ea <__retarget_lock_acquire_recursive>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	0719      	lsls	r1, r3, #28
 80065b2:	d502      	bpl.n	80065ba <_puts_r+0x2e>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d135      	bne.n	8006626 <_puts_r+0x9a>
 80065ba:	4621      	mov	r1, r4
 80065bc:	4628      	mov	r0, r5
 80065be:	f000 f8c5 	bl	800674c <__swsetup_r>
 80065c2:	b380      	cbz	r0, 8006626 <_puts_r+0x9a>
 80065c4:	f04f 35ff 	mov.w	r5, #4294967295
 80065c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065ca:	07da      	lsls	r2, r3, #31
 80065cc:	d405      	bmi.n	80065da <_puts_r+0x4e>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	059b      	lsls	r3, r3, #22
 80065d2:	d402      	bmi.n	80065da <_puts_r+0x4e>
 80065d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d6:	f000 f989 	bl	80068ec <__retarget_lock_release_recursive>
 80065da:	4628      	mov	r0, r5
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da04      	bge.n	80065ec <_puts_r+0x60>
 80065e2:	69a2      	ldr	r2, [r4, #24]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	dc17      	bgt.n	8006618 <_puts_r+0x8c>
 80065e8:	290a      	cmp	r1, #10
 80065ea:	d015      	beq.n	8006618 <_puts_r+0x8c>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	6022      	str	r2, [r4, #0]
 80065f2:	7019      	strb	r1, [r3, #0]
 80065f4:	68a3      	ldr	r3, [r4, #8]
 80065f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065fa:	3b01      	subs	r3, #1
 80065fc:	60a3      	str	r3, [r4, #8]
 80065fe:	2900      	cmp	r1, #0
 8006600:	d1ed      	bne.n	80065de <_puts_r+0x52>
 8006602:	2b00      	cmp	r3, #0
 8006604:	da11      	bge.n	800662a <_puts_r+0x9e>
 8006606:	4622      	mov	r2, r4
 8006608:	210a      	movs	r1, #10
 800660a:	4628      	mov	r0, r5
 800660c:	f000 f85f 	bl	80066ce <__swbuf_r>
 8006610:	3001      	adds	r0, #1
 8006612:	d0d7      	beq.n	80065c4 <_puts_r+0x38>
 8006614:	250a      	movs	r5, #10
 8006616:	e7d7      	b.n	80065c8 <_puts_r+0x3c>
 8006618:	4622      	mov	r2, r4
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f857 	bl	80066ce <__swbuf_r>
 8006620:	3001      	adds	r0, #1
 8006622:	d1e7      	bne.n	80065f4 <_puts_r+0x68>
 8006624:	e7ce      	b.n	80065c4 <_puts_r+0x38>
 8006626:	3e01      	subs	r6, #1
 8006628:	e7e4      	b.n	80065f4 <_puts_r+0x68>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	6022      	str	r2, [r4, #0]
 8006630:	220a      	movs	r2, #10
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	e7ee      	b.n	8006614 <_puts_r+0x88>
	...

08006638 <puts>:
 8006638:	4b02      	ldr	r3, [pc, #8]	@ (8006644 <puts+0xc>)
 800663a:	4601      	mov	r1, r0
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	f7ff bfa5 	b.w	800658c <_puts_r>
 8006642:	bf00      	nop
 8006644:	2000002c 	.word	0x2000002c

08006648 <__sread>:
 8006648:	b510      	push	{r4, lr}
 800664a:	460c      	mov	r4, r1
 800664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006650:	f000 f8fc 	bl	800684c <_read_r>
 8006654:	2800      	cmp	r0, #0
 8006656:	bfab      	itete	ge
 8006658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800665a:	89a3      	ldrhlt	r3, [r4, #12]
 800665c:	181b      	addge	r3, r3, r0
 800665e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006662:	bfac      	ite	ge
 8006664:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006666:	81a3      	strhlt	r3, [r4, #12]
 8006668:	bd10      	pop	{r4, pc}

0800666a <__swrite>:
 800666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666e:	461f      	mov	r7, r3
 8006670:	898b      	ldrh	r3, [r1, #12]
 8006672:	05db      	lsls	r3, r3, #23
 8006674:	4605      	mov	r5, r0
 8006676:	460c      	mov	r4, r1
 8006678:	4616      	mov	r6, r2
 800667a:	d505      	bpl.n	8006688 <__swrite+0x1e>
 800667c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006680:	2302      	movs	r3, #2
 8006682:	2200      	movs	r2, #0
 8006684:	f000 f8d0 	bl	8006828 <_lseek_r>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	4632      	mov	r2, r6
 8006696:	463b      	mov	r3, r7
 8006698:	4628      	mov	r0, r5
 800669a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669e:	f000 b8e7 	b.w	8006870 <_write_r>

080066a2 <__sseek>:
 80066a2:	b510      	push	{r4, lr}
 80066a4:	460c      	mov	r4, r1
 80066a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066aa:	f000 f8bd 	bl	8006828 <_lseek_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	bf15      	itete	ne
 80066b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066be:	81a3      	strheq	r3, [r4, #12]
 80066c0:	bf18      	it	ne
 80066c2:	81a3      	strhne	r3, [r4, #12]
 80066c4:	bd10      	pop	{r4, pc}

080066c6 <__sclose>:
 80066c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ca:	f000 b89d 	b.w	8006808 <_close_r>

080066ce <__swbuf_r>:
 80066ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d0:	460e      	mov	r6, r1
 80066d2:	4614      	mov	r4, r2
 80066d4:	4605      	mov	r5, r0
 80066d6:	b118      	cbz	r0, 80066e0 <__swbuf_r+0x12>
 80066d8:	6a03      	ldr	r3, [r0, #32]
 80066da:	b90b      	cbnz	r3, 80066e0 <__swbuf_r+0x12>
 80066dc:	f7ff ff20 	bl	8006520 <__sinit>
 80066e0:	69a3      	ldr	r3, [r4, #24]
 80066e2:	60a3      	str	r3, [r4, #8]
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	071a      	lsls	r2, r3, #28
 80066e8:	d501      	bpl.n	80066ee <__swbuf_r+0x20>
 80066ea:	6923      	ldr	r3, [r4, #16]
 80066ec:	b943      	cbnz	r3, 8006700 <__swbuf_r+0x32>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 f82b 	bl	800674c <__swsetup_r>
 80066f6:	b118      	cbz	r0, 8006700 <__swbuf_r+0x32>
 80066f8:	f04f 37ff 	mov.w	r7, #4294967295
 80066fc:	4638      	mov	r0, r7
 80066fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	6922      	ldr	r2, [r4, #16]
 8006704:	1a98      	subs	r0, r3, r2
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	b2f6      	uxtb	r6, r6
 800670a:	4283      	cmp	r3, r0
 800670c:	4637      	mov	r7, r6
 800670e:	dc05      	bgt.n	800671c <__swbuf_r+0x4e>
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	f000 fa68 	bl	8006be8 <_fflush_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	d1ed      	bne.n	80066f8 <__swbuf_r+0x2a>
 800671c:	68a3      	ldr	r3, [r4, #8]
 800671e:	3b01      	subs	r3, #1
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	6022      	str	r2, [r4, #0]
 8006728:	701e      	strb	r6, [r3, #0]
 800672a:	6962      	ldr	r2, [r4, #20]
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	429a      	cmp	r2, r3
 8006730:	d004      	beq.n	800673c <__swbuf_r+0x6e>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	07db      	lsls	r3, r3, #31
 8006736:	d5e1      	bpl.n	80066fc <__swbuf_r+0x2e>
 8006738:	2e0a      	cmp	r6, #10
 800673a:	d1df      	bne.n	80066fc <__swbuf_r+0x2e>
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fa52 	bl	8006be8 <_fflush_r>
 8006744:	2800      	cmp	r0, #0
 8006746:	d0d9      	beq.n	80066fc <__swbuf_r+0x2e>
 8006748:	e7d6      	b.n	80066f8 <__swbuf_r+0x2a>
	...

0800674c <__swsetup_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4b29      	ldr	r3, [pc, #164]	@ (80067f4 <__swsetup_r+0xa8>)
 8006750:	4605      	mov	r5, r0
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	460c      	mov	r4, r1
 8006756:	b118      	cbz	r0, 8006760 <__swsetup_r+0x14>
 8006758:	6a03      	ldr	r3, [r0, #32]
 800675a:	b90b      	cbnz	r3, 8006760 <__swsetup_r+0x14>
 800675c:	f7ff fee0 	bl	8006520 <__sinit>
 8006760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006764:	0719      	lsls	r1, r3, #28
 8006766:	d422      	bmi.n	80067ae <__swsetup_r+0x62>
 8006768:	06da      	lsls	r2, r3, #27
 800676a:	d407      	bmi.n	800677c <__swsetup_r+0x30>
 800676c:	2209      	movs	r2, #9
 800676e:	602a      	str	r2, [r5, #0]
 8006770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	f04f 30ff 	mov.w	r0, #4294967295
 800677a:	e033      	b.n	80067e4 <__swsetup_r+0x98>
 800677c:	0758      	lsls	r0, r3, #29
 800677e:	d512      	bpl.n	80067a6 <__swsetup_r+0x5a>
 8006780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006782:	b141      	cbz	r1, 8006796 <__swsetup_r+0x4a>
 8006784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006788:	4299      	cmp	r1, r3
 800678a:	d002      	beq.n	8006792 <__swsetup_r+0x46>
 800678c:	4628      	mov	r0, r5
 800678e:	f000 f8af 	bl	80068f0 <_free_r>
 8006792:	2300      	movs	r3, #0
 8006794:	6363      	str	r3, [r4, #52]	@ 0x34
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	2300      	movs	r3, #0
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f043 0308 	orr.w	r3, r3, #8
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	b94b      	cbnz	r3, 80067c6 <__swsetup_r+0x7a>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067bc:	d003      	beq.n	80067c6 <__swsetup_r+0x7a>
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 fa5f 	bl	8006c84 <__smakebuf_r>
 80067c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ca:	f013 0201 	ands.w	r2, r3, #1
 80067ce:	d00a      	beq.n	80067e6 <__swsetup_r+0x9a>
 80067d0:	2200      	movs	r2, #0
 80067d2:	60a2      	str	r2, [r4, #8]
 80067d4:	6962      	ldr	r2, [r4, #20]
 80067d6:	4252      	negs	r2, r2
 80067d8:	61a2      	str	r2, [r4, #24]
 80067da:	6922      	ldr	r2, [r4, #16]
 80067dc:	b942      	cbnz	r2, 80067f0 <__swsetup_r+0xa4>
 80067de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067e2:	d1c5      	bne.n	8006770 <__swsetup_r+0x24>
 80067e4:	bd38      	pop	{r3, r4, r5, pc}
 80067e6:	0799      	lsls	r1, r3, #30
 80067e8:	bf58      	it	pl
 80067ea:	6962      	ldrpl	r2, [r4, #20]
 80067ec:	60a2      	str	r2, [r4, #8]
 80067ee:	e7f4      	b.n	80067da <__swsetup_r+0x8e>
 80067f0:	2000      	movs	r0, #0
 80067f2:	e7f7      	b.n	80067e4 <__swsetup_r+0x98>
 80067f4:	2000002c 	.word	0x2000002c

080067f8 <memset>:
 80067f8:	4402      	add	r2, r0
 80067fa:	4603      	mov	r3, r0
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d100      	bne.n	8006802 <memset+0xa>
 8006800:	4770      	bx	lr
 8006802:	f803 1b01 	strb.w	r1, [r3], #1
 8006806:	e7f9      	b.n	80067fc <memset+0x4>

08006808 <_close_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	@ (8006824 <_close_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fc f95d 	bl	8002ad2 <_close>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_close_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_close_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200006b0 	.word	0x200006b0

08006828 <_lseek_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d07      	ldr	r5, [pc, #28]	@ (8006848 <_lseek_r+0x20>)
 800682c:	4604      	mov	r4, r0
 800682e:	4608      	mov	r0, r1
 8006830:	4611      	mov	r1, r2
 8006832:	2200      	movs	r2, #0
 8006834:	602a      	str	r2, [r5, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f7fc f972 	bl	8002b20 <_lseek>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_lseek_r+0x1e>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_lseek_r+0x1e>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	200006b0 	.word	0x200006b0

0800684c <_read_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d07      	ldr	r5, [pc, #28]	@ (800686c <_read_r+0x20>)
 8006850:	4604      	mov	r4, r0
 8006852:	4608      	mov	r0, r1
 8006854:	4611      	mov	r1, r2
 8006856:	2200      	movs	r2, #0
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fc f91c 	bl	8002a98 <_read>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_read_r+0x1e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_read_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	200006b0 	.word	0x200006b0

08006870 <_write_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	@ (8006890 <_write_r+0x20>)
 8006874:	4604      	mov	r4, r0
 8006876:	4608      	mov	r0, r1
 8006878:	4611      	mov	r1, r2
 800687a:	2200      	movs	r2, #0
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7fb fb9c 	bl	8001fbc <_write>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_write_r+0x1e>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_write_r+0x1e>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	200006b0 	.word	0x200006b0

08006894 <__errno>:
 8006894:	4b01      	ldr	r3, [pc, #4]	@ (800689c <__errno+0x8>)
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	2000002c 	.word	0x2000002c

080068a0 <__libc_init_array>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	4d0d      	ldr	r5, [pc, #52]	@ (80068d8 <__libc_init_array+0x38>)
 80068a4:	4c0d      	ldr	r4, [pc, #52]	@ (80068dc <__libc_init_array+0x3c>)
 80068a6:	1b64      	subs	r4, r4, r5
 80068a8:	10a4      	asrs	r4, r4, #2
 80068aa:	2600      	movs	r6, #0
 80068ac:	42a6      	cmp	r6, r4
 80068ae:	d109      	bne.n	80068c4 <__libc_init_array+0x24>
 80068b0:	4d0b      	ldr	r5, [pc, #44]	@ (80068e0 <__libc_init_array+0x40>)
 80068b2:	4c0c      	ldr	r4, [pc, #48]	@ (80068e4 <__libc_init_array+0x44>)
 80068b4:	f000 faf0 	bl	8006e98 <_init>
 80068b8:	1b64      	subs	r4, r4, r5
 80068ba:	10a4      	asrs	r4, r4, #2
 80068bc:	2600      	movs	r6, #0
 80068be:	42a6      	cmp	r6, r4
 80068c0:	d105      	bne.n	80068ce <__libc_init_array+0x2e>
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c8:	4798      	blx	r3
 80068ca:	3601      	adds	r6, #1
 80068cc:	e7ee      	b.n	80068ac <__libc_init_array+0xc>
 80068ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d2:	4798      	blx	r3
 80068d4:	3601      	adds	r6, #1
 80068d6:	e7f2      	b.n	80068be <__libc_init_array+0x1e>
 80068d8:	08006ef0 	.word	0x08006ef0
 80068dc:	08006ef0 	.word	0x08006ef0
 80068e0:	08006ef0 	.word	0x08006ef0
 80068e4:	08006ef4 	.word	0x08006ef4

080068e8 <__retarget_lock_init_recursive>:
 80068e8:	4770      	bx	lr

080068ea <__retarget_lock_acquire_recursive>:
 80068ea:	4770      	bx	lr

080068ec <__retarget_lock_release_recursive>:
 80068ec:	4770      	bx	lr
	...

080068f0 <_free_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4605      	mov	r5, r0
 80068f4:	2900      	cmp	r1, #0
 80068f6:	d041      	beq.n	800697c <_free_r+0x8c>
 80068f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068fc:	1f0c      	subs	r4, r1, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bfb8      	it	lt
 8006902:	18e4      	addlt	r4, r4, r3
 8006904:	f000 f8e0 	bl	8006ac8 <__malloc_lock>
 8006908:	4a1d      	ldr	r2, [pc, #116]	@ (8006980 <_free_r+0x90>)
 800690a:	6813      	ldr	r3, [r2, #0]
 800690c:	b933      	cbnz	r3, 800691c <_free_r+0x2c>
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	6014      	str	r4, [r2, #0]
 8006912:	4628      	mov	r0, r5
 8006914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006918:	f000 b8dc 	b.w	8006ad4 <__malloc_unlock>
 800691c:	42a3      	cmp	r3, r4
 800691e:	d908      	bls.n	8006932 <_free_r+0x42>
 8006920:	6820      	ldr	r0, [r4, #0]
 8006922:	1821      	adds	r1, r4, r0
 8006924:	428b      	cmp	r3, r1
 8006926:	bf01      	itttt	eq
 8006928:	6819      	ldreq	r1, [r3, #0]
 800692a:	685b      	ldreq	r3, [r3, #4]
 800692c:	1809      	addeq	r1, r1, r0
 800692e:	6021      	streq	r1, [r4, #0]
 8006930:	e7ed      	b.n	800690e <_free_r+0x1e>
 8006932:	461a      	mov	r2, r3
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b10b      	cbz	r3, 800693c <_free_r+0x4c>
 8006938:	42a3      	cmp	r3, r4
 800693a:	d9fa      	bls.n	8006932 <_free_r+0x42>
 800693c:	6811      	ldr	r1, [r2, #0]
 800693e:	1850      	adds	r0, r2, r1
 8006940:	42a0      	cmp	r0, r4
 8006942:	d10b      	bne.n	800695c <_free_r+0x6c>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	4401      	add	r1, r0
 8006948:	1850      	adds	r0, r2, r1
 800694a:	4283      	cmp	r3, r0
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	d1e0      	bne.n	8006912 <_free_r+0x22>
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	6053      	str	r3, [r2, #4]
 8006956:	4408      	add	r0, r1
 8006958:	6010      	str	r0, [r2, #0]
 800695a:	e7da      	b.n	8006912 <_free_r+0x22>
 800695c:	d902      	bls.n	8006964 <_free_r+0x74>
 800695e:	230c      	movs	r3, #12
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	e7d6      	b.n	8006912 <_free_r+0x22>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	1821      	adds	r1, r4, r0
 8006968:	428b      	cmp	r3, r1
 800696a:	bf04      	itt	eq
 800696c:	6819      	ldreq	r1, [r3, #0]
 800696e:	685b      	ldreq	r3, [r3, #4]
 8006970:	6063      	str	r3, [r4, #4]
 8006972:	bf04      	itt	eq
 8006974:	1809      	addeq	r1, r1, r0
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	6054      	str	r4, [r2, #4]
 800697a:	e7ca      	b.n	8006912 <_free_r+0x22>
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	bf00      	nop
 8006980:	200006bc 	.word	0x200006bc

08006984 <sbrk_aligned>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4e0f      	ldr	r6, [pc, #60]	@ (80069c4 <sbrk_aligned+0x40>)
 8006988:	460c      	mov	r4, r1
 800698a:	6831      	ldr	r1, [r6, #0]
 800698c:	4605      	mov	r5, r0
 800698e:	b911      	cbnz	r1, 8006996 <sbrk_aligned+0x12>
 8006990:	f000 f9d6 	bl	8006d40 <_sbrk_r>
 8006994:	6030      	str	r0, [r6, #0]
 8006996:	4621      	mov	r1, r4
 8006998:	4628      	mov	r0, r5
 800699a:	f000 f9d1 	bl	8006d40 <_sbrk_r>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	d103      	bne.n	80069aa <sbrk_aligned+0x26>
 80069a2:	f04f 34ff 	mov.w	r4, #4294967295
 80069a6:	4620      	mov	r0, r4
 80069a8:	bd70      	pop	{r4, r5, r6, pc}
 80069aa:	1cc4      	adds	r4, r0, #3
 80069ac:	f024 0403 	bic.w	r4, r4, #3
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	d0f8      	beq.n	80069a6 <sbrk_aligned+0x22>
 80069b4:	1a21      	subs	r1, r4, r0
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 f9c2 	bl	8006d40 <_sbrk_r>
 80069bc:	3001      	adds	r0, #1
 80069be:	d1f2      	bne.n	80069a6 <sbrk_aligned+0x22>
 80069c0:	e7ef      	b.n	80069a2 <sbrk_aligned+0x1e>
 80069c2:	bf00      	nop
 80069c4:	200006b8 	.word	0x200006b8

080069c8 <_malloc_r>:
 80069c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069cc:	1ccd      	adds	r5, r1, #3
 80069ce:	f025 0503 	bic.w	r5, r5, #3
 80069d2:	3508      	adds	r5, #8
 80069d4:	2d0c      	cmp	r5, #12
 80069d6:	bf38      	it	cc
 80069d8:	250c      	movcc	r5, #12
 80069da:	2d00      	cmp	r5, #0
 80069dc:	4606      	mov	r6, r0
 80069de:	db01      	blt.n	80069e4 <_malloc_r+0x1c>
 80069e0:	42a9      	cmp	r1, r5
 80069e2:	d904      	bls.n	80069ee <_malloc_r+0x26>
 80069e4:	230c      	movs	r3, #12
 80069e6:	6033      	str	r3, [r6, #0]
 80069e8:	2000      	movs	r0, #0
 80069ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ac4 <_malloc_r+0xfc>
 80069f2:	f000 f869 	bl	8006ac8 <__malloc_lock>
 80069f6:	f8d8 3000 	ldr.w	r3, [r8]
 80069fa:	461c      	mov	r4, r3
 80069fc:	bb44      	cbnz	r4, 8006a50 <_malloc_r+0x88>
 80069fe:	4629      	mov	r1, r5
 8006a00:	4630      	mov	r0, r6
 8006a02:	f7ff ffbf 	bl	8006984 <sbrk_aligned>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	4604      	mov	r4, r0
 8006a0a:	d158      	bne.n	8006abe <_malloc_r+0xf6>
 8006a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8006a10:	4627      	mov	r7, r4
 8006a12:	2f00      	cmp	r7, #0
 8006a14:	d143      	bne.n	8006a9e <_malloc_r+0xd6>
 8006a16:	2c00      	cmp	r4, #0
 8006a18:	d04b      	beq.n	8006ab2 <_malloc_r+0xea>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	4630      	mov	r0, r6
 8006a20:	eb04 0903 	add.w	r9, r4, r3
 8006a24:	f000 f98c 	bl	8006d40 <_sbrk_r>
 8006a28:	4581      	cmp	r9, r0
 8006a2a:	d142      	bne.n	8006ab2 <_malloc_r+0xea>
 8006a2c:	6821      	ldr	r1, [r4, #0]
 8006a2e:	1a6d      	subs	r5, r5, r1
 8006a30:	4629      	mov	r1, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff ffa6 	bl	8006984 <sbrk_aligned>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d03a      	beq.n	8006ab2 <_malloc_r+0xea>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	442b      	add	r3, r5
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	f8d8 3000 	ldr.w	r3, [r8]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	bb62      	cbnz	r2, 8006aa4 <_malloc_r+0xdc>
 8006a4a:	f8c8 7000 	str.w	r7, [r8]
 8006a4e:	e00f      	b.n	8006a70 <_malloc_r+0xa8>
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	1b52      	subs	r2, r2, r5
 8006a54:	d420      	bmi.n	8006a98 <_malloc_r+0xd0>
 8006a56:	2a0b      	cmp	r2, #11
 8006a58:	d917      	bls.n	8006a8a <_malloc_r+0xc2>
 8006a5a:	1961      	adds	r1, r4, r5
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	6025      	str	r5, [r4, #0]
 8006a60:	bf18      	it	ne
 8006a62:	6059      	strne	r1, [r3, #4]
 8006a64:	6863      	ldr	r3, [r4, #4]
 8006a66:	bf08      	it	eq
 8006a68:	f8c8 1000 	streq.w	r1, [r8]
 8006a6c:	5162      	str	r2, [r4, r5]
 8006a6e:	604b      	str	r3, [r1, #4]
 8006a70:	4630      	mov	r0, r6
 8006a72:	f000 f82f 	bl	8006ad4 <__malloc_unlock>
 8006a76:	f104 000b 	add.w	r0, r4, #11
 8006a7a:	1d23      	adds	r3, r4, #4
 8006a7c:	f020 0007 	bic.w	r0, r0, #7
 8006a80:	1ac2      	subs	r2, r0, r3
 8006a82:	bf1c      	itt	ne
 8006a84:	1a1b      	subne	r3, r3, r0
 8006a86:	50a3      	strne	r3, [r4, r2]
 8006a88:	e7af      	b.n	80069ea <_malloc_r+0x22>
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	bf0c      	ite	eq
 8006a90:	f8c8 2000 	streq.w	r2, [r8]
 8006a94:	605a      	strne	r2, [r3, #4]
 8006a96:	e7eb      	b.n	8006a70 <_malloc_r+0xa8>
 8006a98:	4623      	mov	r3, r4
 8006a9a:	6864      	ldr	r4, [r4, #4]
 8006a9c:	e7ae      	b.n	80069fc <_malloc_r+0x34>
 8006a9e:	463c      	mov	r4, r7
 8006aa0:	687f      	ldr	r7, [r7, #4]
 8006aa2:	e7b6      	b.n	8006a12 <_malloc_r+0x4a>
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	d1fb      	bne.n	8006aa4 <_malloc_r+0xdc>
 8006aac:	2300      	movs	r3, #0
 8006aae:	6053      	str	r3, [r2, #4]
 8006ab0:	e7de      	b.n	8006a70 <_malloc_r+0xa8>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	6033      	str	r3, [r6, #0]
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f000 f80c 	bl	8006ad4 <__malloc_unlock>
 8006abc:	e794      	b.n	80069e8 <_malloc_r+0x20>
 8006abe:	6005      	str	r5, [r0, #0]
 8006ac0:	e7d6      	b.n	8006a70 <_malloc_r+0xa8>
 8006ac2:	bf00      	nop
 8006ac4:	200006bc 	.word	0x200006bc

08006ac8 <__malloc_lock>:
 8006ac8:	4801      	ldr	r0, [pc, #4]	@ (8006ad0 <__malloc_lock+0x8>)
 8006aca:	f7ff bf0e 	b.w	80068ea <__retarget_lock_acquire_recursive>
 8006ace:	bf00      	nop
 8006ad0:	200006b4 	.word	0x200006b4

08006ad4 <__malloc_unlock>:
 8006ad4:	4801      	ldr	r0, [pc, #4]	@ (8006adc <__malloc_unlock+0x8>)
 8006ad6:	f7ff bf09 	b.w	80068ec <__retarget_lock_release_recursive>
 8006ada:	bf00      	nop
 8006adc:	200006b4 	.word	0x200006b4

08006ae0 <__sflush_r>:
 8006ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae8:	0716      	lsls	r6, r2, #28
 8006aea:	4605      	mov	r5, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	d454      	bmi.n	8006b9a <__sflush_r+0xba>
 8006af0:	684b      	ldr	r3, [r1, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dc02      	bgt.n	8006afc <__sflush_r+0x1c>
 8006af6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dd48      	ble.n	8006b8e <__sflush_r+0xae>
 8006afc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	d045      	beq.n	8006b8e <__sflush_r+0xae>
 8006b02:	2300      	movs	r3, #0
 8006b04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b08:	682f      	ldr	r7, [r5, #0]
 8006b0a:	6a21      	ldr	r1, [r4, #32]
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	d030      	beq.n	8006b72 <__sflush_r+0x92>
 8006b10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	0759      	lsls	r1, r3, #29
 8006b16:	d505      	bpl.n	8006b24 <__sflush_r+0x44>
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b1e:	b10b      	cbz	r3, 8006b24 <__sflush_r+0x44>
 8006b20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	2300      	movs	r3, #0
 8006b26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b28:	6a21      	ldr	r1, [r4, #32]
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47b0      	blx	r6
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	d106      	bne.n	8006b42 <__sflush_r+0x62>
 8006b34:	6829      	ldr	r1, [r5, #0]
 8006b36:	291d      	cmp	r1, #29
 8006b38:	d82b      	bhi.n	8006b92 <__sflush_r+0xb2>
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006be4 <__sflush_r+0x104>)
 8006b3c:	410a      	asrs	r2, r1
 8006b3e:	07d6      	lsls	r6, r2, #31
 8006b40:	d427      	bmi.n	8006b92 <__sflush_r+0xb2>
 8006b42:	2200      	movs	r2, #0
 8006b44:	6062      	str	r2, [r4, #4]
 8006b46:	04d9      	lsls	r1, r3, #19
 8006b48:	6922      	ldr	r2, [r4, #16]
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	d504      	bpl.n	8006b58 <__sflush_r+0x78>
 8006b4e:	1c42      	adds	r2, r0, #1
 8006b50:	d101      	bne.n	8006b56 <__sflush_r+0x76>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	b903      	cbnz	r3, 8006b58 <__sflush_r+0x78>
 8006b56:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b5a:	602f      	str	r7, [r5, #0]
 8006b5c:	b1b9      	cbz	r1, 8006b8e <__sflush_r+0xae>
 8006b5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b62:	4299      	cmp	r1, r3
 8006b64:	d002      	beq.n	8006b6c <__sflush_r+0x8c>
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7ff fec2 	bl	80068f0 <_free_r>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b70:	e00d      	b.n	8006b8e <__sflush_r+0xae>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b0      	blx	r6
 8006b78:	4602      	mov	r2, r0
 8006b7a:	1c50      	adds	r0, r2, #1
 8006b7c:	d1c9      	bne.n	8006b12 <__sflush_r+0x32>
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0c6      	beq.n	8006b12 <__sflush_r+0x32>
 8006b84:	2b1d      	cmp	r3, #29
 8006b86:	d001      	beq.n	8006b8c <__sflush_r+0xac>
 8006b88:	2b16      	cmp	r3, #22
 8006b8a:	d11e      	bne.n	8006bca <__sflush_r+0xea>
 8006b8c:	602f      	str	r7, [r5, #0]
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e022      	b.n	8006bd8 <__sflush_r+0xf8>
 8006b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b96:	b21b      	sxth	r3, r3
 8006b98:	e01b      	b.n	8006bd2 <__sflush_r+0xf2>
 8006b9a:	690f      	ldr	r7, [r1, #16]
 8006b9c:	2f00      	cmp	r7, #0
 8006b9e:	d0f6      	beq.n	8006b8e <__sflush_r+0xae>
 8006ba0:	0793      	lsls	r3, r2, #30
 8006ba2:	680e      	ldr	r6, [r1, #0]
 8006ba4:	bf08      	it	eq
 8006ba6:	694b      	ldreq	r3, [r1, #20]
 8006ba8:	600f      	str	r7, [r1, #0]
 8006baa:	bf18      	it	ne
 8006bac:	2300      	movne	r3, #0
 8006bae:	eba6 0807 	sub.w	r8, r6, r7
 8006bb2:	608b      	str	r3, [r1, #8]
 8006bb4:	f1b8 0f00 	cmp.w	r8, #0
 8006bb8:	dde9      	ble.n	8006b8e <__sflush_r+0xae>
 8006bba:	6a21      	ldr	r1, [r4, #32]
 8006bbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bbe:	4643      	mov	r3, r8
 8006bc0:	463a      	mov	r2, r7
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b0      	blx	r6
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	dc08      	bgt.n	8006bdc <__sflush_r+0xfc>
 8006bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bdc:	4407      	add	r7, r0
 8006bde:	eba8 0800 	sub.w	r8, r8, r0
 8006be2:	e7e7      	b.n	8006bb4 <__sflush_r+0xd4>
 8006be4:	dfbffffe 	.word	0xdfbffffe

08006be8 <_fflush_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	690b      	ldr	r3, [r1, #16]
 8006bec:	4605      	mov	r5, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	b913      	cbnz	r3, 8006bf8 <_fflush_r+0x10>
 8006bf2:	2500      	movs	r5, #0
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	b118      	cbz	r0, 8006c02 <_fflush_r+0x1a>
 8006bfa:	6a03      	ldr	r3, [r0, #32]
 8006bfc:	b90b      	cbnz	r3, 8006c02 <_fflush_r+0x1a>
 8006bfe:	f7ff fc8f 	bl	8006520 <__sinit>
 8006c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f3      	beq.n	8006bf2 <_fflush_r+0xa>
 8006c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c0c:	07d0      	lsls	r0, r2, #31
 8006c0e:	d404      	bmi.n	8006c1a <_fflush_r+0x32>
 8006c10:	0599      	lsls	r1, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_fflush_r+0x32>
 8006c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c16:	f7ff fe68 	bl	80068ea <__retarget_lock_acquire_recursive>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	f7ff ff5f 	bl	8006ae0 <__sflush_r>
 8006c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c24:	07da      	lsls	r2, r3, #31
 8006c26:	4605      	mov	r5, r0
 8006c28:	d4e4      	bmi.n	8006bf4 <_fflush_r+0xc>
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	059b      	lsls	r3, r3, #22
 8006c2e:	d4e1      	bmi.n	8006bf4 <_fflush_r+0xc>
 8006c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c32:	f7ff fe5b 	bl	80068ec <__retarget_lock_release_recursive>
 8006c36:	e7dd      	b.n	8006bf4 <_fflush_r+0xc>

08006c38 <__swhatbuf_r>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c40:	2900      	cmp	r1, #0
 8006c42:	b096      	sub	sp, #88	@ 0x58
 8006c44:	4615      	mov	r5, r2
 8006c46:	461e      	mov	r6, r3
 8006c48:	da0d      	bge.n	8006c66 <__swhatbuf_r+0x2e>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c50:	f04f 0100 	mov.w	r1, #0
 8006c54:	bf14      	ite	ne
 8006c56:	2340      	movne	r3, #64	@ 0x40
 8006c58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	6031      	str	r1, [r6, #0]
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	b016      	add	sp, #88	@ 0x58
 8006c64:	bd70      	pop	{r4, r5, r6, pc}
 8006c66:	466a      	mov	r2, sp
 8006c68:	f000 f848 	bl	8006cfc <_fstat_r>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	dbec      	blt.n	8006c4a <__swhatbuf_r+0x12>
 8006c70:	9901      	ldr	r1, [sp, #4]
 8006c72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c7a:	4259      	negs	r1, r3
 8006c7c:	4159      	adcs	r1, r3
 8006c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c82:	e7eb      	b.n	8006c5c <__swhatbuf_r+0x24>

08006c84 <__smakebuf_r>:
 8006c84:	898b      	ldrh	r3, [r1, #12]
 8006c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c88:	079d      	lsls	r5, r3, #30
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	d507      	bpl.n	8006ca0 <__smakebuf_r+0x1c>
 8006c90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	6163      	str	r3, [r4, #20]
 8006c9c:	b003      	add	sp, #12
 8006c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca0:	ab01      	add	r3, sp, #4
 8006ca2:	466a      	mov	r2, sp
 8006ca4:	f7ff ffc8 	bl	8006c38 <__swhatbuf_r>
 8006ca8:	9f00      	ldr	r7, [sp, #0]
 8006caa:	4605      	mov	r5, r0
 8006cac:	4639      	mov	r1, r7
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7ff fe8a 	bl	80069c8 <_malloc_r>
 8006cb4:	b948      	cbnz	r0, 8006cca <__smakebuf_r+0x46>
 8006cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cba:	059a      	lsls	r2, r3, #22
 8006cbc:	d4ee      	bmi.n	8006c9c <__smakebuf_r+0x18>
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	f043 0302 	orr.w	r3, r3, #2
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	e7e2      	b.n	8006c90 <__smakebuf_r+0xc>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	6020      	str	r0, [r4, #0]
 8006cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cda:	b15b      	cbz	r3, 8006cf4 <__smakebuf_r+0x70>
 8006cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f000 f81d 	bl	8006d20 <_isatty_r>
 8006ce6:	b128      	cbz	r0, 8006cf4 <__smakebuf_r+0x70>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	431d      	orrs	r5, r3
 8006cf8:	81a5      	strh	r5, [r4, #12]
 8006cfa:	e7cf      	b.n	8006c9c <__smakebuf_r+0x18>

08006cfc <_fstat_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d07      	ldr	r5, [pc, #28]	@ (8006d1c <_fstat_r+0x20>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	4611      	mov	r1, r2
 8006d08:	602b      	str	r3, [r5, #0]
 8006d0a:	f7fb feee 	bl	8002aea <_fstat>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	d102      	bne.n	8006d18 <_fstat_r+0x1c>
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	b103      	cbz	r3, 8006d18 <_fstat_r+0x1c>
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200006b0 	.word	0x200006b0

08006d20 <_isatty_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4d06      	ldr	r5, [pc, #24]	@ (8006d3c <_isatty_r+0x1c>)
 8006d24:	2300      	movs	r3, #0
 8006d26:	4604      	mov	r4, r0
 8006d28:	4608      	mov	r0, r1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	f7fb feed 	bl	8002b0a <_isatty>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_isatty_r+0x1a>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_isatty_r+0x1a>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	200006b0 	.word	0x200006b0

08006d40 <_sbrk_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d06      	ldr	r5, [pc, #24]	@ (8006d5c <_sbrk_r+0x1c>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	f7fb fef6 	bl	8002b3c <_sbrk>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_sbrk_r+0x1a>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_sbrk_r+0x1a>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	200006b0 	.word	0x200006b0

08006d60 <fmaxf>:
 8006d60:	b508      	push	{r3, lr}
 8006d62:	ed2d 8b02 	vpush	{d8}
 8006d66:	eeb0 8a40 	vmov.f32	s16, s0
 8006d6a:	eef0 8a60 	vmov.f32	s17, s1
 8006d6e:	f000 f831 	bl	8006dd4 <__fpclassifyf>
 8006d72:	b930      	cbnz	r0, 8006d82 <fmaxf+0x22>
 8006d74:	eeb0 8a68 	vmov.f32	s16, s17
 8006d78:	eeb0 0a48 	vmov.f32	s0, s16
 8006d7c:	ecbd 8b02 	vpop	{d8}
 8006d80:	bd08      	pop	{r3, pc}
 8006d82:	eeb0 0a68 	vmov.f32	s0, s17
 8006d86:	f000 f825 	bl	8006dd4 <__fpclassifyf>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0f4      	beq.n	8006d78 <fmaxf+0x18>
 8006d8e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d96:	dded      	ble.n	8006d74 <fmaxf+0x14>
 8006d98:	e7ee      	b.n	8006d78 <fmaxf+0x18>

08006d9a <fminf>:
 8006d9a:	b508      	push	{r3, lr}
 8006d9c:	ed2d 8b02 	vpush	{d8}
 8006da0:	eeb0 8a40 	vmov.f32	s16, s0
 8006da4:	eef0 8a60 	vmov.f32	s17, s1
 8006da8:	f000 f814 	bl	8006dd4 <__fpclassifyf>
 8006dac:	b930      	cbnz	r0, 8006dbc <fminf+0x22>
 8006dae:	eeb0 8a68 	vmov.f32	s16, s17
 8006db2:	eeb0 0a48 	vmov.f32	s0, s16
 8006db6:	ecbd 8b02 	vpop	{d8}
 8006dba:	bd08      	pop	{r3, pc}
 8006dbc:	eeb0 0a68 	vmov.f32	s0, s17
 8006dc0:	f000 f808 	bl	8006dd4 <__fpclassifyf>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d0f4      	beq.n	8006db2 <fminf+0x18>
 8006dc8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd0:	d5ed      	bpl.n	8006dae <fminf+0x14>
 8006dd2:	e7ee      	b.n	8006db2 <fminf+0x18>

08006dd4 <__fpclassifyf>:
 8006dd4:	ee10 3a10 	vmov	r3, s0
 8006dd8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8006ddc:	d00d      	beq.n	8006dfa <__fpclassifyf+0x26>
 8006dde:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8006de2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006de6:	d30a      	bcc.n	8006dfe <__fpclassifyf+0x2a>
 8006de8:	4b07      	ldr	r3, [pc, #28]	@ (8006e08 <__fpclassifyf+0x34>)
 8006dea:	1e42      	subs	r2, r0, #1
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d908      	bls.n	8006e02 <__fpclassifyf+0x2e>
 8006df0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8006df4:	4258      	negs	r0, r3
 8006df6:	4158      	adcs	r0, r3
 8006df8:	4770      	bx	lr
 8006dfa:	2002      	movs	r0, #2
 8006dfc:	4770      	bx	lr
 8006dfe:	2004      	movs	r0, #4
 8006e00:	4770      	bx	lr
 8006e02:	2003      	movs	r0, #3
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	007ffffe 	.word	0x007ffffe

08006e0c <round>:
 8006e0c:	ec51 0b10 	vmov	r0, r1, d0
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8006e16:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8006e1a:	2a13      	cmp	r2, #19
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4605      	mov	r5, r0
 8006e20:	dc1b      	bgt.n	8006e5a <round+0x4e>
 8006e22:	2a00      	cmp	r2, #0
 8006e24:	da0b      	bge.n	8006e3e <round+0x32>
 8006e26:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	bf04      	itt	eq
 8006e2e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e32:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8006e36:	2200      	movs	r2, #0
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	e015      	b.n	8006e6a <round+0x5e>
 8006e3e:	4c15      	ldr	r4, [pc, #84]	@ (8006e94 <round+0x88>)
 8006e40:	4114      	asrs	r4, r2
 8006e42:	ea04 0601 	and.w	r6, r4, r1
 8006e46:	4306      	orrs	r6, r0
 8006e48:	d00f      	beq.n	8006e6a <round+0x5e>
 8006e4a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8006e4e:	fa41 f202 	asr.w	r2, r1, r2
 8006e52:	4413      	add	r3, r2
 8006e54:	ea23 0304 	bic.w	r3, r3, r4
 8006e58:	e7ed      	b.n	8006e36 <round+0x2a>
 8006e5a:	2a33      	cmp	r2, #51	@ 0x33
 8006e5c:	dd08      	ble.n	8006e70 <round+0x64>
 8006e5e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006e62:	d102      	bne.n	8006e6a <round+0x5e>
 8006e64:	4602      	mov	r2, r0
 8006e66:	f7f9 faff 	bl	8000468 <__adddf3>
 8006e6a:	ec41 0b10 	vmov	d0, r0, r1
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8006e74:	f04f 34ff 	mov.w	r4, #4294967295
 8006e78:	40f4      	lsrs	r4, r6
 8006e7a:	4204      	tst	r4, r0
 8006e7c:	d0f5      	beq.n	8006e6a <round+0x5e>
 8006e7e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8006e82:	2201      	movs	r2, #1
 8006e84:	408a      	lsls	r2, r1
 8006e86:	1952      	adds	r2, r2, r5
 8006e88:	bf28      	it	cs
 8006e8a:	3301      	addcs	r3, #1
 8006e8c:	ea22 0204 	bic.w	r2, r2, r4
 8006e90:	e7d2      	b.n	8006e38 <round+0x2c>
 8006e92:	bf00      	nop
 8006e94:	000fffff 	.word	0x000fffff

08006e98 <_init>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr

08006ea4 <_fini>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	bf00      	nop
 8006ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eaa:	bc08      	pop	{r3}
 8006eac:	469e      	mov	lr, r3
 8006eae:	4770      	bx	lr
