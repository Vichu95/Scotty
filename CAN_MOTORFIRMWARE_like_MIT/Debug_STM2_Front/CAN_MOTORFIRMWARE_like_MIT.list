
CAN_MOTORFIRMWARE_like_MIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006564  08006564  00007564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006584  08006584  00008094  2**0
                  CONTENTS
  4 .ARM          00000008  08006584  08006584  00007584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800658c  0800658c  00008094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800658c  0800658c  0000758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006594  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  20000094  08006628  00008094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08006628  000086d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f82e  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025dc  00000000  00000000  000178f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00019ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0c  00000000  00000000  0001ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002355d  00000000  00000000  0001ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b2f  00000000  00000000  0003efd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d545f  00000000  00000000  00050b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125f5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004884  00000000  00000000  00125fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0012a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000094 	.word	0x20000094
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800654c 	.word	0x0800654c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000098 	.word	0x20000098
 8000200:	0800654c 	.word	0x0800654c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t State_spi;


// CAN Rx Callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData_buf);
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000550:	2100      	movs	r1, #0
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f002 fa71 	bl	8002a3a <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	2b08      	cmp	r3, #8
 800055e:	d102      	bne.n	8000566 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		receivedCanBus=0;
 8000560:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
	}
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000550 	.word	0x20000550
 8000574:	2000011c 	.word	0x2000011c
 8000578:	20000024 	.word	0x20000024

0800057c <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, CAN_RxData_buf);
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000586:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000588:	2101      	movs	r1, #1
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f002 fa55 	bl	8002a3a <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000592:	691b      	ldr	r3, [r3, #16]
 8000594:	2b08      	cmp	r3, #8
 8000596:	d102      	bne.n	800059e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		receivedCanBus=1;
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
	}
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000550 	.word	0x20000550
 80005ac:	2000011c 	.word	0x2000011c
 80005b0:	20000024 	.word	0x20000024

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b8:	f001 fed2 	bl	8002360 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 80005bc:	f001 f8ba 	bl	8001734 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c0:	f001 face 	bl	8001b60 <MX_GPIO_Init>
	MX_DMA_Init();
 80005c4:	f001 faa4 	bl	8001b10 <MX_DMA_Init>
	MX_CAN1_Init();
 80005c8:	f001 f926 	bl	8001818 <MX_CAN1_Init>
	MX_TIM1_Init();
 80005cc:	f001 fa00 	bl	80019d0 <MX_TIM1_Init>
	MX_SPI1_Init();
 80005d0:	f001 f9ca 	bl	8001968 <MX_SPI1_Init>
	MX_CAN2_Init();
 80005d4:	f001 f974 	bl	80018c0 <MX_CAN2_Init>
	MX_TIM8_Init();
 80005d8:	f001 fa4a 	bl	8001a70 <MX_TIM8_Init>

	HAL_CAN_Start(&hcan1);
 80005dc:	482c      	ldr	r0, [pc, #176]	@ (8000690 <main+0xdc>)
 80005de:	f002 f90d 	bl	80027fc <HAL_CAN_Start>
	HAL_CAN_Start(&hcan2);
 80005e2:	482c      	ldr	r0, [pc, #176]	@ (8000694 <main+0xe0>)
 80005e4:	f002 f90a 	bl	80027fc <HAL_CAN_Start>
	HAL_TIM_Base_Start(&htim1);
 80005e8:	482b      	ldr	r0, [pc, #172]	@ (8000698 <main+0xe4>)
 80005ea:	f004 ffc7 	bl	800557c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80005ee:	482b      	ldr	r0, [pc, #172]	@ (800069c <main+0xe8>)
 80005f0:	f004 ffc4 	bl	800557c <HAL_TIM_Base_Start>


	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005f4:	2102      	movs	r1, #2
 80005f6:	4826      	ldr	r0, [pc, #152]	@ (8000690 <main+0xdc>)
 80005f8:	f002 fb31 	bl	8002c5e <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 80005fc:	2110      	movs	r1, #16
 80005fe:	4825      	ldr	r0, [pc, #148]	@ (8000694 <main+0xe0>)
 8000600:	f002 fb2d 	bl	8002c5e <HAL_CAN_ActivateNotification>


	TxHeader.DLC = 8;  // data length
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <main+0xec>)
 8000606:	2208      	movs	r2, #8
 8000608:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <main+0xec>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <main+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]



	printf("start\n");
 8000616:	4823      	ldr	r0, [pc, #140]	@ (80006a4 <main+0xf0>)
 8000618:	f005 fbae 	bl	8005d78 <puts>
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 800061c:	2342      	movs	r3, #66	@ 0x42
 800061e:	4a22      	ldr	r2, [pc, #136]	@ (80006a8 <main+0xf4>)
 8000620:	4922      	ldr	r1, [pc, #136]	@ (80006ac <main+0xf8>)
 8000622:	4823      	ldr	r0, [pc, #140]	@ (80006b0 <main+0xfc>)
 8000624:	f004 fba8 	bl	8004d78 <HAL_SPI_TransmitReceive_IT>




	// START MOTOR
	motor_mode(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000628:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <main+0x100>)
 800062a:	491d      	ldr	r1, [pc, #116]	@ (80006a0 <main+0xec>)
 800062c:	2001      	movs	r0, #1
 800062e:	f000 ff39 	bl	80014a4 <motor_mode>
	motor_mode(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000632:	4a20      	ldr	r2, [pc, #128]	@ (80006b4 <main+0x100>)
 8000634:	491a      	ldr	r1, [pc, #104]	@ (80006a0 <main+0xec>)
 8000636:	2002      	movs	r0, #2
 8000638:	f000 ff34 	bl	80014a4 <motor_mode>
	motor_mode(Knee_CANID, &TxHeader, CAN_TxData_buf);
 800063c:	4a1d      	ldr	r2, [pc, #116]	@ (80006b4 <main+0x100>)
 800063e:	4918      	ldr	r1, [pc, #96]	@ (80006a0 <main+0xec>)
 8000640:	2003      	movs	r0, #3
 8000642:	f000 ff2f 	bl	80014a4 <motor_mode>
 	delay_us(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064a:	f001 f81d 	bl	8001688 <delay_us>




	// Only CAN
	count=1;
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <main+0x104>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
	  while (count==1)
 8000654:	e006      	b.n	8000664 <main+0xb0>
	  {


			can_send_receive();
 8000656:	f000 f8c5 	bl	80007e4 <can_send_receive>
			time=__HAL_TIM_GET_COUNTER(&htim8);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <main+0xe8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000660:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <main+0x108>)
 8000662:	6013      	str	r3, [r2, #0]
	  while (count==1)
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <main+0x104>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d0f4      	beq.n	8000656 <main+0xa2>
//
//	}//end of while


	// STOP MOTOR
	exit_mode(Abad_CANID, &TxHeader, CAN_TxData_buf);
 800066c:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <main+0x100>)
 800066e:	490c      	ldr	r1, [pc, #48]	@ (80006a0 <main+0xec>)
 8000670:	2001      	movs	r0, #1
 8000672:	f000 ff5d 	bl	8001530 <exit_mode>
	exit_mode(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <main+0x100>)
 8000678:	4909      	ldr	r1, [pc, #36]	@ (80006a0 <main+0xec>)
 800067a:	2002      	movs	r0, #2
 800067c:	f000 ff58 	bl	8001530 <exit_mode>
	exit_mode(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000680:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <main+0x100>)
 8000682:	4907      	ldr	r1, [pc, #28]	@ (80006a0 <main+0xec>)
 8000684:	2003      	movs	r0, #3
 8000686:	f000 ff53 	bl	8001530 <exit_mode>
 800068a:	2300      	movs	r3, #0


}// end of main
 800068c:	4618      	mov	r0, r3
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000b4 	.word	0x200000b4
 8000694:	200000dc 	.word	0x200000dc
 8000698:	20000254 	.word	0x20000254
 800069c:	2000029c 	.word	0x2000029c
 80006a0:	20000104 	.word	0x20000104
 80006a4:	08006564 	.word	0x08006564
 80006a8:	200004c4 	.word	0x200004c4
 80006ac:	20000440 	.word	0x20000440
 80006b0:	2000013c 	.word	0x2000013c
 80006b4:	20000548 	.word	0x20000548
 80006b8:	20000028 	.word	0x20000028
 80006bc:	20000574 	.word	0x20000574

080006c0 <HAL_SPI_TxRxCpltCallback>:
	}

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	//unpack the received bytes from rx buffer into †he valuesrec structur
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==0)
 80006c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006cc:	482c      	ldr	r0, [pc, #176]	@ (8000780 <HAL_SPI_TxRxCpltCallback+0xc0>)
 80006ce:	f003 fc47 	bl	8003f60 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d149      	bne.n	800076c <HAL_SPI_TxRxCpltCallback+0xac>
	{
		for(int i = 0; i < RX_LEN; i++)
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e00b      	b.n	80006f6 <HAL_SPI_TxRxCpltCallback+0x36>
		{
			((uint16_t*) &valuesrec)[i] = spi_rx_buffer[i];
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4a28      	ldr	r2, [pc, #160]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 80006e4:	4413      	add	r3, r2
 80006e6:	4928      	ldr	r1, [pc, #160]	@ (8000788 <HAL_SPI_TxRxCpltCallback+0xc8>)
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006ee:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < RX_LEN; i++)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b41      	cmp	r3, #65	@ 0x41
 80006fa:	ddf0      	ble.n	80006de <HAL_SPI_TxRxCpltCallback+0x1e>
		}

		//if the communication has no issues the values will write in the control structure
		checksum_calc = xor_checksum((uint32_t*)&valuesrec,32);
 80006fc:	2120      	movs	r1, #32
 80006fe:	4821      	ldr	r0, [pc, #132]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000700:	f000 ffdc 	bl	80016bc <xor_checksum>
 8000704:	4603      	mov	r3, r0
 8000706:	4a21      	ldr	r2, [pc, #132]	@ (800078c <HAL_SPI_TxRxCpltCallback+0xcc>)
 8000708:	6013      	str	r3, [r2, #0]

		//Retrieve the current control Mode stored at higher 16 bits and reset flags to its value
		currentControlMode = (valuesrec.flags[0]>>16);
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 800070c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800070e:	0c1b      	lsrs	r3, r3, #16
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <HAL_SPI_TxRxCpltCallback+0xd0>)
 8000712:	6013      	str	r3, [r2, #0]
		valuesrec.flags[0] = (valuesrec.flags[0] & 0xFFFF);
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000718:	b29b      	uxth	r3, r3
 800071a:	4a1a      	ldr	r2, [pc, #104]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 800071c:	6793      	str	r3, [r2, #120]	@ 0x78
		valuesrec.flags[1] = (valuesrec.flags[1] & 0xFFFF);
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000722:	b29b      	uxth	r3, r3
 8000724:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000726:	67d3      	str	r3, [r2, #124]	@ 0x7c

		if(valuesrec.checksum == checksum_calc && (valuesrec.flags[0]<=3 || valuesrec.flags[1]<=3))
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 800072a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <HAL_SPI_TxRxCpltCallback+0xcc>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d11a      	bne.n	800076c <HAL_SPI_TxRxCpltCallback+0xac>
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800073a:	2b03      	cmp	r3, #3
 800073c:	d903      	bls.n	8000746 <HAL_SPI_TxRxCpltCallback+0x86>
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000742:	2b03      	cmp	r3, #3
 8000744:	d812      	bhi.n	800076c <HAL_SPI_TxRxCpltCallback+0xac>
		{
			for(int i = 0; i < CONTROL_LEN; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	e00c      	b.n	8000766 <HAL_SPI_TxRxCpltCallback+0xa6>
			{
				((uint16_t*) &control)[i] = ((uint16_t*) &valuesrec)[i];
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000752:	441a      	add	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	490e      	ldr	r1, [pc, #56]	@ (8000794 <HAL_SPI_TxRxCpltCallback+0xd4>)
 800075a:	440b      	add	r3, r1
 800075c:	8812      	ldrh	r2, [r2, #0]
 800075e:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < CONTROL_LEN; i++)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3301      	adds	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b41      	cmp	r3, #65	@ 0x41
 800076a:	ddef      	ble.n	800074c <HAL_SPI_TxRxCpltCallback+0x8c>
		}

	}

	// Disable the SPI //vishnu : I think this actually enables SPI callback for next
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 800076c:	2342      	movs	r3, #66	@ 0x42
 800076e:	4a06      	ldr	r2, [pc, #24]	@ (8000788 <HAL_SPI_TxRxCpltCallback+0xc8>)
 8000770:	4909      	ldr	r1, [pc, #36]	@ (8000798 <HAL_SPI_TxRxCpltCallback+0xd8>)
 8000772:	480a      	ldr	r0, [pc, #40]	@ (800079c <HAL_SPI_TxRxCpltCallback+0xdc>)
 8000774:	f004 fb00 	bl	8004d78 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40020000 	.word	0x40020000
 8000784:	200002e4 	.word	0x200002e4
 8000788:	200004c4 	.word	0x200004c4
 800078c:	20000558 	.word	0x20000558
 8000790:	20000018 	.word	0x20000018
 8000794:	20000368 	.word	0x20000368
 8000798:	20000440 	.word	0x20000440
 800079c:	2000013c 	.word	0x2000013c

080007a0 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback (SPI_HandleTypeDef* hspi){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	CallbackError_spi=HAL_SPI_GetError(&hspi1);
 80007a8:	480a      	ldr	r0, [pc, #40]	@ (80007d4 <HAL_SPI_ErrorCallback+0x34>)
 80007aa:	f004 fc77 	bl	800509c <HAL_SPI_GetError>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <HAL_SPI_ErrorCallback+0x38>)
 80007b2:	6013      	str	r3, [r2, #0]

	HAL_SPI_DeInit(&hspi1);
 80007b4:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <HAL_SPI_ErrorCallback+0x34>)
 80007b6:	f004 fab6 	bl	8004d26 <HAL_SPI_DeInit>
	HAL_SPI_Init(&hspi1);
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <HAL_SPI_ErrorCallback+0x34>)
 80007bc:	f004 fa2a 	bl	8004c14 <HAL_SPI_Init>

	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 80007c0:	2342      	movs	r3, #66	@ 0x42
 80007c2:	4a06      	ldr	r2, [pc, #24]	@ (80007dc <HAL_SPI_ErrorCallback+0x3c>)
 80007c4:	4906      	ldr	r1, [pc, #24]	@ (80007e0 <HAL_SPI_ErrorCallback+0x40>)
 80007c6:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <HAL_SPI_ErrorCallback+0x34>)
 80007c8:	f004 fad6 	bl	8004d78 <HAL_SPI_TransmitReceive_IT>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000013c 	.word	0x2000013c
 80007d8:	20000578 	.word	0x20000578
 80007dc:	200004c4 	.word	0x200004c4
 80007e0:	20000440 	.word	0x20000440

080007e4 <can_send_receive>:

							/***************************************************
							 *  				 C A N
							 ***************************************************/

void can_send_receive(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

	// Reset the flags before each CAN communication
	state.flags[0] = 0;
 80007e8:	4b48      	ldr	r3, [pc, #288]	@ (800090c <can_send_receive+0x128>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
	state.flags[1] = 0;
 80007ee:	4b47      	ldr	r3, [pc, #284]	@ (800090c <can_send_receive+0x128>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	635a      	str	r2, [r3, #52]	@ 0x34

	CAN=0;
 80007f4:	4b46      	ldr	r3, [pc, #280]	@ (8000910 <can_send_receive+0x12c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	pack_message(Abad_CANID, &TxHeader, CAN_TxData_buf);
 80007fa:	4a46      	ldr	r2, [pc, #280]	@ (8000914 <can_send_receive+0x130>)
 80007fc:	4946      	ldr	r1, [pc, #280]	@ (8000918 <can_send_receive+0x134>)
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 f896 	bl	8000930 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000804:	4b45      	ldr	r3, [pc, #276]	@ (800091c <can_send_receive+0x138>)
 8000806:	4a43      	ldr	r2, [pc, #268]	@ (8000914 <can_send_receive+0x130>)
 8000808:	4943      	ldr	r1, [pc, #268]	@ (8000918 <can_send_receive+0x134>)
 800080a:	4845      	ldr	r0, [pc, #276]	@ (8000920 <can_send_receive+0x13c>)
 800080c:	f002 f83a 	bl	8002884 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8000810:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000814:	f000 ff38 	bl	8001688 <delay_us>
	if (receivedCanBus==0){
 8000818:	4b42      	ldr	r3, [pc, #264]	@ (8000924 <can_send_receive+0x140>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <can_send_receive+0x42>
		unpack_replay(CAN_RxData_buf);
 8000820:	4841      	ldr	r0, [pc, #260]	@ (8000928 <can_send_receive+0x144>)
 8000822:	f000 fc15 	bl	8001050 <unpack_replay>
	}
	pack_message(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000826:	4a3b      	ldr	r2, [pc, #236]	@ (8000914 <can_send_receive+0x130>)
 8000828:	493b      	ldr	r1, [pc, #236]	@ (8000918 <can_send_receive+0x134>)
 800082a:	2002      	movs	r0, #2
 800082c:	f000 f880 	bl	8000930 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8000830:	4b3a      	ldr	r3, [pc, #232]	@ (800091c <can_send_receive+0x138>)
 8000832:	4a38      	ldr	r2, [pc, #224]	@ (8000914 <can_send_receive+0x130>)
 8000834:	4938      	ldr	r1, [pc, #224]	@ (8000918 <can_send_receive+0x134>)
 8000836:	483a      	ldr	r0, [pc, #232]	@ (8000920 <can_send_receive+0x13c>)
 8000838:	f002 f824 	bl	8002884 <HAL_CAN_AddTxMessage>
    delay_us(300);
 800083c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000840:	f000 ff22 	bl	8001688 <delay_us>
	if (receivedCanBus==0){
 8000844:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <can_send_receive+0x140>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <can_send_receive+0x6e>
		unpack_replay(CAN_RxData_buf);
 800084c:	4836      	ldr	r0, [pc, #216]	@ (8000928 <can_send_receive+0x144>)
 800084e:	f000 fbff 	bl	8001050 <unpack_replay>
	}
	pack_message(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000852:	4a30      	ldr	r2, [pc, #192]	@ (8000914 <can_send_receive+0x130>)
 8000854:	4930      	ldr	r1, [pc, #192]	@ (8000918 <can_send_receive+0x134>)
 8000856:	2003      	movs	r0, #3
 8000858:	f000 f86a 	bl	8000930 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 800085c:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <can_send_receive+0x138>)
 800085e:	4a2d      	ldr	r2, [pc, #180]	@ (8000914 <can_send_receive+0x130>)
 8000860:	492d      	ldr	r1, [pc, #180]	@ (8000918 <can_send_receive+0x134>)
 8000862:	482f      	ldr	r0, [pc, #188]	@ (8000920 <can_send_receive+0x13c>)
 8000864:	f002 f80e 	bl	8002884 <HAL_CAN_AddTxMessage>
    delay_us(300);
 8000868:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800086c:	f000 ff0c 	bl	8001688 <delay_us>
	if (receivedCanBus==0){
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <can_send_receive+0x140>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <can_send_receive+0x9a>
		unpack_replay(CAN_RxData_buf);
 8000878:	482b      	ldr	r0, [pc, #172]	@ (8000928 <can_send_receive+0x144>)
 800087a:	f000 fbe9 	bl	8001050 <unpack_replay>
	}

	CAN=1;
 800087e:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <can_send_receive+0x12c>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
	pack_message(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000884:	4a23      	ldr	r2, [pc, #140]	@ (8000914 <can_send_receive+0x130>)
 8000886:	4924      	ldr	r1, [pc, #144]	@ (8000918 <can_send_receive+0x134>)
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f851 	bl	8000930 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 800088e:	4b23      	ldr	r3, [pc, #140]	@ (800091c <can_send_receive+0x138>)
 8000890:	4a20      	ldr	r2, [pc, #128]	@ (8000914 <can_send_receive+0x130>)
 8000892:	4921      	ldr	r1, [pc, #132]	@ (8000918 <can_send_receive+0x134>)
 8000894:	4825      	ldr	r0, [pc, #148]	@ (800092c <can_send_receive+0x148>)
 8000896:	f001 fff5 	bl	8002884 <HAL_CAN_AddTxMessage>
    delay_us(300);
 800089a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800089e:	f000 fef3 	bl	8001688 <delay_us>
	if (receivedCanBus==1){
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <can_send_receive+0x140>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d102      	bne.n	80008b0 <can_send_receive+0xcc>
		unpack_replay(CAN_RxData_buf);
 80008aa:	481f      	ldr	r0, [pc, #124]	@ (8000928 <can_send_receive+0x144>)
 80008ac:	f000 fbd0 	bl	8001050 <unpack_replay>
	}
	pack_message(Hip_CANID, &TxHeader, CAN_TxData_buf);
 80008b0:	4a18      	ldr	r2, [pc, #96]	@ (8000914 <can_send_receive+0x130>)
 80008b2:	4919      	ldr	r1, [pc, #100]	@ (8000918 <can_send_receive+0x134>)
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 f83b 	bl	8000930 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <can_send_receive+0x138>)
 80008bc:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <can_send_receive+0x130>)
 80008be:	4916      	ldr	r1, [pc, #88]	@ (8000918 <can_send_receive+0x134>)
 80008c0:	481a      	ldr	r0, [pc, #104]	@ (800092c <can_send_receive+0x148>)
 80008c2:	f001 ffdf 	bl	8002884 <HAL_CAN_AddTxMessage>
    delay_us(300);
 80008c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008ca:	f000 fedd 	bl	8001688 <delay_us>
	if (receivedCanBus==1){
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <can_send_receive+0x140>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d102      	bne.n	80008dc <can_send_receive+0xf8>
		unpack_replay(CAN_RxData_buf);
 80008d6:	4814      	ldr	r0, [pc, #80]	@ (8000928 <can_send_receive+0x144>)
 80008d8:	f000 fbba 	bl	8001050 <unpack_replay>
	}
	pack_message(Knee_CANID, &TxHeader, CAN_TxData_buf);
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <can_send_receive+0x130>)
 80008de:	490e      	ldr	r1, [pc, #56]	@ (8000918 <can_send_receive+0x134>)
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f825 	bl	8000930 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <can_send_receive+0x138>)
 80008e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <can_send_receive+0x130>)
 80008ea:	490b      	ldr	r1, [pc, #44]	@ (8000918 <can_send_receive+0x134>)
 80008ec:	480f      	ldr	r0, [pc, #60]	@ (800092c <can_send_receive+0x148>)
 80008ee:	f001 ffc9 	bl	8002884 <HAL_CAN_AddTxMessage>
    delay_us(300);
 80008f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008f6:	f000 fec7 	bl	8001688 <delay_us>
	if (receivedCanBus==1){
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <can_send_receive+0x140>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d102      	bne.n	8000908 <can_send_receive+0x124>
		unpack_replay(CAN_RxData_buf);
 8000902:	4809      	ldr	r0, [pc, #36]	@ (8000928 <can_send_receive+0x144>)
 8000904:	f000 fba4 	bl	8001050 <unpack_replay>
	}

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200003ec 	.word	0x200003ec
 8000910:	200000b0 	.word	0x200000b0
 8000914:	20000548 	.word	0x20000548
 8000918:	20000104 	.word	0x20000104
 800091c:	20000138 	.word	0x20000138
 8000920:	200000b4 	.word	0x200000b4
 8000924:	20000024 	.word	0x20000024
 8000928:	20000550 	.word	0x20000550
 800092c:	200000dc 	.word	0x200000dc

08000930 <pack_message>:

/////////////////////////pack and unpack//////////////////////////

void pack_message(uint8_t ID,CAN_TxHeaderTypeDef*Header,uint8_t*Data)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	73fb      	strb	r3, [r7, #15]

	if(ID == Abad_CANID)
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b01      	cmp	r3, #1
 8000942:	f040 80c0 	bne.w	8000ac6 <pack_message+0x196>
	{
		p_in 	= (control.ab_p[CAN] * ab_mitdirection[CAN]);
 8000946:	4bbd      	ldr	r3, [pc, #756]	@ (8000c3c <pack_message+0x30c>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4abd      	ldr	r2, [pc, #756]	@ (8000c40 <pack_message+0x310>)
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	ed93 7a00 	vldr	s14, [r3]
 8000954:	4bb9      	ldr	r3, [pc, #740]	@ (8000c3c <pack_message+0x30c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4bba      	ldr	r3, [pc, #744]	@ (8000c44 <pack_message+0x314>)
 800095c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000960:	ee07 3a90 	vmov	s15, r3
 8000964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800096c:	4bb6      	ldr	r3, [pc, #728]	@ (8000c48 <pack_message+0x318>)
 800096e:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.ab_v[CAN] * ab_mitdirection[CAN]);
 8000972:	4bb2      	ldr	r3, [pc, #712]	@ (8000c3c <pack_message+0x30c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4ab2      	ldr	r2, [pc, #712]	@ (8000c40 <pack_message+0x310>)
 8000978:	3306      	adds	r3, #6
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	ed93 7a00 	vldr	s14, [r3]
 8000982:	4bae      	ldr	r3, [pc, #696]	@ (8000c3c <pack_message+0x30c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4bae      	ldr	r3, [pc, #696]	@ (8000c44 <pack_message+0x314>)
 800098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099a:	4bac      	ldr	r3, [pc, #688]	@ (8000c4c <pack_message+0x31c>)
 800099c:	edc3 7a00 	vstr	s15, [r3]
		kp_in 	=  control.ab_kp[CAN];   //stifness
 80009a0:	4ba6      	ldr	r3, [pc, #664]	@ (8000c3c <pack_message+0x30c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4aa6      	ldr	r2, [pc, #664]	@ (8000c40 <pack_message+0x310>)
 80009a6:	330c      	adds	r3, #12
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4aa8      	ldr	r2, [pc, #672]	@ (8000c50 <pack_message+0x320>)
 80009b0:	6013      	str	r3, [r2, #0]
		kd_in 	=  control.ab_kd[CAN];     //damper
 80009b2:	4ba2      	ldr	r3, [pc, #648]	@ (8000c3c <pack_message+0x30c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4aa2      	ldr	r2, [pc, #648]	@ (8000c40 <pack_message+0x310>)
 80009b8:	3312      	adds	r3, #18
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4aa4      	ldr	r2, [pc, #656]	@ (8000c54 <pack_message+0x324>)
 80009c2:	6013      	str	r3, [r2, #0]
		t_in 	= (control.ab_t[CAN] * ab_mitdirection[CAN]);
 80009c4:	4b9d      	ldr	r3, [pc, #628]	@ (8000c3c <pack_message+0x30c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4a9d      	ldr	r2, [pc, #628]	@ (8000c40 <pack_message+0x310>)
 80009ca:	3318      	adds	r3, #24
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	ed93 7a00 	vldr	s14, [r3]
 80009d4:	4b99      	ldr	r3, [pc, #612]	@ (8000c3c <pack_message+0x30c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b9a      	ldr	r3, [pc, #616]	@ (8000c44 <pack_message+0x314>)
 80009dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e0:	ee07 3a90 	vmov	s15, r3
 80009e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ec:	4b9a      	ldr	r3, [pc, #616]	@ (8000c58 <pack_message+0x328>)
 80009ee:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.ab_p[CAN],state.ab_p[CAN],AB_LIM_P, AB_LIM_N))
 80009f2:	4b92      	ldr	r3, [pc, #584]	@ (8000c3c <pack_message+0x30c>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4a91      	ldr	r2, [pc, #580]	@ (8000c40 <pack_message+0x310>)
 80009fa:	441a      	add	r2, r3
 80009fc:	4b8f      	ldr	r3, [pc, #572]	@ (8000c3c <pack_message+0x30c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4996      	ldr	r1, [pc, #600]	@ (8000c5c <pack_message+0x32c>)
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	440b      	add	r3, r1
 8000a06:	edd3 7a00 	vldr	s15, [r3]
 8000a0a:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8000c60 <pack_message+0x330>
 8000a0e:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8000c64 <pack_message+0x334>
 8000a12:	eeb0 0a67 	vmov.f32	s0, s15
 8000a16:	4610      	mov	r0, r2
 8000a18:	f000 fc6c 	bl	80012f4 <softstop_joint>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d033      	beq.n	8000a8a <pack_message+0x15a>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b01;
 8000a22:	4b86      	ldr	r3, [pc, #536]	@ (8000c3c <pack_message+0x30c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4a8d      	ldr	r2, [pc, #564]	@ (8000c5c <pack_message+0x32c>)
 8000a28:	330c      	adds	r3, #12
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	4a83      	ldr	r2, [pc, #524]	@ (8000c3c <pack_message+0x30c>)
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	4610      	mov	r0, r2
 8000a34:	f043 0201 	orr.w	r2, r3, #1
 8000a38:	4988      	ldr	r1, [pc, #544]	@ (8000c5c <pack_message+0x32c>)
 8000a3a:	f100 030c 	add.w	r3, r0, #12
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = p_in * ab_mitdirection[CAN]; // Direction update
 8000a42:	4b7e      	ldr	r3, [pc, #504]	@ (8000c3c <pack_message+0x30c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b7e      	ldr	r3, [pc, #504]	@ (8000c44 <pack_message+0x314>)
 8000a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a56:	4b7c      	ldr	r3, [pc, #496]	@ (8000c48 <pack_message+0x318>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a60:	4b79      	ldr	r3, [pc, #484]	@ (8000c48 <pack_message+0x318>)
 8000a62:	edc3 7a00 	vstr	s15, [r3]
			t_in = t_in * ab_mitdirection[CAN]; // Direction update
 8000a66:	4b75      	ldr	r3, [pc, #468]	@ (8000c3c <pack_message+0x30c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b75      	ldr	r3, [pc, #468]	@ (8000c44 <pack_message+0x314>)
 8000a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a7a:	4b77      	ldr	r3, [pc, #476]	@ (8000c58 <pack_message+0x328>)
 8000a7c:	edd3 7a00 	vldr	s15, [r3]
 8000a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a84:	4b74      	ldr	r3, [pc, #464]	@ (8000c58 <pack_message+0x328>)
 8000a86:	edc3 7a00 	vstr	s15, [r3]
		}

		// Safety Limit
		safetycheck_reqTrq(state.ab_p[CAN], state.ab_v[CAN], torque.ab_t[CAN]);
 8000a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8000c3c <pack_message+0x30c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4a73      	ldr	r2, [pc, #460]	@ (8000c5c <pack_message+0x32c>)
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	edd3 7a00 	vldr	s15, [r3]
 8000a98:	4b68      	ldr	r3, [pc, #416]	@ (8000c3c <pack_message+0x30c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4a6f      	ldr	r2, [pc, #444]	@ (8000c5c <pack_message+0x32c>)
 8000a9e:	3306      	adds	r3, #6
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	ed93 7a00 	vldr	s14, [r3]
 8000aa8:	4b64      	ldr	r3, [pc, #400]	@ (8000c3c <pack_message+0x30c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4a6e      	ldr	r2, [pc, #440]	@ (8000c68 <pack_message+0x338>)
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	edd3 6a00 	vldr	s13, [r3]
 8000ab6:	eeb0 1a66 	vmov.f32	s2, s13
 8000aba:	eef0 0a47 	vmov.f32	s1, s14
 8000abe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac2:	f000 fc8f 	bl	80013e4 <safetycheck_reqTrq>
	}
	if(ID == Hip_CANID)
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	f040 80e5 	bne.w	8000c98 <pack_message+0x368>
	{
		p_in 	= (control.hip_p[CAN] * hip_mitdirection[CAN]);
 8000ace:	4b5b      	ldr	r3, [pc, #364]	@ (8000c3c <pack_message+0x30c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4a5b      	ldr	r2, [pc, #364]	@ (8000c40 <pack_message+0x310>)
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	ed93 7a00 	vldr	s14, [r3]
 8000ade:	4b57      	ldr	r3, [pc, #348]	@ (8000c3c <pack_message+0x30c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b61      	ldr	r3, [pc, #388]	@ (8000c6c <pack_message+0x33c>)
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af6:	4b54      	ldr	r3, [pc, #336]	@ (8000c48 <pack_message+0x318>)
 8000af8:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.hip_v[CAN] * hip_mitdirection[CAN]);
 8000afc:	4b4f      	ldr	r3, [pc, #316]	@ (8000c3c <pack_message+0x30c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4a4f      	ldr	r2, [pc, #316]	@ (8000c40 <pack_message+0x310>)
 8000b02:	3308      	adds	r3, #8
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	ed93 7a00 	vldr	s14, [r3]
 8000b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c3c <pack_message+0x30c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b56      	ldr	r3, [pc, #344]	@ (8000c6c <pack_message+0x33c>)
 8000b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b24:	4b49      	ldr	r3, [pc, #292]	@ (8000c4c <pack_message+0x31c>)
 8000b26:	edc3 7a00 	vstr	s15, [r3]
		kp_in	=  control.hip_kp[CAN];   //stifness
 8000b2a:	4b44      	ldr	r3, [pc, #272]	@ (8000c3c <pack_message+0x30c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4a44      	ldr	r2, [pc, #272]	@ (8000c40 <pack_message+0x310>)
 8000b30:	330e      	adds	r3, #14
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a45      	ldr	r2, [pc, #276]	@ (8000c50 <pack_message+0x320>)
 8000b3a:	6013      	str	r3, [r2, #0]
		kd_in	=  control.hip_kd[CAN];     //damper
 8000b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c3c <pack_message+0x30c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4a3f      	ldr	r2, [pc, #252]	@ (8000c40 <pack_message+0x310>)
 8000b42:	3314      	adds	r3, #20
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a42      	ldr	r2, [pc, #264]	@ (8000c54 <pack_message+0x324>)
 8000b4c:	6013      	str	r3, [r2, #0]
		t_in	= (control.hip_t[CAN] * hip_mitdirection[CAN]);
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <pack_message+0x30c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4a3b      	ldr	r2, [pc, #236]	@ (8000c40 <pack_message+0x310>)
 8000b54:	331a      	adds	r3, #26
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	ed93 7a00 	vldr	s14, [r3]
 8000b5e:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <pack_message+0x30c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b41      	ldr	r3, [pc, #260]	@ (8000c6c <pack_message+0x33c>)
 8000b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6a:	ee07 3a90 	vmov	s15, r3
 8000b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b76:	4b38      	ldr	r3, [pc, #224]	@ (8000c58 <pack_message+0x328>)
 8000b78:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.hip_p[CAN],state.hip_p[CAN], HIP_LIM_P, HIP_LIM_N))
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <pack_message+0x30c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	3302      	adds	r3, #2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4a2e      	ldr	r2, [pc, #184]	@ (8000c40 <pack_message+0x310>)
 8000b86:	441a      	add	r2, r3
 8000b88:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <pack_message+0x30c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4933      	ldr	r1, [pc, #204]	@ (8000c5c <pack_message+0x32c>)
 8000b8e:	3302      	adds	r3, #2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8000c70 <pack_message+0x340>
 8000b9c:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8000c74 <pack_message+0x344>
 8000ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f000 fba5 	bl	80012f4 <softstop_joint>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d033      	beq.n	8000c18 <pack_message+0x2e8>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b10;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <pack_message+0x30c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4a29      	ldr	r2, [pc, #164]	@ (8000c5c <pack_message+0x32c>)
 8000bb6:	330c      	adds	r3, #12
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <pack_message+0x30c>)
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f043 0202 	orr.w	r2, r3, #2
 8000bc6:	4925      	ldr	r1, [pc, #148]	@ (8000c5c <pack_message+0x32c>)
 8000bc8:	f100 030c 	add.w	r3, r0, #12
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = p_in * hip_mitdirection[CAN]; // Direction update
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <pack_message+0x30c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <pack_message+0x33c>)
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <pack_message+0x318>)
 8000be6:	edd3 7a00 	vldr	s15, [r3]
 8000bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <pack_message+0x318>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
			t_in = t_in * hip_mitdirection[CAN]; // Direction update
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <pack_message+0x30c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <pack_message+0x33c>)
 8000bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c00:	ee07 3a90 	vmov	s15, r3
 8000c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <pack_message+0x328>)
 8000c0a:	edd3 7a00 	vldr	s15, [r3]
 8000c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <pack_message+0x328>)
 8000c14:	edc3 7a00 	vstr	s15, [r3]
		}

		// Safety Limit
		safetycheck_reqTrq(state.hip_p[CAN], state.hip_v[CAN], torque.hip_t[CAN]);
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <pack_message+0x30c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c5c <pack_message+0x32c>)
 8000c1e:	3302      	adds	r3, #2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	edd3 7a00 	vldr	s15, [r3]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <pack_message+0x30c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <pack_message+0x32c>)
 8000c2e:	3308      	adds	r3, #8
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	ed93 7a00 	vldr	s14, [r3]
 8000c38:	e01e      	b.n	8000c78 <pack_message+0x348>
 8000c3a:	bf00      	nop
 8000c3c:	200000b0 	.word	0x200000b0
 8000c40:	20000368 	.word	0x20000368
 8000c44:	20000000 	.word	0x20000000
 8000c48:	2000055c 	.word	0x2000055c
 8000c4c:	20000560 	.word	0x20000560
 8000c50:	2000001c 	.word	0x2000001c
 8000c54:	20000020 	.word	0x20000020
 8000c58:	20000564 	.word	0x20000564
 8000c5c:	200003ec 	.word	0x200003ec
 8000c60:	bfc90ff9 	.word	0xbfc90ff9
 8000c64:	3fc90ff9 	.word	0x3fc90ff9
 8000c68:	20000428 	.word	0x20000428
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	c0060aa6 	.word	0xc0060aa6
 8000c74:	40060aa6 	.word	0x40060aa6
 8000c78:	4bcd      	ldr	r3, [pc, #820]	@ (8000fb0 <pack_message+0x680>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4acd      	ldr	r2, [pc, #820]	@ (8000fb4 <pack_message+0x684>)
 8000c7e:	3302      	adds	r3, #2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	edd3 6a00 	vldr	s13, [r3]
 8000c88:	eeb0 1a66 	vmov.f32	s2, s13
 8000c8c:	eef0 0a47 	vmov.f32	s1, s14
 8000c90:	eeb0 0a67 	vmov.f32	s0, s15
 8000c94:	f000 fba6 	bl	80013e4 <safetycheck_reqTrq>
	}
	if(ID == Knee_CANID)
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	f040 80d9 	bne.w	8000e52 <pack_message+0x522>
	{
		p_in 	= (control.knee_p[CAN] * knee_mitdirection[CAN]) * KNEE_GEARRATIO;
 8000ca0:	4bc3      	ldr	r3, [pc, #780]	@ (8000fb0 <pack_message+0x680>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4ac4      	ldr	r2, [pc, #784]	@ (8000fb8 <pack_message+0x688>)
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	ed93 7a00 	vldr	s14, [r3]
 8000cb0:	4bbf      	ldr	r3, [pc, #764]	@ (8000fb0 <pack_message+0x680>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4bc1      	ldr	r3, [pc, #772]	@ (8000fbc <pack_message+0x68c>)
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd0:	4bbb      	ldr	r3, [pc, #748]	@ (8000fc0 <pack_message+0x690>)
 8000cd2:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.knee_v[CAN] * knee_mitdirection[CAN]) / KNEE_GEARRATIO;
 8000cd6:	4bb6      	ldr	r3, [pc, #728]	@ (8000fb0 <pack_message+0x680>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4ab7      	ldr	r2, [pc, #732]	@ (8000fb8 <pack_message+0x688>)
 8000cdc:	330a      	adds	r3, #10
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	ed93 7a00 	vldr	s14, [r3]
 8000ce6:	4bb2      	ldr	r3, [pc, #712]	@ (8000fb0 <pack_message+0x680>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4bb3      	ldr	r3, [pc, #716]	@ (8000fbc <pack_message+0x68c>)
 8000cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8000d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d06:	4baf      	ldr	r3, [pc, #700]	@ (8000fc4 <pack_message+0x694>)
 8000d08:	edc3 7a00 	vstr	s15, [r3]
		kp_in 	=  control.knee_kp[CAN];   //stifness
 8000d0c:	4ba8      	ldr	r3, [pc, #672]	@ (8000fb0 <pack_message+0x680>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4aa9      	ldr	r2, [pc, #676]	@ (8000fb8 <pack_message+0x688>)
 8000d12:	3310      	adds	r3, #16
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4aab      	ldr	r2, [pc, #684]	@ (8000fc8 <pack_message+0x698>)
 8000d1c:	6013      	str	r3, [r2, #0]
		kd_in	=  control.knee_kd[CAN];     //damper
 8000d1e:	4ba4      	ldr	r3, [pc, #656]	@ (8000fb0 <pack_message+0x680>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4aa5      	ldr	r2, [pc, #660]	@ (8000fb8 <pack_message+0x688>)
 8000d24:	3316      	adds	r3, #22
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4aa7      	ldr	r2, [pc, #668]	@ (8000fcc <pack_message+0x69c>)
 8000d2e:	6013      	str	r3, [r2, #0]
		t_in 	= (control.knee_t[CAN] * knee_mitdirection[CAN]) * KNEE_GEARRATIO;
 8000d30:	4b9f      	ldr	r3, [pc, #636]	@ (8000fb0 <pack_message+0x680>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4aa0      	ldr	r2, [pc, #640]	@ (8000fb8 <pack_message+0x688>)
 8000d36:	331c      	adds	r3, #28
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	ed93 7a00 	vldr	s14, [r3]
 8000d40:	4b9b      	ldr	r3, [pc, #620]	@ (8000fb0 <pack_message+0x680>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b9d      	ldr	r3, [pc, #628]	@ (8000fbc <pack_message+0x68c>)
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d58:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d60:	4b9b      	ldr	r3, [pc, #620]	@ (8000fd0 <pack_message+0x6a0>)
 8000d62:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.knee_p[CAN], state.knee_p[CAN], KNEE_LIM_P, KNEE_LIM_N))
 8000d66:	4b92      	ldr	r3, [pc, #584]	@ (8000fb0 <pack_message+0x680>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4a92      	ldr	r2, [pc, #584]	@ (8000fb8 <pack_message+0x688>)
 8000d70:	441a      	add	r2, r3
 8000d72:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb0 <pack_message+0x680>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4997      	ldr	r1, [pc, #604]	@ (8000fd4 <pack_message+0x6a4>)
 8000d78:	3304      	adds	r3, #4
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8000fd8 <pack_message+0x6a8>
 8000d86:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8000fdc <pack_message+0x6ac>
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f000 fab0 	bl	80012f4 <softstop_joint>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d03b      	beq.n	8000e12 <pack_message+0x4e2>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b11;
 8000d9a:	4b85      	ldr	r3, [pc, #532]	@ (8000fb0 <pack_message+0x680>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4a8d      	ldr	r2, [pc, #564]	@ (8000fd4 <pack_message+0x6a4>)
 8000da0:	330c      	adds	r3, #12
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	4a82      	ldr	r2, [pc, #520]	@ (8000fb0 <pack_message+0x680>)
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	4610      	mov	r0, r2
 8000dac:	f043 0203 	orr.w	r2, r3, #3
 8000db0:	4988      	ldr	r1, [pc, #544]	@ (8000fd4 <pack_message+0x6a4>)
 8000db2:	f100 030c 	add.w	r3, r0, #12
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = (p_in * knee_mitdirection[CAN]) * KNEE_GEARRATIO; // Direction update
 8000dba:	4b7d      	ldr	r3, [pc, #500]	@ (8000fb0 <pack_message+0x680>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8000fbc <pack_message+0x68c>)
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dce:	4b7c      	ldr	r3, [pc, #496]	@ (8000fc0 <pack_message+0x690>)
 8000dd0:	edd3 7a00 	vldr	s15, [r3]
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de0:	4b77      	ldr	r3, [pc, #476]	@ (8000fc0 <pack_message+0x690>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
			t_in = (t_in * knee_mitdirection[CAN]) * KNEE_GEARRATIO; // Direction update
 8000de6:	4b72      	ldr	r3, [pc, #456]	@ (8000fb0 <pack_message+0x680>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b73      	ldr	r3, [pc, #460]	@ (8000fbc <pack_message+0x68c>)
 8000dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfa:	4b75      	ldr	r3, [pc, #468]	@ (8000fd0 <pack_message+0x6a0>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e04:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e0c:	4b70      	ldr	r3, [pc, #448]	@ (8000fd0 <pack_message+0x6a0>)
 8000e0e:	edc3 7a00 	vstr	s15, [r3]
		}

		// Safety Limit
		safetycheck_reqTrq(state.knee_p[CAN], state.knee_v[CAN], torque.knee_t[CAN]);
 8000e12:	4b67      	ldr	r3, [pc, #412]	@ (8000fb0 <pack_message+0x680>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4a6f      	ldr	r2, [pc, #444]	@ (8000fd4 <pack_message+0x6a4>)
 8000e18:	3304      	adds	r3, #4
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	edd3 7a00 	vldr	s15, [r3]
 8000e22:	4b63      	ldr	r3, [pc, #396]	@ (8000fb0 <pack_message+0x680>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4a6b      	ldr	r2, [pc, #428]	@ (8000fd4 <pack_message+0x6a4>)
 8000e28:	330a      	adds	r3, #10
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	ed93 7a00 	vldr	s14, [r3]
 8000e32:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb0 <pack_message+0x680>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb4 <pack_message+0x684>)
 8000e38:	3304      	adds	r3, #4
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	edd3 6a00 	vldr	s13, [r3]
 8000e42:	eeb0 1a66 	vmov.f32	s2, s13
 8000e46:	eef0 0a47 	vmov.f32	s1, s14
 8000e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4e:	f000 fac9 	bl	80013e4 <safetycheck_reqTrq>
	}

	Header->StdId = ID;
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	601a      	str	r2, [r3, #0]

    /// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, p_in), P_MAX);
 8000e58:	4b59      	ldr	r3, [pc, #356]	@ (8000fc0 <pack_message+0x690>)
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8000e62:	eeb0 0a67 	vmov.f32	s0, s15
 8000e66:	f005 fb1b 	bl	80064a0 <fmaxf>
 8000e6a:	eef0 7a40 	vmov.f32	s15, s0
 8000e6e:	eef2 0a09 	vmov.f32	s1, #41	@ 0x41480000  12.5
 8000e72:	eeb0 0a67 	vmov.f32	s0, s15
 8000e76:	f005 fb30 	bl	80064da <fminf>
 8000e7a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	float v_des = fminf(fmaxf(V_MIN, v_in), V_MAX);
 8000e7e:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <pack_message+0x694>)
 8000e80:	edd3 7a00 	vldr	s15, [r3]
 8000e84:	eefb 0a0a 	vmov.f32	s1, #186	@ 0xc1d00000 -26.0
 8000e88:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8c:	f005 fb08 	bl	80064a0 <fmaxf>
 8000e90:	eef0 7a40 	vmov.f32	s15, s0
 8000e94:	eef3 0a0a 	vmov.f32	s1, #58	@ 0x41d00000  26.0
 8000e98:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9c:	f005 fb1d 	bl	80064da <fminf>
 8000ea0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float kp = fminf(fmaxf(KP_MIN, kp_in), KP_MAX);
 8000ea4:	4b48      	ldr	r3, [pc, #288]	@ (8000fc8 <pack_message+0x698>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8000fe0 <pack_message+0x6b0>
 8000eae:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb2:	f005 faf5 	bl	80064a0 <fmaxf>
 8000eb6:	eef0 7a40 	vmov.f32	s15, s0
 8000eba:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8000fe4 <pack_message+0x6b4>
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	f005 fb0a 	bl	80064da <fminf>
 8000ec6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float kd = fminf(fmaxf(KD_MIN, kd_in), KD_MAX);
 8000eca:	4b40      	ldr	r3, [pc, #256]	@ (8000fcc <pack_message+0x69c>)
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8000fe0 <pack_message+0x6b0>
 8000ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed8:	f005 fae2 	bl	80064a0 <fmaxf>
 8000edc:	eef0 7a40 	vmov.f32	s15, s0
 8000ee0:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8000ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee8:	f005 faf7 	bl	80064da <fminf>
 8000eec:	ed87 0a08 	vstr	s0, [r7, #32]
	float t_ff = fminf(fmaxf(T_MIN, t_in), T_MAX);
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <pack_message+0x6a0>)
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 8000efa:	eeb0 0a67 	vmov.f32	s0, s15
 8000efe:	f005 facf 	bl	80064a0 <fmaxf>
 8000f02:	eef0 7a40 	vmov.f32	s15, s0
 8000f06:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8000f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0e:	f005 fae4 	bl	80064da <fminf>
 8000f12:	ed87 0a07 	vstr	s0, [r7, #28]

    /// convert floats to unsigned ints ///
    uint16_t p_int = float_to_uint(p_des, MOTOR_P_MIN, MOTOR_P_MAX, 16);
 8000f16:	2010      	movs	r0, #16
 8000f18:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 8000f1c:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8000f20:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8000f24:	f000 fb4a 	bl	80015bc <float_to_uint>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	837b      	strh	r3, [r7, #26]
    uint16_t v_int = float_to_uint(v_des, MOTOR_V_MIN, MOTOR_V_MAX, 12);
 8000f2c:	200c      	movs	r0, #12
 8000f2e:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8000fe8 <pack_message+0x6b8>
 8000f32:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8000fec <pack_message+0x6bc>
 8000f36:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8000f3a:	f000 fb3f 	bl	80015bc <float_to_uint>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	833b      	strh	r3, [r7, #24]
    uint16_t kp_int = float_to_uint(kp, MOTOR_KP_MIN, MOTOR_KP_MAX, 12);
 8000f42:	200c      	movs	r0, #12
 8000f44:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8000fe4 <pack_message+0x6b4>
 8000f48:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8000fe0 <pack_message+0x6b0>
 8000f4c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8000f50:	f000 fb34 	bl	80015bc <float_to_uint>
 8000f54:	4603      	mov	r3, r0
 8000f56:	82fb      	strh	r3, [r7, #22]
    uint16_t kd_int = float_to_uint(kd, MOTOR_KD_MIN, MOTOR_KD_MAX, 12);
 8000f58:	200c      	movs	r0, #12
 8000f5a:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000f5e:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8000fe0 <pack_message+0x6b0>
 8000f62:	ed97 0a08 	vldr	s0, [r7, #32]
 8000f66:	f000 fb29 	bl	80015bc <float_to_uint>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	82bb      	strh	r3, [r7, #20]
    uint16_t t_int = float_to_uint(t_ff, MOTOR_T_MIN, MOTOR_T_MAX, 12);
 8000f6e:	200c      	movs	r0, #12
 8000f70:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8000ff0 <pack_message+0x6c0>
 8000f74:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8000ff4 <pack_message+0x6c4>
 8000f78:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f7c:	f000 fb1e 	bl	80015bc <float_to_uint>
 8000f80:	4603      	mov	r3, r0
 8000f82:	827b      	strh	r3, [r7, #18]

    /// pack ints into the can buffer ///
    Data[0] = p_int>>8;
 8000f84:	8b7b      	ldrh	r3, [r7, #26]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	701a      	strb	r2, [r3, #0]
    Data[1] = p_int&0xFF;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	8b7a      	ldrh	r2, [r7, #26]
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
    Data[2] = v_int>>4;
 8000f9a:	8b3b      	ldrh	r3, [r7, #24]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
    Data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 8000fa8:	8b3b      	ldrh	r3, [r7, #24]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	b25a      	sxtb	r2, r3
 8000fae:	e023      	b.n	8000ff8 <pack_message+0x6c8>
 8000fb0:	200000b0 	.word	0x200000b0
 8000fb4:	20000428 	.word	0x20000428
 8000fb8:	20000368 	.word	0x20000368
 8000fbc:	20000010 	.word	0x20000010
 8000fc0:	2000055c 	.word	0x2000055c
 8000fc4:	20000560 	.word	0x20000560
 8000fc8:	2000001c 	.word	0x2000001c
 8000fcc:	20000020 	.word	0x20000020
 8000fd0:	20000564 	.word	0x20000564
 8000fd4:	200003ec 	.word	0x200003ec
 8000fd8:	c08074d1 	.word	0xc08074d1
 8000fdc:	3c23d70a 	.word	0x3c23d70a
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	43fa0000 	.word	0x43fa0000
 8000fe8:	42480000 	.word	0x42480000
 8000fec:	c2480000 	.word	0xc2480000
 8000ff0:	42820000 	.word	0x42820000
 8000ff4:	c2820000 	.word	0xc2820000
 8000ff8:	8afb      	ldrh	r3, [r7, #22]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b25a      	sxtb	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3303      	adds	r3, #3
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
    Data[4] = kp_int&0xFF;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3304      	adds	r3, #4
 8001010:	8afa      	ldrh	r2, [r7, #22]
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
    Data[5] = kd_int>>4;
 8001016:	8abb      	ldrh	r3, [r7, #20]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3305      	adds	r3, #5
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
    Data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 8001024:	8abb      	ldrh	r3, [r7, #20]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	b25a      	sxtb	r2, r3
 800102a:	8a7b      	ldrh	r3, [r7, #18]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b29b      	uxth	r3, r3
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25a      	sxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3306      	adds	r3, #6
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
    Data[7] = t_int&0xff;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3307      	adds	r3, #7
 8001042:	8a7a      	ldrh	r2, [r7, #18]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]

}
 8001048:	bf00      	nop
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <unpack_replay>:


void unpack_replay(uint8_t*Data){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	/// unpack ints from can buffer ///

	uint16_t id = Data[0];
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	81fb      	strh	r3, [r7, #14]
	uint16_t p_int = (Data[1]<<8)|Data[2];
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3301      	adds	r3, #1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
 8001074:	81bb      	strh	r3, [r7, #12]
	uint16_t v_int = (Data[3]<<4)|(Data[4]>>4);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3303      	adds	r3, #3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	817b      	strh	r3, [r7, #10]
	uint16_t i_int = ((Data[4]&0xF)<<8)|Data[5];
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3304      	adds	r3, #4
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21b      	sxth	r3, r3
 800109c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3305      	adds	r3, #5
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	813b      	strh	r3, [r7, #8]
	/// convert uints to floats ///
	p_out = uint_to_float(p_int, MOTOR_P_MIN, MOTOR_P_MAX, 16);
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	2110      	movs	r1, #16
 80010b4:	eef2 0a09 	vmov.f32	s1, #41	@ 0x41480000  12.5
 80010b8:	eeba 0a09 	vmov.f32	s0, #169	@ 0xc1480000 -12.5
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fab0 	bl	8001622 <uint_to_float>
 80010c2:	eef0 7a40 	vmov.f32	s15, s0
 80010c6:	4b7e      	ldr	r3, [pc, #504]	@ (80012c0 <unpack_replay+0x270>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
	v_out = uint_to_float(v_int, MOTOR_V_MIN, MOTOR_V_MAX, 12);
 80010cc:	897b      	ldrh	r3, [r7, #10]
 80010ce:	210c      	movs	r1, #12
 80010d0:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 80012c4 <unpack_replay+0x274>
 80010d4:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80012c8 <unpack_replay+0x278>
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 faa2 	bl	8001622 <uint_to_float>
 80010de:	eef0 7a40 	vmov.f32	s15, s0
 80010e2:	4b7a      	ldr	r3, [pc, #488]	@ (80012cc <unpack_replay+0x27c>)
 80010e4:	edc3 7a00 	vstr	s15, [r3]
	t_out = uint_to_float(i_int, MOTOR_T_MIN, MOTOR_T_MAX, 12);
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	210c      	movs	r1, #12
 80010ec:	eddf 0a78 	vldr	s1, [pc, #480]	@ 80012d0 <unpack_replay+0x280>
 80010f0:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80012d4 <unpack_replay+0x284>
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fa94 	bl	8001622 <uint_to_float>
 80010fa:	eef0 7a40 	vmov.f32	s15, s0
 80010fe:	4b76      	ldr	r3, [pc, #472]	@ (80012d8 <unpack_replay+0x288>)
 8001100:	edc3 7a00 	vstr	s15, [r3]

	if(id == Abad_CANID)
 8001104:	89fb      	ldrh	r3, [r7, #14]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d13f      	bne.n	800118a <unpack_replay+0x13a>
	{
		state.ab_p[receivedCanBus]=  (p_out * ab_mitdirection[receivedCanBus]);
 800110a:	4b74      	ldr	r3, [pc, #464]	@ (80012dc <unpack_replay+0x28c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a74      	ldr	r2, [pc, #464]	@ (80012e0 <unpack_replay+0x290>)
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111c:	4b68      	ldr	r3, [pc, #416]	@ (80012c0 <unpack_replay+0x270>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	4b6e      	ldr	r3, [pc, #440]	@ (80012dc <unpack_replay+0x28c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	4a6e      	ldr	r2, [pc, #440]	@ (80012e4 <unpack_replay+0x294>)
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	edc3 7a00 	vstr	s15, [r3]
		state.ab_v[receivedCanBus]=  (v_out * ab_mitdirection[receivedCanBus]);
 8001134:	4b69      	ldr	r3, [pc, #420]	@ (80012dc <unpack_replay+0x28c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a69      	ldr	r2, [pc, #420]	@ (80012e0 <unpack_replay+0x290>)
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001146:	4b61      	ldr	r3, [pc, #388]	@ (80012cc <unpack_replay+0x27c>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	4b63      	ldr	r3, [pc, #396]	@ (80012dc <unpack_replay+0x28c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001154:	4a63      	ldr	r2, [pc, #396]	@ (80012e4 <unpack_replay+0x294>)
 8001156:	3306      	adds	r3, #6
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	edc3 7a00 	vstr	s15, [r3]
		torque.ab_t[receivedCanBus]= (t_out * ab_mitdirection[receivedCanBus]);
 8001160:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <unpack_replay+0x28c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a5e      	ldr	r2, [pc, #376]	@ (80012e0 <unpack_replay+0x290>)
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001172:	4b59      	ldr	r3, [pc, #356]	@ (80012d8 <unpack_replay+0x288>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	4b58      	ldr	r3, [pc, #352]	@ (80012dc <unpack_replay+0x28c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	4a59      	ldr	r2, [pc, #356]	@ (80012e8 <unpack_replay+0x298>)
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	edc3 7a00 	vstr	s15, [r3]
	}
	if(id == Hip_CANID)
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d141      	bne.n	8001214 <unpack_replay+0x1c4>
	{
		state.hip_p[receivedCanBus]=  (p_out * hip_mitdirection[receivedCanBus]);
 8001190:	4b52      	ldr	r3, [pc, #328]	@ (80012dc <unpack_replay+0x28c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a55      	ldr	r2, [pc, #340]	@ (80012ec <unpack_replay+0x29c>)
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a2:	4b47      	ldr	r3, [pc, #284]	@ (80012c0 <unpack_replay+0x270>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	4b4c      	ldr	r3, [pc, #304]	@ (80012dc <unpack_replay+0x28c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <unpack_replay+0x294>)
 80011b2:	3302      	adds	r3, #2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	edc3 7a00 	vstr	s15, [r3]
		state.hip_v[receivedCanBus]=  (v_out * hip_mitdirection[receivedCanBus]);
 80011bc:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <unpack_replay+0x28c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <unpack_replay+0x29c>)
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	4b3f      	ldr	r3, [pc, #252]	@ (80012cc <unpack_replay+0x27c>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	4b41      	ldr	r3, [pc, #260]	@ (80012dc <unpack_replay+0x28c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	4a41      	ldr	r2, [pc, #260]	@ (80012e4 <unpack_replay+0x294>)
 80011de:	3308      	adds	r3, #8
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	edc3 7a00 	vstr	s15, [r3]
		torque.hip_t[receivedCanBus]= (t_out * hip_mitdirection[receivedCanBus]);
 80011e8:	4b3c      	ldr	r3, [pc, #240]	@ (80012dc <unpack_replay+0x28c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a3f      	ldr	r2, [pc, #252]	@ (80012ec <unpack_replay+0x29c>)
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fa:	4b37      	ldr	r3, [pc, #220]	@ (80012d8 <unpack_replay+0x288>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <unpack_replay+0x28c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	4a37      	ldr	r2, [pc, #220]	@ (80012e8 <unpack_replay+0x298>)
 800120a:	3302      	adds	r3, #2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	edc3 7a00 	vstr	s15, [r3]
	}
	if(id == Knee_CANID)
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d14d      	bne.n	80012b6 <unpack_replay+0x266>
	{
		state.knee_p[receivedCanBus]=  (p_out * knee_mitdirection[receivedCanBus])/ KNEE_GEARRATIO;
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <unpack_replay+0x28c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a34      	ldr	r2, [pc, #208]	@ (80012f0 <unpack_replay+0x2a0>)
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <unpack_replay+0x270>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001236:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <unpack_replay+0x28c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800123e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001242:	4a28      	ldr	r2, [pc, #160]	@ (80012e4 <unpack_replay+0x294>)
 8001244:	3304      	adds	r3, #4
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	edc3 7a00 	vstr	s15, [r3]
		state.knee_v[receivedCanBus]=  (v_out * knee_mitdirection[receivedCanBus])* KNEE_GEARRATIO;
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <unpack_replay+0x28c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <unpack_replay+0x2a0>)
 8001254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <unpack_replay+0x27c>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <unpack_replay+0x28c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001276:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <unpack_replay+0x294>)
 8001278:	330a      	adds	r3, #10
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	edc3 7a00 	vstr	s15, [r3]
		torque.knee_t[receivedCanBus]= (t_out * knee_mitdirection[receivedCanBus])/ KNEE_GEARRATIO;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <unpack_replay+0x28c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1a      	ldr	r2, [pc, #104]	@ (80012f0 <unpack_replay+0x2a0>)
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <unpack_replay+0x288>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <unpack_replay+0x28c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <unpack_replay+0x298>)
 80012ac:	3304      	adds	r3, #4
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000568 	.word	0x20000568
 80012c4:	42480000 	.word	0x42480000
 80012c8:	c2480000 	.word	0xc2480000
 80012cc:	2000056c 	.word	0x2000056c
 80012d0:	42820000 	.word	0x42820000
 80012d4:	c2820000 	.word	0xc2820000
 80012d8:	20000570 	.word	0x20000570
 80012dc:	20000024 	.word	0x20000024
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200003ec 	.word	0x200003ec
 80012e8:	20000428 	.word	0x20000428
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000010 	.word	0x20000010

080012f4 <softstop_joint>:

////////////////////////softstop//////////////////////////////////
//actuator only can move to a limit position

int softstop_joint(float *control,float state, float limit_p, float limit_n)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001300:	edc7 0a01 	vstr	s1, [r7, #4]
 8001304:	ed87 1a00 	vstr	s2, [r7]
	if(*control>=limit_p)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d821      	bhi.n	8001360 <softstop_joint+0x6c>
	{
		//*control = limit_p;
		p_in = limit_p;
 800131c:	4a2a      	ldr	r2, [pc, #168]	@ (80013c8 <softstop_joint+0xd4>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
		v_in = 0.0f;
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <softstop_joint+0xd8>)
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
		kp_in = 0.0f;
 800132a:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <softstop_joint+0xdc>)
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
		kd_in = KD_SOFTSTOP;
 8001332:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <softstop_joint+0xe0>)
 8001334:	4a28      	ldr	r2, [pc, #160]	@ (80013d8 <softstop_joint+0xe4>)
 8001336:	601a      	str	r2, [r3, #0]
		t_in += KP_SOFTSTOP*(limit_p - state);
 8001338:	ed97 7a01 	vldr	s14, [r7, #4]
 800133c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001344:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80013dc <softstop_joint+0xe8>
 8001348:	ee27 7a87 	vmul.f32	s14, s15, s14
 800134c:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <softstop_joint+0xec>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <softstop_joint+0xec>)
 8001358:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 800135c:	2301      	movs	r3, #1
 800135e:	e02c      	b.n	80013ba <softstop_joint+0xc6>
	}
	if(*control<=limit_n)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ed97 7a00 	vldr	s14, [r7]
 800136a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	db21      	blt.n	80013b8 <softstop_joint+0xc4>
	{
		//*control = limit_n;
		p_in = limit_n;
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <softstop_joint+0xd4>)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6013      	str	r3, [r2, #0]
		v_in = 0.0f;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <softstop_joint+0xd8>)
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
		kp_in = 0.0f;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <softstop_joint+0xdc>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
		kd_in = KD_SOFTSTOP;
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <softstop_joint+0xe0>)
 800138c:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <softstop_joint+0xe4>)
 800138e:	601a      	str	r2, [r3, #0]
		t_in += KP_SOFTSTOP*(limit_n - state);
 8001390:	ed97 7a00 	vldr	s14, [r7]
 8001394:	edd7 7a02 	vldr	s15, [r7, #8]
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013dc <softstop_joint+0xe8>
 80013a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <softstop_joint+0xec>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <softstop_joint+0xec>)
 80013b0:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <softstop_joint+0xc6>
	}

  return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000055c 	.word	0x2000055c
 80013cc:	20000560 	.word	0x20000560
 80013d0:	2000001c 	.word	0x2000001c
 80013d4:	20000020 	.word	0x20000020
 80013d8:	3ecccccd 	.word	0x3ecccccd
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	20000564 	.word	0x20000564

080013e4 <safetycheck_reqTrq>:


////////////////////////safetycheck_reqTrq//////////////////////////////////
//To add additional check on the torque requested to the motor. Calculated based on the PID model of motor.
void safetycheck_reqTrq(float p_act, float v_act, float t_ff)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80013ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80013f2:	ed87 1a01 	vstr	s2, [r7, #4]

	float trqreq = (p_in - p_act)*kp_in + (v_in - v_act)*kd_in + t_ff;
 80013f6:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <safetycheck_reqTrq+0xac>)
 80013f8:	ed93 7a00 	vldr	s14, [r3]
 80013fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <safetycheck_reqTrq+0xb0>)
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <safetycheck_reqTrq+0xb4>)
 8001410:	edd3 6a00 	vldr	s13, [r3]
 8001414:	edd7 7a02 	vldr	s15, [r7, #8]
 8001418:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <safetycheck_reqTrq+0xb8>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	ed97 7a01 	vldr	s14, [r7, #4]
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	edc7 7a05 	vstr	s15, [r7, #20]

	// Incase the Trq to be calculated at the motor is too high, cancel the req by setting everything to zero
	if (trqreq >= TRQ_REQ_MAX || trqreq <= -TRQ_REQ_MAX)
 8001436:	edd7 7a05 	vldr	s15, [r7, #20]
 800143a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	da09      	bge.n	800145c <safetycheck_reqTrq+0x78>
 8001448:	edd7 7a05 	vldr	s15, [r7, #20]
 800144c:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d900      	bls.n	800145c <safetycheck_reqTrq+0x78>
		v_in = 0.0f;
		kp_in = 0.0f;
		kd_in = 0.0f;
		t_in = 0.0f;
	}
}
 800145a:	e013      	b.n	8001484 <safetycheck_reqTrq+0xa0>
		p_in = 0.0f;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <safetycheck_reqTrq+0xac>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
		v_in = 0.0f;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <safetycheck_reqTrq+0xb4>)
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
		kp_in = 0.0f;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <safetycheck_reqTrq+0xb0>)
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
		kd_in = 0.0f;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <safetycheck_reqTrq+0xb8>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
		t_in = 0.0f;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <safetycheck_reqTrq+0xbc>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	2000055c 	.word	0x2000055c
 8001494:	2000001c 	.word	0x2000001c
 8001498:	20000560 	.word	0x20000560
 800149c:	20000020 	.word	0x20000020
 80014a0:	20000564 	.word	0x20000564

080014a4 <motor_mode>:
									 *  		M O T O R    M O D E S
									 ***************************************************/


//Start motor
void motor_mode(uint8_t ID,CAN_TxHeaderTypeDef*Header,uint8_t*Data){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	601a      	str	r2, [r3, #0]
	Data[0] = 0xFF;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	22ff      	movs	r2, #255	@ 0xff
 80014bc:	701a      	strb	r2, [r3, #0]
	Data[1] = 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3301      	adds	r3, #1
 80014c2:	22ff      	movs	r2, #255	@ 0xff
 80014c4:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xFF;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3302      	adds	r3, #2
 80014ca:	22ff      	movs	r2, #255	@ 0xff
 80014cc:	701a      	strb	r2, [r3, #0]
	Data[3] = 0xFF;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3303      	adds	r3, #3
 80014d2:	22ff      	movs	r2, #255	@ 0xff
 80014d4:	701a      	strb	r2, [r3, #0]
	Data[4] = 0xFF;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3304      	adds	r3, #4
 80014da:	22ff      	movs	r2, #255	@ 0xff
 80014dc:	701a      	strb	r2, [r3, #0]
	Data[5] = 0xFF;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3305      	adds	r3, #5
 80014e2:	22ff      	movs	r2, #255	@ 0xff
 80014e4:	701a      	strb	r2, [r3, #0]
	Data[6] = 0xFF;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3306      	adds	r3, #6
 80014ea:	22ff      	movs	r2, #255	@ 0xff
 80014ec:	701a      	strb	r2, [r3, #0]
	Data[7] = 0xFC;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3307      	adds	r3, #7
 80014f2:	22fc      	movs	r2, #252	@ 0xfc
 80014f4:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <motor_mode+0x7c>)
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	490a      	ldr	r1, [pc, #40]	@ (8001524 <motor_mode+0x80>)
 80014fc:	480a      	ldr	r0, [pc, #40]	@ (8001528 <motor_mode+0x84>)
 80014fe:	f001 f9c1 	bl	8002884 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <motor_mode+0x7c>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4907      	ldr	r1, [pc, #28]	@ (8001524 <motor_mode+0x80>)
 8001508:	4808      	ldr	r0, [pc, #32]	@ (800152c <motor_mode+0x88>)
 800150a:	f001 f9bb 	bl	8002884 <HAL_CAN_AddTxMessage>
	delay_us(300);
 800150e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001512:	f000 f8b9 	bl	8001688 <delay_us>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000138 	.word	0x20000138
 8001524:	20000104 	.word	0x20000104
 8001528:	200000b4 	.word	0x200000b4
 800152c:	200000dc 	.word	0x200000dc

08001530 <exit_mode>:

//stop motor
void exit_mode(uint8_t ID,CAN_TxHeaderTypeDef*Header,uint8_t*Data){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	601a      	str	r2, [r3, #0]
	Data[0] = 0xFF;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	22ff      	movs	r2, #255	@ 0xff
 8001548:	701a      	strb	r2, [r3, #0]
	Data[1] = 0xFF;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3301      	adds	r3, #1
 800154e:	22ff      	movs	r2, #255	@ 0xff
 8001550:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xFF;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3302      	adds	r3, #2
 8001556:	22ff      	movs	r2, #255	@ 0xff
 8001558:	701a      	strb	r2, [r3, #0]
	Data[3] = 0xFF;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3303      	adds	r3, #3
 800155e:	22ff      	movs	r2, #255	@ 0xff
 8001560:	701a      	strb	r2, [r3, #0]
	Data[4] = 0xFF;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3304      	adds	r3, #4
 8001566:	22ff      	movs	r2, #255	@ 0xff
 8001568:	701a      	strb	r2, [r3, #0]
	Data[5] = 0xFF;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3305      	adds	r3, #5
 800156e:	22ff      	movs	r2, #255	@ 0xff
 8001570:	701a      	strb	r2, [r3, #0]
	Data[6] = 0xFF;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3306      	adds	r3, #6
 8001576:	22ff      	movs	r2, #255	@ 0xff
 8001578:	701a      	strb	r2, [r3, #0]
	Data[7] = 0xFD;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3307      	adds	r3, #7
 800157e:	22fd      	movs	r2, #253	@ 0xfd
 8001580:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <exit_mode+0x7c>)
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	490a      	ldr	r1, [pc, #40]	@ (80015b0 <exit_mode+0x80>)
 8001588:	480a      	ldr	r0, [pc, #40]	@ (80015b4 <exit_mode+0x84>)
 800158a:	f001 f97b 	bl	8002884 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <exit_mode+0x7c>)
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <exit_mode+0x80>)
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <exit_mode+0x88>)
 8001596:	f001 f975 	bl	8002884 <HAL_CAN_AddTxMessage>
	delay_us(300);
 800159a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800159e:	f000 f873 	bl	8001688 <delay_us>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000138 	.word	0x20000138
 80015b0:	20000104 	.word	0x20000104
 80015b4:	200000b4 	.word	0x200000b4
 80015b8:	200000dc 	.word	0x200000dc

080015bc <float_to_uint>:
									 ***************************************************/


//math
int float_to_uint(float x, float x_min, float x_max, int bits)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80015c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80015ca:	ed87 1a01 	vstr	s2, [r7, #4]
 80015ce:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80015d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80015d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015dc:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80015e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f0:	2201      	movs	r2, #1
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001606:	ed97 7a05 	vldr	s14, [r7, #20]
 800160a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001612:	ee17 3a90 	vmov	r3, s15
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <uint_to_float>:

float uint_to_float(int x_int, float x_min, float x_max, int bits)
{
 8001622:	b480      	push	{r7}
 8001624:	b087      	sub	sp, #28
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	ed87 0a02 	vstr	s0, [r7, #8]
 800162e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8001634:	ed97 7a01 	vldr	s14, [r7, #4]
 8001638:	edd7 7a02 	vldr	s15, [r7, #8]
 800163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001640:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001652:	edd7 7a05 	vldr	s15, [r7, #20]
 8001656:	ee67 6a27 	vmul.f32	s13, s14, s15
 800165a:	2201      	movs	r2, #1
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001670:	edd7 7a04 	vldr	s15, [r7, #16]
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <delay_us>:

//delay
void delay_us (uint16_t us)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <delay_us+0x30>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 800169a:	bf00      	nop
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <delay_us+0x30>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	88fa      	ldrh	r2, [r7, #6]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d8f8      	bhi.n	800169c <delay_us+0x14>
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	20000254 	.word	0x20000254

080016bc <xor_checksum>:

//spi checksum
uint32_t xor_checksum(uint32_t* data, int len)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    uint32_t t = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	e00a      	b.n	80016e6 <xor_checksum+0x2a>
        t = t ^ data[i];
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4053      	eors	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbf0      	blt.n	80016d0 <xor_checksum+0x14>
    return t;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_write>:
}


//Printfunction
int _write(int file, char *ptr, int len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e009      	b.n	8001722 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe feec 	bl	80004f4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	dbf1      	blt.n	800170e <_write+0x12>
	}
	return len;
 800172a:	687b      	ldr	r3, [r7, #4]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	@ 0x50
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	2234      	movs	r2, #52	@ 0x34
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f004 fbf8 	bl	8005f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	4b2c      	ldr	r3, [pc, #176]	@ (8001810 <SystemClock_Config+0xdc>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	4a2b      	ldr	r2, [pc, #172]	@ (8001810 <SystemClock_Config+0xdc>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	@ 0x40
 8001768:	4b29      	ldr	r3, [pc, #164]	@ (8001810 <SystemClock_Config+0xdc>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001774:	2300      	movs	r3, #0
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <SystemClock_Config+0xe0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a25      	ldr	r2, [pc, #148]	@ (8001814 <SystemClock_Config+0xe0>)
 800177e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <SystemClock_Config+0xe0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017a4:	2304      	movs	r3, #4
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017a8:	23b4      	movs	r3, #180	@ 0xb4
 80017aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 ff8b 	bl	80046d8 <HAL_RCC_OscConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017c8:	f000 fa6c 	bl	8001ca4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017cc:	f002 fc1e 	bl	800400c <HAL_PWREx_EnableOverDrive>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017d6:	f000 fa65 	bl	8001ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017da:	230f      	movs	r3, #15
 80017dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017de:	2302      	movs	r3, #2
 80017e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2105      	movs	r1, #5
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fc57 	bl	80040ac <HAL_RCC_ClockConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001804:	f000 fa4e 	bl	8001ca4 <Error_Handler>
  }
}
 8001808:	bf00      	nop
 800180a:	3750      	adds	r7, #80	@ 0x50
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000

08001818 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800181e:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <MX_CAN1_Init+0xa4>)
 8001822:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001826:	2209      	movs	r2, #9
 8001828:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001838:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800183c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800183e:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001840:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001844:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001846:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001848:	2200      	movs	r2, #0
 800184a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800184c:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 800184e:	2200      	movs	r2, #0
 8001850:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001854:	2200      	movs	r2, #0
 8001856:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 800185a:	2200      	movs	r2, #0
 800185c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 8001866:	2200      	movs	r2, #0
 8001868:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800186a:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 800186c:	f000 fdea 	bl	8002444 <HAL_CAN_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001876:	f000 fa15 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones 18
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0xFFFF;
 800188e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001892:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0xFFFC;
 8001894:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001898:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800189e:	2301      	movs	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can) 20
 80018a2:	230e      	movs	r3, #14
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80018a6:	463b      	mov	r3, r7
 80018a8:	4619      	mov	r1, r3
 80018aa:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <MX_CAN1_Init+0xa0>)
 80018ac:	f000 fec6 	bl	800263c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200000b4 	.word	0x200000b4
 80018bc:	40006400 	.word	0x40006400

080018c0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018c8:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <MX_CAN2_Init+0xa4>)
 80018ca:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80018cc:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018ce:	2209      	movs	r2, #9
 80018d0:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80018d2:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018d8:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018e4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80018ec:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <MX_CAN2_Init+0xa0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_CAN2_Init+0xa0>)
 8001902:	2200      	movs	r2, #0
 8001904:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <MX_CAN2_Init+0xa0>)
 8001908:	2200      	movs	r2, #0
 800190a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_CAN2_Init+0xa0>)
 800190e:	2200      	movs	r2, #0
 8001910:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001912:	4813      	ldr	r0, [pc, #76]	@ (8001960 <MX_CAN2_Init+0xa0>)
 8001914:	f000 fd96 	bl	8002444 <HAL_CAN_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800191e:	f000 f9c1 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig2;

  canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 8001922:	2301      	movs	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
  canfilterconfig2.FilterBank = 15;  // which filter bank to use from the assigned ones
 8001926:	230f      	movs	r3, #15
 8001928:	617b      	str	r3, [r7, #20]
  canfilterconfig2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800192a:	2301      	movs	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
  canfilterconfig2.FilterIdHigh = 0x0000;
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
  canfilterconfig2.FilterIdLow = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  canfilterconfig2.FilterMaskIdHigh = 0xFFFF;
 8001936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800193a:	60bb      	str	r3, [r7, #8]
  canfilterconfig2.FilterMaskIdLow = 0xFFFC;
 800193c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001940:	60fb      	str	r3, [r7, #12]
  canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001946:	2301      	movs	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
  canfilterconfig2.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 800194a:	230e      	movs	r3, #14
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2);
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	4803      	ldr	r0, [pc, #12]	@ (8001960 <MX_CAN2_Init+0xa0>)
 8001954:	f000 fe72 	bl	800263c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	@ 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200000dc 	.word	0x200000dc
 8001964:	40006800 	.word	0x40006800

08001968 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800196c:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <MX_SPI1_Init+0x60>)
 800196e:	4a17      	ldr	r2, [pc, #92]	@ (80019cc <MX_SPI1_Init+0x64>)
 8001970:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <MX_SPI1_Init+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <MX_SPI1_Init+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <MX_SPI1_Init+0x60>)
 8001980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001984:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_SPI1_Init+0x60>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_SPI1_Init+0x60>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <MX_SPI1_Init+0x60>)
 8001994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001998:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <MX_SPI1_Init+0x60>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_SPI1_Init+0x60>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <MX_SPI1_Init+0x60>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_SPI1_Init+0x60>)
 80019ae:	220a      	movs	r2, #10
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_SPI1_Init+0x60>)
 80019b4:	f003 f92e 	bl	8004c14 <HAL_SPI_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80019be:	f000 f971 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000013c 	.word	0x2000013c
 80019cc:	40013000 	.word	0x40013000

080019d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <MX_TIM1_Init+0x98>)
 80019ee:	4a1f      	ldr	r2, [pc, #124]	@ (8001a6c <MX_TIM1_Init+0x9c>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <MX_TIM1_Init+0x98>)
 80019f4:	22b4      	movs	r2, #180	@ 0xb4
 80019f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <MX_TIM1_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <MX_TIM1_Init+0x98>)
 8001a00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <MX_TIM1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_TIM1_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <MX_TIM1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a18:	4813      	ldr	r0, [pc, #76]	@ (8001a68 <MX_TIM1_Init+0x98>)
 8001a1a:	f003 fd5f 	bl	80054dc <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a24:	f000 f93e 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <MX_TIM1_Init+0x98>)
 8001a36:	f003 fe09 	bl	800564c <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a40:	f000 f930 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_TIM1_Init+0x98>)
 8001a52:	f003 fffd 	bl	8005a50 <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a5c:	f000 f922 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000254 	.word	0x20000254
 8001a6c:	40010000 	.word	0x40010000

08001a70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <MX_TIM8_Init+0x9c>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001a94:	22b4      	movs	r2, #180	@ 0xb4
 8001a96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ab8:	4813      	ldr	r0, [pc, #76]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001aba:	f003 fd0f 	bl	80054dc <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f000 f8ee 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001ad6:	f003 fdb9 	bl	800564c <HAL_TIM_ConfigClockSource>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001ae0:	f000 f8e0 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_TIM8_Init+0x98>)
 8001af2:	f003 ffad 	bl	8005a50 <HAL_TIMEx_MasterConfigSynchronization>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001afc:	f000 f8d2 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000029c 	.word	0x2000029c
 8001b0c:	40010400 	.word	0x40010400

08001b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <MX_DMA_Init+0x4c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <MX_DMA_Init+0x4c>)
 8001b20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <MX_DMA_Init+0x4c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2038      	movs	r0, #56	@ 0x38
 8001b38:	f001 fbdb 	bl	80032f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b3c:	2038      	movs	r0, #56	@ 0x38
 8001b3e:	f001 fbf4 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	203b      	movs	r0, #59	@ 0x3b
 8001b48:	f001 fbd3 	bl	80032f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001b4c:	203b      	movs	r0, #59	@ 0x3b
 8001b4e:	f001 fbec 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a45      	ldr	r2, [pc, #276]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b3f      	ldr	r3, [pc, #252]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a37      	ldr	r2, [pc, #220]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b35      	ldr	r3, [pc, #212]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <MX_GPIO_Init+0x134>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001bec:	482a      	ldr	r0, [pc, #168]	@ (8001c98 <MX_GPIO_Init+0x138>)
 8001bee:	f002 f9cf 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4824      	ldr	r0, [pc, #144]	@ (8001c9c <MX_GPIO_Init+0x13c>)
 8001c0a:	f001 ff21 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481d      	ldr	r0, [pc, #116]	@ (8001c98 <MX_GPIO_Init+0x138>)
 8001c22:	f001 ff15 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c26:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4816      	ldr	r0, [pc, #88]	@ (8001c98 <MX_GPIO_Init+0x138>)
 8001c40:	f001 ff06 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c44:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4810      	ldr	r0, [pc, #64]	@ (8001c9c <MX_GPIO_Init+0x13c>)
 8001c5a:	f001 fef9 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <MX_GPIO_Init+0x140>)
 8001c76:	f001 feeb 	bl	8003a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2028      	movs	r0, #40	@ 0x28
 8001c80:	f001 fb37 	bl	80032f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c84:	2028      	movs	r0, #40	@ 0x28
 8001c86:	f001 fb50 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <Error_Handler+0x8>

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	@ 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e58 <HAL_CAN_MspInit+0x158>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d13e      	bne.n	8001da0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d22:	4b4e      	ldr	r3, [pc, #312]	@ (8001e5c <HAL_CAN_MspInit+0x15c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a4c      	ldr	r2, [pc, #304]	@ (8001e5c <HAL_CAN_MspInit+0x15c>)
 8001d2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e5c <HAL_CAN_MspInit+0x15c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10d      	bne.n	8001d50 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	4b49      	ldr	r3, [pc, #292]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	4a48      	ldr	r2, [pc, #288]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001d3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d44:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	4b42      	ldr	r3, [pc, #264]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	4a41      	ldr	r2, [pc, #260]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d60:	4b3f      	ldr	r3, [pc, #252]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d7e:	2309      	movs	r3, #9
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4836      	ldr	r0, [pc, #216]	@ (8001e64 <HAL_CAN_MspInit+0x164>)
 8001d8a:	f001 fe61 	bl	8003a50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	2014      	movs	r0, #20
 8001d94:	f001 faad 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d98:	2014      	movs	r0, #20
 8001d9a:	f001 fac6 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d9e:	e057      	b.n	8001e50 <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a30      	ldr	r2, [pc, #192]	@ (8001e68 <HAL_CAN_MspInit+0x168>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d152      	bne.n	8001e50 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001db4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dba:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <HAL_CAN_MspInit+0x15c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a23      	ldr	r2, [pc, #140]	@ (8001e5c <HAL_CAN_MspInit+0x15c>)
 8001dce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <HAL_CAN_MspInit+0x15c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10d      	bne.n	8001df4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001de2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e04:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <HAL_CAN_MspInit+0x160>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e10:	2360      	movs	r3, #96	@ 0x60
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001e20:	2309      	movs	r3, #9
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4810      	ldr	r0, [pc, #64]	@ (8001e6c <HAL_CAN_MspInit+0x16c>)
 8001e2c:	f001 fe10 	bl	8003a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	2040      	movs	r0, #64	@ 0x40
 8001e36:	f001 fa5c 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e3a:	2040      	movs	r0, #64	@ 0x40
 8001e3c:	f001 fa75 	bl	800332a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2041      	movs	r0, #65	@ 0x41
 8001e46:	f001 fa54 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001e4a:	2041      	movs	r0, #65	@ 0x41
 8001e4c:	f001 fa6d 	bl	800332a <HAL_NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	@ 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40006400 	.word	0x40006400
 8001e5c:	2000057c 	.word	0x2000057c
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40006800 	.word	0x40006800
 8001e6c:	40020400 	.word	0x40020400

08001e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff8 <HAL_SPI_MspInit+0x188>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	f040 80ae 	bne.w	8001ff0 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	4b58      	ldr	r3, [pc, #352]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9c:	4a57      	ldr	r2, [pc, #348]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001e9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ea2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea4:	4b55      	ldr	r3, [pc, #340]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	4a50      	ldr	r2, [pc, #320]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec0:	4b4e      	ldr	r3, [pc, #312]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed4:	4a49      	ldr	r2, [pc, #292]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001edc:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_SPI_MspInit+0x18c>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee8:	23c0      	movs	r3, #192	@ 0xc0
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef8:	2305      	movs	r3, #5
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	483f      	ldr	r0, [pc, #252]	@ (8002000 <HAL_SPI_MspInit+0x190>)
 8001f04:	f001 fda4 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f18:	2305      	movs	r3, #5
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	4838      	ldr	r0, [pc, #224]	@ (8002004 <HAL_SPI_MspInit+0x194>)
 8001f24:	f001 fd94 	bl	8003a50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f28:	4b37      	ldr	r3, [pc, #220]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f2a:	4a38      	ldr	r2, [pc, #224]	@ (800200c <HAL_SPI_MspInit+0x19c>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f2e:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f30:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f36:	4b34      	ldr	r3, [pc, #208]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b31      	ldr	r3, [pc, #196]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f50:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001f56:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f62:	4b29      	ldr	r3, [pc, #164]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f68:	4827      	ldr	r0, [pc, #156]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f6a:	f001 fa07 	bl	800337c <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001f74:	f7ff fe96 	bl	8001ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001f7e:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <HAL_SPI_MspInit+0x198>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001f86:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <HAL_SPI_MspInit+0x1a4>)
 8001f88:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001f8c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f90:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001f94:	2240      	movs	r2, #64	@ 0x40
 8001f96:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fa4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fc4:	4812      	ldr	r0, [pc, #72]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fc6:	f001 f9d9 	bl	800337c <HAL_DMA_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001fd0:	f7ff fe68 	bl	8001ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fd8:	649a      	str	r2, [r3, #72]	@ 0x48
 8001fda:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <HAL_SPI_MspInit+0x1a0>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2023      	movs	r0, #35	@ 0x23
 8001fe6:	f001 f984 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fea:	2023      	movs	r0, #35	@ 0x23
 8001fec:	f001 f99d 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	@ 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	20000194 	.word	0x20000194
 800200c:	40026410 	.word	0x40026410
 8002010:	200001f4 	.word	0x200001f4
 8002014:	40026458 	.word	0x40026458

08002018 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a10      	ldr	r2, [pc, #64]	@ (8002068 <HAL_SPI_MspDeInit+0x50>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d11a      	bne.n	8002060 <HAL_SPI_MspDeInit+0x48>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_SPI_MspDeInit+0x54>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	4a0f      	ldr	r2, [pc, #60]	@ (800206c <HAL_SPI_MspDeInit+0x54>)
 8002030:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002034:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8002036:	21c0      	movs	r1, #192	@ 0xc0
 8002038:	480d      	ldr	r0, [pc, #52]	@ (8002070 <HAL_SPI_MspDeInit+0x58>)
 800203a:	f001 fe9d 	bl	8003d78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800203e:	2108      	movs	r1, #8
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <HAL_SPI_MspDeInit+0x5c>)
 8002042:	f001 fe99 	bl	8003d78 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4618      	mov	r0, r3
 800204c:	f001 fa44 	bl	80034d8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	4618      	mov	r0, r3
 8002056:	f001 fa3f 	bl	80034d8 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800205a:	2023      	movs	r0, #35	@ 0x23
 800205c:	f001 f973 	bl	8003346 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40013000 	.word	0x40013000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <HAL_TIM_Base_MspInit+0x64>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6453      	str	r3, [r2, #68]	@ 0x44
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020a6:	e012      	b.n	80020ce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <HAL_TIM_Base_MspInit+0x6c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40010400 	.word	0x40010400

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <NMI_Handler+0x4>

080020f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <MemManage_Handler+0x4>

08002100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <UsageFault_Handler+0x4>

08002110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213e:	f000 f961 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <CAN1_RX0_IRQHandler+0x10>)
 800214e:	f000 fdac 	bl	8002caa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200000b4 	.word	0x200000b4

0800215c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002160:	4802      	ldr	r0, [pc, #8]	@ (800216c <SPI1_IRQHandler+0x10>)
 8002162:	f002 fe9d 	bl	8004ea0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000013c 	.word	0x2000013c

08002170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002174:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002178:	f001 ff24 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800217c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002180:	f001 ff20 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <DMA2_Stream0_IRQHandler+0x10>)
 800218e:	f001 fa23 	bl	80035d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000194 	.word	0x20000194

0800219c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021a0:	4802      	ldr	r0, [pc, #8]	@ (80021ac <DMA2_Stream3_IRQHandler+0x10>)
 80021a2:	f001 fa19 	bl	80035d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200001f4 	.word	0x200001f4

080021b0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <CAN2_RX0_IRQHandler+0x10>)
 80021b6:	f000 fd78 	bl	8002caa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200000dc 	.word	0x200000dc

080021c4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <CAN2_RX1_IRQHandler+0x10>)
 80021ca:	f000 fd6e 	bl	8002caa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000dc 	.word	0x200000dc

080021d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e00a      	b.n	8002200 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ea:	f3af 8000 	nop.w
 80021ee:	4601      	mov	r1, r0
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	60ba      	str	r2, [r7, #8]
 80021f6:	b2ca      	uxtb	r2, r1
 80021f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbf0      	blt.n	80021ea <_read+0x12>
	}

return len;
 8002208:	687b      	ldr	r3, [r7, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
	return -1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800223a:	605a      	str	r2, [r3, #4]
	return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_isatty>:

int _isatty(int file)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
	return 1;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f003 fe92 	bl	8005fd4 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	@ (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20020000 	.word	0x20020000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	20000580 	.word	0x20000580
 80022e4:	200006d8 	.word	0x200006d8

080022e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002310:	480d      	ldr	r0, [pc, #52]	@ (8002348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002312:	490e      	ldr	r1, [pc, #56]	@ (800234c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002314:	4a0e      	ldr	r2, [pc, #56]	@ (8002350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a0b      	ldr	r2, [pc, #44]	@ (8002354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002328:	4c0b      	ldr	r4, [pc, #44]	@ (8002358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002336:	f7ff ffd7 	bl	80022e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f003 fe51 	bl	8005fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7fe f939 	bl	80005b4 <main>
  bx  lr    
 8002342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002350:	08006594 	.word	0x08006594
  ldr r2, =_sbss
 8002354:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002358:	200006d4 	.word	0x200006d4

0800235c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>
	...

08002360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <HAL_Init+0x40>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800236e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_Init+0x40>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <HAL_Init+0x40>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 ffa7 	bl	80032dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	2000      	movs	r0, #0
 8002390:	f000 f808 	bl	80023a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff fc8c 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_InitTick+0x54>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_InitTick+0x58>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 ffcd 	bl	8003362 <HAL_SYSTICK_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d80a      	bhi.n	80023ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f000 ff87 	bl	80032f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4a06      	ldr	r2, [pc, #24]	@ (8002400 <HAL_InitTick+0x5c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2000002c 	.word	0x2000002c
 80023fc:	20000034 	.word	0x20000034
 8002400:	20000030 	.word	0x20000030

08002404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000034 	.word	0x20000034
 8002428:	20000584 	.word	0x20000584

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000584 	.word	0x20000584

08002444 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0ed      	b.n	8002632 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fc4c 	bl	8001d00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002478:	f7ff ffd8 	bl	800242c <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800247e:	e012      	b.n	80024a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002480:	f7ff ffd4 	bl	800242c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b0a      	cmp	r3, #10
 800248c:	d90b      	bls.n	80024a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2205      	movs	r2, #5
 800249e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0c5      	b.n	8002632 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0e5      	beq.n	8002480 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0202 	bic.w	r2, r2, #2
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c4:	f7ff ffb2 	bl	800242c <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ca:	e012      	b.n	80024f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024cc:	f7ff ffae 	bl	800242c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b0a      	cmp	r3, #10
 80024d8:	d90b      	bls.n	80024f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2205      	movs	r2, #5
 80024ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e09f      	b.n	8002632 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e5      	bne.n	80024cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e1b      	ldrb	r3, [r3, #24]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e007      	b.n	800252a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7e5b      	ldrb	r3, [r3, #25]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e9b      	ldrb	r3, [r3, #26]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e007      	b.n	800257e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0220 	bic.w	r2, r2, #32
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7edb      	ldrb	r3, [r3, #27]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0210 	bic.w	r2, r2, #16
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e007      	b.n	80025a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0210 	orr.w	r2, r2, #16
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7f1b      	ldrb	r3, [r3, #28]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0208 	orr.w	r2, r2, #8
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e007      	b.n	80025d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0208 	bic.w	r2, r2, #8
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7f5b      	ldrb	r3, [r3, #29]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0204 	orr.w	r2, r2, #4
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e007      	b.n	80025fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0204 	bic.w	r2, r2, #4
 80025fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	ea42 0103 	orr.w	r1, r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002652:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d003      	beq.n	8002662 <HAL_CAN_ConfigFilter+0x26>
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b02      	cmp	r3, #2
 800265e:	f040 80be 	bne.w	80027de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002662:	4b65      	ldr	r3, [pc, #404]	@ (80027f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002664:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800267c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	431a      	orrs	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2201      	movs	r2, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	401a      	ands	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d123      	bne.n	800270c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3248      	adds	r2, #72	@ 0x48
 80026ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002700:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002702:	6979      	ldr	r1, [r7, #20]
 8002704:	3348      	adds	r3, #72	@ 0x48
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d122      	bne.n	800275a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	431a      	orrs	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002734:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3248      	adds	r2, #72	@ 0x48
 800273a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800274e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002750:	6979      	ldr	r1, [r7, #20]
 8002752:	3348      	adds	r3, #72	@ 0x48
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	43db      	mvns	r3, r3
 800276c:	401a      	ands	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002774:	e007      	b.n	8002786 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	431a      	orrs	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43db      	mvns	r3, r3
 8002798:	401a      	ands	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80027a0:	e007      	b.n	80027b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027d0:	f023 0201 	bic.w	r2, r3, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e006      	b.n	80027ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
  }
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40006400 	.word	0x40006400

080027fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d12e      	bne.n	800286e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002828:	f7ff fe00 	bl	800242c <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800282e:	e012      	b.n	8002856 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002830:	f7ff fdfc 	bl	800242c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b0a      	cmp	r3, #10
 800283c:	d90b      	bls.n	8002856 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2205      	movs	r2, #5
 800284e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e012      	b.n	800287c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e5      	bne.n	8002830 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e006      	b.n	800287c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	@ 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002898:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028a2:	7ffb      	ldrb	r3, [r7, #31]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d003      	beq.n	80028b0 <HAL_CAN_AddTxMessage+0x2c>
 80028a8:	7ffb      	ldrb	r3, [r7, #31]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	f040 80b8 	bne.w	8002a20 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80a0 	beq.w	8002a10 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	0e1b      	lsrs	r3, r3, #24
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d907      	bls.n	80028f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e09e      	b.n	8002a2e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028f0:	2201      	movs	r2, #1
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	409a      	lsls	r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800290c:	68f9      	ldr	r1, [r7, #12]
 800290e:	6809      	ldr	r1, [r1, #0]
 8002910:	431a      	orrs	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3318      	adds	r3, #24
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e00f      	b.n	800293e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002928:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002932:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3318      	adds	r3, #24
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	440b      	add	r3, r1
 800293c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3318      	adds	r3, #24
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	440b      	add	r3, r1
 800294e:	3304      	adds	r3, #4
 8002950:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	7d1b      	ldrb	r3, [r3, #20]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d111      	bne.n	800297e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3318      	adds	r3, #24
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	4413      	add	r3, r2
 8002966:	3304      	adds	r3, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3318      	adds	r3, #24
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	440b      	add	r3, r1
 800297a:	3304      	adds	r3, #4
 800297c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3307      	adds	r3, #7
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	061a      	lsls	r2, r3, #24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3306      	adds	r3, #6
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3305      	adds	r3, #5
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	4313      	orrs	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	3204      	adds	r2, #4
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	4610      	mov	r0, r2
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	6811      	ldr	r1, [r2, #0]
 80029a6:	ea43 0200 	orr.w	r2, r3, r0
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80029b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3303      	adds	r3, #3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	061a      	lsls	r2, r3, #24
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3302      	adds	r3, #2
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	4313      	orrs	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	4610      	mov	r0, r2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	6811      	ldr	r1, [r2, #0]
 80029dc:	ea43 0200 	orr.w	r2, r3, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80029ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3318      	adds	r3, #24
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	4413      	add	r3, r2
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	6811      	ldr	r1, [r2, #0]
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3318      	adds	r3, #24
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	440b      	add	r3, r1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e00e      	b.n	8002a2e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e006      	b.n	8002a2e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	@ 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d003      	beq.n	8002a5e <HAL_CAN_GetRxMessage+0x24>
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	f040 80f3 	bne.w	8002c44 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10e      	bne.n	8002a82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0e7      	b.n	8002c52 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d8      	b.n	8002c52 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	331b      	adds	r3, #27
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4413      	add	r3, r2
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0204 	and.w	r2, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	331b      	adds	r3, #27
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	4413      	add	r3, r2
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0d5b      	lsrs	r3, r3, #21
 8002ace:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	331b      	adds	r3, #27
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	08db      	lsrs	r3, r3, #3
 8002ae8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	331b      	adds	r3, #27
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	4413      	add	r3, r2
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0202 	and.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	331b      	adds	r3, #27
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	331b      	adds	r3, #27
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	331b      	adds	r3, #27
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	4413      	add	r3, r2
 8002b42:	3304      	adds	r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0a1a      	lsrs	r2, r3, #8
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0c1a      	lsrs	r2, r3, #16
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3302      	adds	r3, #2
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e1a      	lsrs	r2, r3, #24
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	3303      	adds	r3, #3
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0a1a      	lsrs	r2, r3, #8
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	3305      	adds	r3, #5
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0c1a      	lsrs	r2, r3, #16
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	3306      	adds	r3, #6
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e1a      	lsrs	r2, r3, #24
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	3307      	adds	r3, #7
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0220 	orr.w	r2, r2, #32
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	e007      	b.n	8002c40 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0220 	orr.w	r2, r2, #32
 8002c3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e006      	b.n	8002c52 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d002      	beq.n	8002c7c <HAL_CAN_ActivateNotification+0x1e>
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d109      	bne.n	8002c90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6959      	ldr	r1, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e006      	b.n	8002c9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b08a      	sub	sp, #40	@ 0x28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d07c      	beq.n	8002dea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d023      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f983 	bl	8003018 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d12:	e016      	b.n	8002d42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d26:	e00c      	b.n	8002d42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3a:	e002      	b.n	8002d42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f989 	bl	8003054 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d024      	beq.n	8002d96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f963 	bl	800302c <HAL_CAN_TxMailbox1CompleteCallback>
 8002d66:	e016      	b.n	8002d96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7a:	e00c      	b.n	8002d96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8e:	e002      	b.n	8002d96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f969 	bl	8003068 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d024      	beq.n	8002dea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002da8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f943 	bl	8003040 <HAL_CAN_TxMailbox2CompleteCallback>
 8002dba:	e016      	b.n	8002dea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dce:	e00c      	b.n	8002dea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de2:	e002      	b.n	8002dea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f949 	bl	800307c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00c      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2208      	movs	r2, #8
 8002e28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f930 	bl	8003090 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7fd fb7b 	bl	8000544 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00c      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2210      	movs	r2, #16
 8002e70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f908 	bl	80030a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fd fb65 	bl	800057c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2210      	movs	r2, #16
 8002ecc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8f2 	bl	80030b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2208      	movs	r2, #8
 8002eee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8eb 	bl	80030cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d07b      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d072      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d043      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d03e      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f78:	2b60      	cmp	r3, #96	@ 0x60
 8002f7a:	d02b      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0x32a>
 8002f7c:	2b60      	cmp	r3, #96	@ 0x60
 8002f7e:	d82e      	bhi.n	8002fde <HAL_CAN_IRQHandler+0x334>
 8002f80:	2b50      	cmp	r3, #80	@ 0x50
 8002f82:	d022      	beq.n	8002fca <HAL_CAN_IRQHandler+0x320>
 8002f84:	2b50      	cmp	r3, #80	@ 0x50
 8002f86:	d82a      	bhi.n	8002fde <HAL_CAN_IRQHandler+0x334>
 8002f88:	2b40      	cmp	r3, #64	@ 0x40
 8002f8a:	d019      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0x316>
 8002f8c:	2b40      	cmp	r3, #64	@ 0x40
 8002f8e:	d826      	bhi.n	8002fde <HAL_CAN_IRQHandler+0x334>
 8002f90:	2b30      	cmp	r3, #48	@ 0x30
 8002f92:	d010      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x30c>
 8002f94:	2b30      	cmp	r3, #48	@ 0x30
 8002f96:	d822      	bhi.n	8002fde <HAL_CAN_IRQHandler+0x334>
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d002      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x2f8>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d005      	beq.n	8002fac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fa0:	e01d      	b.n	8002fde <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	f043 0308 	orr.w	r3, r3, #8
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002faa:	e019      	b.n	8002fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	f043 0310 	orr.w	r3, r3, #16
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fb4:	e014      	b.n	8002fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fbe:	e00f      	b.n	8002fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fc8:	e00a      	b.n	8002fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fd2:	e005      	b.n	8002fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002fde:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002fee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f868 	bl	80030e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003010:	bf00      	nop
 8003012:	3728      	adds	r7, #40	@ 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <__NVIC_SetPriorityGrouping>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003104:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003110:	4013      	ands	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800311c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003126:	4a04      	ldr	r2, [pc, #16]	@ (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60d3      	str	r3, [r2, #12]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_GetPriorityGrouping>:
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003140:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <__NVIC_GetPriorityGrouping+0x18>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	f003 0307 	and.w	r3, r3, #7
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_EnableIRQ>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0b      	blt.n	8003182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	@ (8003190 <__NVIC_EnableIRQ+0x38>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_DisableIRQ>:
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db12      	blt.n	80031cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	490a      	ldr	r1, [pc, #40]	@ (80031d8 <__NVIC_DisableIRQ+0x44>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	3320      	adds	r3, #32
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031c0:	f3bf 8f4f 	dsb	sy
}
 80031c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031c6:	f3bf 8f6f 	isb	sy
}
 80031ca:	bf00      	nop
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	@ (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	@ (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	@ 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	@ 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <SysTick_Config>:
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032a8:	d301      	bcc.n	80032ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00f      	b.n	80032ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ae:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <SysTick_Config+0x40>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b6:	210f      	movs	r1, #15
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	f7ff ff8e 	bl	80031dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c0:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <SysTick_Config+0x40>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c6:	4b04      	ldr	r3, [pc, #16]	@ (80032d8 <SysTick_Config+0x40>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000e010 	.word	0xe000e010

080032dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff05 	bl	80030f4 <__NVIC_SetPriorityGrouping>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff1a 	bl	800313c <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff8e 	bl	8003230 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff5d 	bl	80031dc <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff0d 	bl	8003158 <__NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff1d 	bl	8003194 <__NVIC_DisableIRQ>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff94 	bl	8003298 <SysTick_Config>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff f850 	bl	800242c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e099      	b.n	80034cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b8:	e00f      	b.n	80033da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ba:	f7ff f837 	bl	800242c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d908      	bls.n	80033da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2203      	movs	r2, #3
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e078      	b.n	80034cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e8      	bne.n	80033ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <HAL_DMA_Init+0x158>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	2b04      	cmp	r3, #4
 8003432:	d107      	bne.n	8003444 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	4313      	orrs	r3, r2
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0307 	bic.w	r3, r3, #7
 800345a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	2b04      	cmp	r3, #4
 800346c:	d117      	bne.n	800349e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00e      	beq.n	800349e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa69 	bl	8003958 <DMA_CheckFifoParam>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2240      	movs	r2, #64	@ 0x40
 8003490:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800349a:	2301      	movs	r3, #1
 800349c:	e016      	b.n	80034cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa20 	bl	80038ec <DMA_CalcBaseAndBitshift>
 80034ac:	4603      	mov	r3, r0
 80034ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	223f      	movs	r2, #63	@ 0x3f
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	f010803f 	.word	0xf010803f

080034d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e050      	b.n	800358c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d101      	bne.n	80034fa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	e048      	b.n	800358c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2221      	movs	r2, #33	@ 0x21
 8003538:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9d6 	bl	80038ec <DMA_CalcBaseAndBitshift>
 8003540:	4603      	mov	r3, r0
 8003542:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	223f      	movs	r2, #63	@ 0x3f
 800356e:	409a      	lsls	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d004      	beq.n	80035b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2280      	movs	r2, #128	@ 0x80
 80035ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00c      	b.n	80035cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2205      	movs	r2, #5
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003820 <HAL_DMA_IRQHandler+0x248>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a8e      	ldr	r2, [pc, #568]	@ (8003824 <HAL_DMA_IRQHandler+0x24c>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0a9b      	lsrs	r3, r3, #10
 80035f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003602:	2208      	movs	r2, #8
 8003604:	409a      	lsls	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01a      	beq.n	8003644 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	2208      	movs	r2, #8
 8003632:	409a      	lsls	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	2201      	movs	r2, #1
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d012      	beq.n	800367a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003666:	2201      	movs	r2, #1
 8003668:	409a      	lsls	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367e:	2204      	movs	r2, #4
 8003680:	409a      	lsls	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	2204      	movs	r2, #4
 800369e:	409a      	lsls	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	2210      	movs	r2, #16
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d043      	beq.n	8003748 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d03c      	beq.n	8003748 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	2210      	movs	r2, #16
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d018      	beq.n	800371a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d024      	beq.n	8003748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
 8003706:	e01f      	b.n	8003748 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
 8003718:	e016      	b.n	8003748 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0208 	bic.w	r2, r2, #8
 8003736:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374c:	2220      	movs	r2, #32
 800374e:	409a      	lsls	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 808f 	beq.w	8003878 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8087 	beq.w	8003878 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376e:	2220      	movs	r2, #32
 8003770:	409a      	lsls	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b05      	cmp	r3, #5
 8003780:	d136      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0216 	bic.w	r2, r2, #22
 8003790:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x1da>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0208 	bic.w	r2, r2, #8
 80037c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c6:	223f      	movs	r2, #63	@ 0x3f
 80037c8:	409a      	lsls	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d07e      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
        }
        return;
 80037ee:	e079      	b.n	80038e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01d      	beq.n	800383a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003810:	2b00      	cmp	r3, #0
 8003812:	d031      	beq.n	8003878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
 800381c:	e02c      	b.n	8003878 <HAL_DMA_IRQHandler+0x2a0>
 800381e:	bf00      	nop
 8003820:	2000002c 	.word	0x2000002c
 8003824:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d023      	beq.n	8003878 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e01e      	b.n	8003878 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10f      	bne.n	8003868 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0210 	bic.w	r2, r2, #16
 8003856:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387c:	2b00      	cmp	r3, #0
 800387e:	d032      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d022      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2205      	movs	r2, #5
 8003890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	3301      	adds	r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d307      	bcc.n	80038c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f2      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x2cc>
 80038be:	e000      	b.n	80038c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
 80038e2:	e000      	b.n	80038e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038e4:	bf00      	nop
    }
  }
}
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	3b10      	subs	r3, #16
 80038fc:	4a14      	ldr	r2, [pc, #80]	@ (8003950 <DMA_CalcBaseAndBitshift+0x64>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003906:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <DMA_CalcBaseAndBitshift+0x68>)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d909      	bls.n	800392e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	659a      	str	r2, [r3, #88]	@ 0x58
 800392c:	e007      	b.n	800393e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	aaaaaaab 	.word	0xaaaaaaab
 8003954:	0800657c 	.word	0x0800657c

08003958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11f      	bne.n	80039b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d856      	bhi.n	8003a26 <DMA_CheckFifoParam+0xce>
 8003978:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <DMA_CheckFifoParam+0x28>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	08003991 	.word	0x08003991
 8003984:	080039a3 	.word	0x080039a3
 8003988:	08003991 	.word	0x08003991
 800398c:	08003a27 	.word	0x08003a27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d046      	beq.n	8003a2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a0:	e043      	b.n	8003a2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039aa:	d140      	bne.n	8003a2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b0:	e03d      	b.n	8003a2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ba:	d121      	bne.n	8003a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d837      	bhi.n	8003a32 <DMA_CheckFifoParam+0xda>
 80039c2:	a201      	add	r2, pc, #4	@ (adr r2, 80039c8 <DMA_CheckFifoParam+0x70>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039df 	.word	0x080039df
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	080039f1 	.word	0x080039f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e030      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d025      	beq.n	8003a36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ee:	e022      	b.n	8003a36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039f8:	d11f      	bne.n	8003a3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039fe:	e01c      	b.n	8003a3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d903      	bls.n	8003a0e <DMA_CheckFifoParam+0xb6>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d003      	beq.n	8003a14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a0c:	e018      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
      break;
 8003a12:	e015      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e00b      	b.n	8003a3e <DMA_CheckFifoParam+0xe6>
      break;
 8003a26:	bf00      	nop
 8003a28:	e00a      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e008      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e006      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e004      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e002      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	e165      	b.n	8003d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	f040 8154 	bne.w	8003d32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d005      	beq.n	8003aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d130      	bne.n	8003b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2203      	movs	r2, #3
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad8:	2201      	movs	r2, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 0201 	and.w	r2, r3, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d017      	beq.n	8003b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d123      	bne.n	8003b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	08da      	lsrs	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3208      	adds	r2, #8
 8003b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	220f      	movs	r2, #15
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	08da      	lsrs	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3208      	adds	r2, #8
 8003b8e:	69b9      	ldr	r1, [r7, #24]
 8003b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0203 	and.w	r2, r3, #3
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80ae 	beq.w	8003d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	4b5d      	ldr	r3, [pc, #372]	@ (8003d50 <HAL_GPIO_Init+0x300>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	4a5c      	ldr	r2, [pc, #368]	@ (8003d50 <HAL_GPIO_Init+0x300>)
 8003be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003be6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d50 <HAL_GPIO_Init+0x300>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf2:	4a58      	ldr	r2, [pc, #352]	@ (8003d54 <HAL_GPIO_Init+0x304>)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	220f      	movs	r2, #15
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4f      	ldr	r2, [pc, #316]	@ (8003d58 <HAL_GPIO_Init+0x308>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d025      	beq.n	8003c6a <HAL_GPIO_Init+0x21a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4e      	ldr	r2, [pc, #312]	@ (8003d5c <HAL_GPIO_Init+0x30c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <HAL_GPIO_Init+0x216>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4d      	ldr	r2, [pc, #308]	@ (8003d60 <HAL_GPIO_Init+0x310>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_Init+0x212>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4c      	ldr	r2, [pc, #304]	@ (8003d64 <HAL_GPIO_Init+0x314>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0x20e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4b      	ldr	r2, [pc, #300]	@ (8003d68 <HAL_GPIO_Init+0x318>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_Init+0x20a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4a      	ldr	r2, [pc, #296]	@ (8003d6c <HAL_GPIO_Init+0x31c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_Init+0x206>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a49      	ldr	r2, [pc, #292]	@ (8003d70 <HAL_GPIO_Init+0x320>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_Init+0x202>
 8003c4e:	2306      	movs	r3, #6
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c52:	2307      	movs	r3, #7
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	@ (8003d54 <HAL_GPIO_Init+0x304>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a31      	ldr	r2, [pc, #196]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a26      	ldr	r2, [pc, #152]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1a      	ldr	r3, [pc, #104]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a11      	ldr	r2, [pc, #68]	@ (8003d74 <HAL_GPIO_Init+0x324>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae96 	bls.w	8003a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	@ 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40013c00 	.word	0x40013c00

08003d78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e0c7      	b.n	8003f24 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d94:	2201      	movs	r2, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	f040 80b7 	bne.w	8003f1e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003db0:	4a62      	ldr	r2, [pc, #392]	@ (8003f3c <HAL_GPIO_DeInit+0x1c4>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3302      	adds	r3, #2
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f40 <HAL_GPIO_DeInit+0x1c8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d025      	beq.n	8003e26 <HAL_GPIO_DeInit+0xae>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a59      	ldr	r2, [pc, #356]	@ (8003f44 <HAL_GPIO_DeInit+0x1cc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01f      	beq.n	8003e22 <HAL_GPIO_DeInit+0xaa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a58      	ldr	r2, [pc, #352]	@ (8003f48 <HAL_GPIO_DeInit+0x1d0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_DeInit+0xa6>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a57      	ldr	r2, [pc, #348]	@ (8003f4c <HAL_GPIO_DeInit+0x1d4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_DeInit+0xa2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a56      	ldr	r2, [pc, #344]	@ (8003f50 <HAL_GPIO_DeInit+0x1d8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_DeInit+0x9e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a55      	ldr	r2, [pc, #340]	@ (8003f54 <HAL_GPIO_DeInit+0x1dc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_DeInit+0x9a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a54      	ldr	r2, [pc, #336]	@ (8003f58 <HAL_GPIO_DeInit+0x1e0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_DeInit+0x96>
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	e00c      	b.n	8003e28 <HAL_GPIO_DeInit+0xb0>
 8003e0e:	2307      	movs	r3, #7
 8003e10:	e00a      	b.n	8003e28 <HAL_GPIO_DeInit+0xb0>
 8003e12:	2305      	movs	r3, #5
 8003e14:	e008      	b.n	8003e28 <HAL_GPIO_DeInit+0xb0>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e006      	b.n	8003e28 <HAL_GPIO_DeInit+0xb0>
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e004      	b.n	8003e28 <HAL_GPIO_DeInit+0xb0>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_DeInit+0xb0>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_GPIO_DeInit+0xb0>
 8003e26:	2300      	movs	r3, #0
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	f002 0203 	and.w	r2, r2, #3
 8003e2e:	0092      	lsls	r2, r2, #2
 8003e30:	4093      	lsls	r3, r2
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d132      	bne.n	8003e9e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e38:	4b48      	ldr	r3, [pc, #288]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	4946      	ldr	r1, [pc, #280]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e46:	4b45      	ldr	r3, [pc, #276]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	4943      	ldr	r1, [pc, #268]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e54:	4b41      	ldr	r3, [pc, #260]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	493f      	ldr	r1, [pc, #252]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e62:	4b3e      	ldr	r3, [pc, #248]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	493c      	ldr	r1, [pc, #240]	@ (8003f5c <HAL_GPIO_DeInit+0x1e4>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e80:	4a2e      	ldr	r2, [pc, #184]	@ (8003f3c <HAL_GPIO_DeInit+0x1c4>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3302      	adds	r3, #2
 8003e88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	482a      	ldr	r0, [pc, #168]	@ (8003f3c <HAL_GPIO_DeInit+0x1c4>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	400a      	ands	r2, r1
 8003e98:	3302      	adds	r3, #2
 8003e9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2103      	movs	r1, #3
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	401a      	ands	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	08da      	lsrs	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3208      	adds	r2, #8
 8003ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	08d2      	lsrs	r2, r2, #3
 8003ed4:	4019      	ands	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	401a      	ands	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2103      	movs	r1, #3
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	401a      	ands	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3301      	adds	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b0f      	cmp	r3, #15
 8003f28:	f67f af34 	bls.w	8003d94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40013800 	.word	0x40013800
 8003f40:	40020000 	.word	0x40020000
 8003f44:	40020400 	.word	0x40020400
 8003f48:	40020800 	.word	0x40020800
 8003f4c:	40020c00 	.word	0x40020c00
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40021400 	.word	0x40021400
 8003f58:	40021800 	.word	0x40021800
 8003f5c:	40013c00 	.word	0x40013c00

08003f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e001      	b.n	8003f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa0:	787b      	ldrb	r3, [r7, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fac:	e003      	b.n	8003fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	041a      	lsls	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fce:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fda:	4a05      	ldr	r2, [pc, #20]	@ (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f806 	bl	8003ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4b20      	ldr	r3, [pc, #128]	@ (800409c <HAL_PWREx_EnableOverDrive+0x90>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	4a1f      	ldr	r2, [pc, #124]	@ (800409c <HAL_PWREx_EnableOverDrive+0x90>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6413      	str	r3, [r2, #64]	@ 0x40
 8004026:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_PWREx_EnableOverDrive+0x90>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004032:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004038:	f7fe f9f8 	bl	800242c <HAL_GetTick>
 800403c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800403e:	e009      	b.n	8004054 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004040:	f7fe f9f4 	bl	800242c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800404e:	d901      	bls.n	8004054 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e01f      	b.n	8004094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004054:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d1ee      	bne.n	8004040 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004068:	f7fe f9e0 	bl	800242c <HAL_GetTick>
 800406c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800406e:	e009      	b.n	8004084 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004070:	f7fe f9dc 	bl	800242c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800407e:	d901      	bls.n	8004084 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e007      	b.n	8004094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004090:	d1ee      	bne.n	8004070 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	420e0040 	.word	0x420e0040
 80040a4:	40007000 	.word	0x40007000
 80040a8:	420e0044 	.word	0x420e0044

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0cc      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b68      	ldr	r3, [pc, #416]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d90c      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b65      	ldr	r3, [pc, #404]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a58      	ldr	r2, [pc, #352]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800410a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a52      	ldr	r2, [pc, #328]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d044      	beq.n	80041cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d119      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	2b03      	cmp	r3, #3
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b3f      	ldr	r3, [pc, #252]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e06f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e067      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b37      	ldr	r3, [pc, #220]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4934      	ldr	r1, [pc, #208]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800419c:	f7fe f946 	bl	800242c <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fe f942 	bl	800242c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041cc:	4b25      	ldr	r3, [pc, #148]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d20c      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b22      	ldr	r3, [pc, #136]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421e:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f821 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	490a      	ldr	r1, [pc, #40]	@ (800426c <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	@ (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe f8a6 	bl	80023a4 <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023c00 	.word	0x40023c00
 8004268:	40023800 	.word	0x40023800
 800426c:	0800656c 	.word	0x0800656c
 8004270:	2000002c 	.word	0x2000002c
 8004274:	20000030 	.word	0x20000030

08004278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800427c:	b0ae      	sub	sp, #184	@ 0xb8
 800427e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429e:	4bcb      	ldr	r3, [pc, #812]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b0c      	cmp	r3, #12
 80042a8:	f200 8206 	bhi.w	80046b8 <HAL_RCC_GetSysClockFreq+0x440>
 80042ac:	a201      	add	r2, pc, #4	@ (adr r2, 80042b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	080046b9 	.word	0x080046b9
 80042bc:	080046b9 	.word	0x080046b9
 80042c0:	080046b9 	.word	0x080046b9
 80042c4:	080042f1 	.word	0x080042f1
 80042c8:	080046b9 	.word	0x080046b9
 80042cc:	080046b9 	.word	0x080046b9
 80042d0:	080046b9 	.word	0x080046b9
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	080046b9 	.word	0x080046b9
 80042dc:	080046b9 	.word	0x080046b9
 80042e0:	080046b9 	.word	0x080046b9
 80042e4:	080044e9 	.word	0x080044e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4bb9      	ldr	r3, [pc, #740]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80042ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80042ee:	e1e7      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f0:	4bb8      	ldr	r3, [pc, #736]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80042f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042f6:	e1e3      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f8:	4bb4      	ldr	r3, [pc, #720]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004304:	4bb1      	ldr	r3, [pc, #708]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d071      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004310:	4bae      	ldr	r3, [pc, #696]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800431c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004328:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	f04f 0000 	mov.w	r0, #0
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	0159      	lsls	r1, r3, #5
 8004344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004348:	0150      	lsls	r0, r2, #5
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4621      	mov	r1, r4
 8004350:	1a51      	subs	r1, r2, r1
 8004352:	6439      	str	r1, [r7, #64]	@ 0x40
 8004354:	4629      	mov	r1, r5
 8004356:	eb63 0301 	sbc.w	r3, r3, r1
 800435a:	647b      	str	r3, [r7, #68]	@ 0x44
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004368:	4649      	mov	r1, r9
 800436a:	018b      	lsls	r3, r1, #6
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004372:	4641      	mov	r1, r8
 8004374:	018a      	lsls	r2, r1, #6
 8004376:	4641      	mov	r1, r8
 8004378:	1a51      	subs	r1, r2, r1
 800437a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800437c:	4649      	mov	r1, r9
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004390:	4649      	mov	r1, r9
 8004392:	00cb      	lsls	r3, r1, #3
 8004394:	4641      	mov	r1, r8
 8004396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439a:	4641      	mov	r1, r8
 800439c:	00ca      	lsls	r2, r1, #3
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	4622      	mov	r2, r4
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	462b      	mov	r3, r5
 80043ac:	460a      	mov	r2, r1
 80043ae:	eb42 0303 	adc.w	r3, r2, r3
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043c0:	4629      	mov	r1, r5
 80043c2:	024b      	lsls	r3, r1, #9
 80043c4:	4621      	mov	r1, r4
 80043c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ca:	4621      	mov	r1, r4
 80043cc:	024a      	lsls	r2, r1, #9
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80043e4:	f7fb ff0e 	bl	8000204 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043f2:	e067      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f4:	4b75      	ldr	r3, [pc, #468]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004400:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004404:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440e:	2300      	movs	r3, #0
 8004410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004412:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004428:	0150      	lsls	r0, r2, #5
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4621      	mov	r1, r4
 8004430:	1a51      	subs	r1, r2, r1
 8004432:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004434:	4629      	mov	r1, r5
 8004436:	eb63 0301 	sbc.w	r3, r3, r1
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004448:	4649      	mov	r1, r9
 800444a:	018b      	lsls	r3, r1, #6
 800444c:	4641      	mov	r1, r8
 800444e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004452:	4641      	mov	r1, r8
 8004454:	018a      	lsls	r2, r1, #6
 8004456:	4641      	mov	r1, r8
 8004458:	ebb2 0a01 	subs.w	sl, r2, r1
 800445c:	4649      	mov	r1, r9
 800445e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800446e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004476:	4692      	mov	sl, r2
 8004478:	469b      	mov	fp, r3
 800447a:	4623      	mov	r3, r4
 800447c:	eb1a 0303 	adds.w	r3, sl, r3
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	462b      	mov	r3, r5
 8004484:	eb4b 0303 	adc.w	r3, fp, r3
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004496:	4629      	mov	r1, r5
 8004498:	028b      	lsls	r3, r1, #10
 800449a:	4621      	mov	r1, r4
 800449c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a0:	4621      	mov	r1, r4
 80044a2:	028a      	lsls	r2, r1, #10
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ac:	2200      	movs	r2, #0
 80044ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80044b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80044b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80044b6:	f7fb fea5 	bl	8000204 <__aeabi_uldivmod>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4613      	mov	r3, r2
 80044c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c4:	4b41      	ldr	r3, [pc, #260]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80044d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044de:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044e6:	e0eb      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e8:	4b38      	ldr	r3, [pc, #224]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044f4:	4b35      	ldr	r3, [pc, #212]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d06b      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004500:	4b32      	ldr	r3, [pc, #200]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	099b      	lsrs	r3, r3, #6
 8004506:	2200      	movs	r2, #0
 8004508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800450a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800450c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	663b      	str	r3, [r7, #96]	@ 0x60
 8004514:	2300      	movs	r3, #0
 8004516:	667b      	str	r3, [r7, #100]	@ 0x64
 8004518:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800451c:	4622      	mov	r2, r4
 800451e:	462b      	mov	r3, r5
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	0159      	lsls	r1, r3, #5
 800452a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452e:	0150      	lsls	r0, r2, #5
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4621      	mov	r1, r4
 8004536:	1a51      	subs	r1, r2, r1
 8004538:	61b9      	str	r1, [r7, #24]
 800453a:	4629      	mov	r1, r5
 800453c:	eb63 0301 	sbc.w	r3, r3, r1
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800454e:	4659      	mov	r1, fp
 8004550:	018b      	lsls	r3, r1, #6
 8004552:	4651      	mov	r1, sl
 8004554:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004558:	4651      	mov	r1, sl
 800455a:	018a      	lsls	r2, r1, #6
 800455c:	4651      	mov	r1, sl
 800455e:	ebb2 0801 	subs.w	r8, r2, r1
 8004562:	4659      	mov	r1, fp
 8004564:	eb63 0901 	sbc.w	r9, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800457c:	4690      	mov	r8, r2
 800457e:	4699      	mov	r9, r3
 8004580:	4623      	mov	r3, r4
 8004582:	eb18 0303 	adds.w	r3, r8, r3
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	462b      	mov	r3, r5
 800458a:	eb49 0303 	adc.w	r3, r9, r3
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800459c:	4629      	mov	r1, r5
 800459e:	024b      	lsls	r3, r1, #9
 80045a0:	4621      	mov	r1, r4
 80045a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045a6:	4621      	mov	r1, r4
 80045a8:	024a      	lsls	r2, r1, #9
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045b2:	2200      	movs	r2, #0
 80045b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80045b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045bc:	f7fb fe22 	bl	8000204 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4613      	mov	r3, r2
 80045c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ca:	e065      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x420>
 80045cc:	40023800 	.word	0x40023800
 80045d0:	00f42400 	.word	0x00f42400
 80045d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d8:	4b3d      	ldr	r3, [pc, #244]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	2200      	movs	r2, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	4611      	mov	r1, r2
 80045e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ea:	2300      	movs	r3, #0
 80045ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80045ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80045f2:	4642      	mov	r2, r8
 80045f4:	464b      	mov	r3, r9
 80045f6:	f04f 0000 	mov.w	r0, #0
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	0159      	lsls	r1, r3, #5
 8004600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004604:	0150      	lsls	r0, r2, #5
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4641      	mov	r1, r8
 800460c:	1a51      	subs	r1, r2, r1
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	4649      	mov	r1, r9
 8004612:	eb63 0301 	sbc.w	r3, r3, r1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004624:	4659      	mov	r1, fp
 8004626:	018b      	lsls	r3, r1, #6
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800462e:	4651      	mov	r1, sl
 8004630:	018a      	lsls	r2, r1, #6
 8004632:	4651      	mov	r1, sl
 8004634:	1a54      	subs	r4, r2, r1
 8004636:	4659      	mov	r1, fp
 8004638:	eb63 0501 	sbc.w	r5, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4614      	mov	r4, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4643      	mov	r3, r8
 8004652:	18e3      	adds	r3, r4, r3
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	464b      	mov	r3, r9
 8004658:	eb45 0303 	adc.w	r3, r5, r3
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466a:	4629      	mov	r1, r5
 800466c:	028b      	lsls	r3, r1, #10
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004674:	4621      	mov	r1, r4
 8004676:	028a      	lsls	r2, r1, #10
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004680:	2200      	movs	r2, #0
 8004682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004684:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800468a:	f7fb fdbb 	bl	8000204 <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4613      	mov	r3, r2
 8004694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004698:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0f1b      	lsrs	r3, r3, #28
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80046a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046b6:	e003      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80046ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	37b8      	adds	r7, #184	@ 0xb8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	00f42400 	.word	0x00f42400

080046d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e28d      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8083 	beq.w	80047fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046f8:	4b94      	ldr	r3, [pc, #592]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b04      	cmp	r3, #4
 8004702:	d019      	beq.n	8004738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004704:	4b91      	ldr	r3, [pc, #580]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800470c:	2b08      	cmp	r3, #8
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004710:	4b8e      	ldr	r3, [pc, #568]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471c:	d00c      	beq.n	8004738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b8b      	ldr	r3, [pc, #556]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d112      	bne.n	8004750 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472a:	4b88      	ldr	r3, [pc, #544]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004736:	d10b      	bne.n	8004750 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	4b84      	ldr	r3, [pc, #528]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05b      	beq.n	80047fc <HAL_RCC_OscConfig+0x124>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d157      	bne.n	80047fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e25a      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x90>
 800475a:	4b7c      	ldr	r3, [pc, #496]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a7b      	ldr	r2, [pc, #492]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0xcc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0xb4>
 8004772:	4b76      	ldr	r3, [pc, #472]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a75      	ldr	r2, [pc, #468]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b73      	ldr	r3, [pc, #460]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a72      	ldr	r2, [pc, #456]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0xcc>
 800478c:	4b6f      	ldr	r3, [pc, #444]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6e      	ldr	r2, [pc, #440]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b6c      	ldr	r3, [pc, #432]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6b      	ldr	r2, [pc, #428]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fe3e 	bl	800242c <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd fe3a 	bl	800242c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e21f      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b61      	ldr	r3, [pc, #388]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0xdc>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd fe2a 	bl	800242c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fd fe26 	bl	800242c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	@ 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e20b      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	4b57      	ldr	r3, [pc, #348]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x104>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d06f      	beq.n	80048ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800480a:	4b50      	ldr	r3, [pc, #320]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d017      	beq.n	8004846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004816:	4b4d      	ldr	r3, [pc, #308]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800481e:	2b08      	cmp	r3, #8
 8004820:	d105      	bne.n	800482e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004822:	4b4a      	ldr	r3, [pc, #296]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482e:	4b47      	ldr	r3, [pc, #284]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d11c      	bne.n	8004874 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483a:	4b44      	ldr	r3, [pc, #272]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004846:	4b41      	ldr	r3, [pc, #260]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_RCC_OscConfig+0x186>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e1d3      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485e:	4b3b      	ldr	r3, [pc, #236]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4937      	ldr	r1, [pc, #220]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	e03a      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800487c:	4b34      	ldr	r3, [pc, #208]	@ (8004950 <HAL_RCC_OscConfig+0x278>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fd fdd3 	bl	800242c <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800488a:	f7fd fdcf 	bl	800242c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1b4      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489c:	4b2b      	ldr	r3, [pc, #172]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a8:	4b28      	ldr	r3, [pc, #160]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4925      	ldr	r1, [pc, #148]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]
 80048bc:	e015      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048be:	4b24      	ldr	r3, [pc, #144]	@ (8004950 <HAL_RCC_OscConfig+0x278>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fdb2 	bl	800242c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048cc:	f7fd fdae 	bl	800242c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e193      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048de:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d036      	beq.n	8004964 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fe:	4b15      	ldr	r3, [pc, #84]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd fd92 	bl	800242c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490c:	f7fd fd8e 	bl	800242c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e173      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491e:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_OscConfig+0x274>)
 8004920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x234>
 800492a:	e01b      	b.n	8004964 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492c:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fd fd7b 	bl	800242c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	e00e      	b.n	8004958 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800493a:	f7fd fd77 	bl	800242c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d907      	bls.n	8004958 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e15c      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
 800494c:	40023800 	.word	0x40023800
 8004950:	42470000 	.word	0x42470000
 8004954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004958:	4b8a      	ldr	r3, [pc, #552]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 800495a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ea      	bne.n	800493a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8097 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004976:	4b83      	ldr	r3, [pc, #524]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10f      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	4b7f      	ldr	r3, [pc, #508]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 800498c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004990:	6413      	str	r3, [r2, #64]	@ 0x40
 8004992:	4b7c      	ldr	r3, [pc, #496]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499a:	60bb      	str	r3, [r7, #8]
 800499c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a2:	4b79      	ldr	r3, [pc, #484]	@ (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d118      	bne.n	80049e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ae:	4b76      	ldr	r3, [pc, #472]	@ (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	@ (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ba:	f7fd fd37 	bl	800242c <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c2:	f7fd fd33 	bl	800242c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e118      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b88 <HAL_RCC_OscConfig+0x4b0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d106      	bne.n	80049f6 <HAL_RCC_OscConfig+0x31e>
 80049e8:	4b66      	ldr	r3, [pc, #408]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ec:	4a65      	ldr	r2, [pc, #404]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f4:	e01c      	b.n	8004a30 <HAL_RCC_OscConfig+0x358>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x340>
 80049fe:	4b61      	ldr	r3, [pc, #388]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	4a60      	ldr	r2, [pc, #384]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a16:	e00b      	b.n	8004a30 <HAL_RCC_OscConfig+0x358>
 8004a18:	4b5a      	ldr	r3, [pc, #360]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1c:	4a59      	ldr	r2, [pc, #356]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a24:	4b57      	ldr	r3, [pc, #348]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a28:	4a56      	ldr	r2, [pc, #344]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a2a:	f023 0304 	bic.w	r3, r3, #4
 8004a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d015      	beq.n	8004a64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fd fcf8 	bl	800242c <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fd fcf4 	bl	800242c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0d7      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a56:	4b4b      	ldr	r3, [pc, #300]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ee      	beq.n	8004a40 <HAL_RCC_OscConfig+0x368>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fd fce2 	bl	800242c <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fcde 	bl	800242c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0c1      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a82:	4b40      	ldr	r3, [pc, #256]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ee      	bne.n	8004a6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a94:	4b3b      	ldr	r3, [pc, #236]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a98:	4a3a      	ldr	r2, [pc, #232]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80ad 	beq.w	8004c04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aaa:	4b36      	ldr	r3, [pc, #216]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d060      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d145      	bne.n	8004b4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b33      	ldr	r3, [pc, #204]	@ (8004b8c <HAL_RCC_OscConfig+0x4b4>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fcb2 	bl	800242c <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fd fcae 	bl	800242c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e093      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	4b29      	ldr	r3, [pc, #164]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	019b      	lsls	r3, r3, #6
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	491b      	ldr	r1, [pc, #108]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b8c <HAL_RCC_OscConfig+0x4b4>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd fc83 	bl	800242c <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fd fc7f 	bl	800242c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e064      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3c:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x452>
 8004b48:	e05c      	b.n	8004c04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4a:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <HAL_RCC_OscConfig+0x4b4>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fd fc6c 	bl	800242c <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fd fc68 	bl	800242c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e04d      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <HAL_RCC_OscConfig+0x4ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x480>
 8004b76:	e045      	b.n	8004c04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e040      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b90:	4b1f      	ldr	r3, [pc, #124]	@ (8004c10 <HAL_RCC_OscConfig+0x538>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d030      	beq.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d129      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d122      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d119      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d10f      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800

08004c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e07b      	b.n	8004d1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c36:	d009      	beq.n	8004c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61da      	str	r2, [r3, #28]
 8004c3e:	e005      	b.n	8004c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd f902 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd0:	ea42 0103 	orr.w	r1, r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	f003 0104 	and.w	r1, r3, #4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	f003 0210 	and.w	r2, r3, #16
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e01a      	b.n	8004d6e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d4e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fd f961 	bl	8002018 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_SPI_TransmitReceive_IT+0x20>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e075      	b.n	8004e84 <HAL_SPI_TransmitReceive_IT+0x10c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004da6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dae:	7dbb      	ldrb	r3, [r7, #22]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d00d      	beq.n	8004dd0 <HAL_SPI_TransmitReceive_IT+0x58>
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dba:	d106      	bne.n	8004dca <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_SPI_TransmitReceive_IT+0x52>
 8004dc4:	7dbb      	ldrb	r3, [r7, #22]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
 8004dcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dce:	e054      	b.n	8004e7a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004de6:	e048      	b.n	8004e7a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d003      	beq.n	8004dfc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2205      	movs	r2, #5
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e3a:	e005      	b.n	8004e48 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <HAL_SPI_TransmitReceive_IT+0x120>)
 8004e40:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <HAL_SPI_TransmitReceive_IT+0x124>)
 8004e46:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004e56:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	2b40      	cmp	r3, #64	@ 0x40
 8004e64:	d008      	beq.n	8004e78 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e000      	b.n	8004e7a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8004e78:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	080051a1 	.word	0x080051a1
 8004e94:	08005201 	.word	0x08005201
 8004e98:	080050dd 	.word	0x080050dd
 8004e9c:	08005141 	.word	0x08005141

08004ea0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
    return;
 8004ede:	e0ce      	b.n	800507e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_SPI_IRQHandler+0x5e>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
    return;
 8004efc:	e0bf      	b.n	800507e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <HAL_SPI_IRQHandler+0x7e>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d105      	bne.n	8004f1e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80b0 	beq.w	800507e <HAL_SPI_IRQHandler+0x1de>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80aa 	beq.w	800507e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d011      	beq.n	8004f64 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	e00b      	b.n	8004f7c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]
        return;
 8004f7a:	e080      	b.n	800507e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d014      	beq.n	8004fb0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8a:	f043 0201 	orr.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d04f      	beq.n	800507c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <HAL_SPI_IRQHandler+0x168>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d034      	beq.n	8005072 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0203 	bic.w	r2, r2, #3
 8005016:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d011      	beq.n	8005044 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005024:	4a17      	ldr	r2, [pc, #92]	@ (8005084 <HAL_SPI_IRQHandler+0x1e4>)
 8005026:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fab1 	bl	8003594 <HAL_DMA_Abort_IT>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005050:	4a0c      	ldr	r2, [pc, #48]	@ (8005084 <HAL_SPI_IRQHandler+0x1e4>)
 8005052:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005058:	4618      	mov	r0, r3
 800505a:	f7fe fa9b 	bl	8003594 <HAL_DMA_Abort_IT>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005068:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005070:	e003      	b.n	800507a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fb fb94 	bl	80007a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005078:	e000      	b.n	800507c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800507a:	bf00      	nop
    return;
 800507c:	bf00      	nop
  }
}
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	080050b5 	.word	0x080050b5

08005088 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7fb fb66 	bl	80007a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f103 020c 	add.w	r2, r3, #12
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10f      	bne.n	8005138 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005126:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f95e 	bl	80053f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10f      	bne.n	8005198 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005186:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f92e 	bl	80053f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b2:	b292      	uxth	r2, r2
 80051b4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10f      	bne.n	80051f8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d102      	bne.n	80051f8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8fe 	bl	80053f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	881a      	ldrh	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10f      	bne.n	8005256 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005244:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8cf 	bl	80053f4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005270:	f7fd f8dc 	bl	800242c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4413      	add	r3, r2
 800527e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005280:	f7fd f8d4 	bl	800242c <HAL_GetTick>
 8005284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005286:	4b39      	ldr	r3, [pc, #228]	@ (800536c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	015b      	lsls	r3, r3, #5
 800528c:	0d1b      	lsrs	r3, r3, #20
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005296:	e054      	b.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	d050      	beq.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a0:	f7fd f8c4 	bl	800242c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d902      	bls.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d13d      	bne.n	8005332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ce:	d111      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d8:	d004      	beq.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e2:	d107      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fc:	d10f      	bne.n	800531e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800531c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e017      	b.n	8005362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	3b01      	subs	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	429a      	cmp	r2, r3
 800535e:	d19b      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	2000002c 	.word	0x2000002c

08005370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800537c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ec <SPI_EndRxTxTransaction+0x7c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1b      	ldr	r2, [pc, #108]	@ (80053f0 <SPI_EndRxTxTransaction+0x80>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	0d5b      	lsrs	r3, r3, #21
 8005388:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800538c:	fb02 f303 	mul.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539a:	d112      	bne.n	80053c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2180      	movs	r1, #128	@ 0x80
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff ff5a 	bl	8005260 <SPI_WaitFlagStateUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e00f      	b.n	80053e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d8:	2b80      	cmp	r3, #128	@ 0x80
 80053da:	d0f2      	beq.n	80053c2 <SPI_EndRxTxTransaction+0x52>
 80053dc:	e000      	b.n	80053e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80053de:	bf00      	nop
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	2000002c 	.word	0x2000002c
 80053f0:	165e9f81 	.word	0x165e9f81

080053f4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80053fc:	4b35      	ldr	r3, [pc, #212]	@ (80054d4 <SPI_CloseRxTx_ISR+0xe0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a35      	ldr	r2, [pc, #212]	@ (80054d8 <SPI_CloseRxTx_ISR+0xe4>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0a5b      	lsrs	r3, r3, #9
 8005408:	2264      	movs	r2, #100	@ 0x64
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005410:	f7fd f80c 	bl	800242c <HAL_GetTick>
 8005414:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0220 	bic.w	r2, r2, #32
 8005424:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005438:	e009      	b.n	800544e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3b01      	subs	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0eb      	beq.n	8005426 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	2164      	movs	r1, #100	@ 0x64
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ff8c 	bl	8005370 <SPI_EndRxTxTransaction>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	2b00      	cmp	r3, #0
 800548e:	d115      	bne.n	80054bc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b04      	cmp	r3, #4
 800549a:	d107      	bne.n	80054ac <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff fdef 	bl	8005088 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80054aa:	e00e      	b.n	80054ca <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fb f903 	bl	80006c0 <HAL_SPI_TxRxCpltCallback>
}
 80054ba:	e006      	b.n	80054ca <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fb f96b 	bl	80007a0 <HAL_SPI_ErrorCallback>
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	2000002c 	.word	0x2000002c
 80054d8:	057619f1 	.word	0x057619f1

080054dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e041      	b.n	8005572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc fdb8 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f000 f95e 	bl	80057dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d001      	beq.n	8005594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e046      	b.n	8005622 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a23      	ldr	r2, [pc, #140]	@ (8005630 <HAL_TIM_Base_Start+0xb4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_TIM_Base_Start+0x70>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ae:	d01d      	beq.n	80055ec <HAL_TIM_Base_Start+0x70>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <HAL_TIM_Base_Start+0xb8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_TIM_Base_Start+0x70>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <HAL_TIM_Base_Start+0xbc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_TIM_Base_Start+0x70>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <HAL_TIM_Base_Start+0xc0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_Base_Start+0x70>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005640 <HAL_TIM_Base_Start+0xc4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_TIM_Base_Start+0x70>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a19      	ldr	r2, [pc, #100]	@ (8005644 <HAL_TIM_Base_Start+0xc8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_Base_Start+0x70>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a18      	ldr	r2, [pc, #96]	@ (8005648 <HAL_TIM_Base_Start+0xcc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d111      	bne.n	8005610 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d010      	beq.n	8005620 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560e:	e007      	b.n	8005620 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40010400 	.word	0x40010400
 8005644:	40014000 	.word	0x40014000
 8005648:	40001800 	.word	0x40001800

0800564c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_TIM_ConfigClockSource+0x1c>
 8005664:	2302      	movs	r3, #2
 8005666:	e0b4      	b.n	80057d2 <HAL_TIM_ConfigClockSource+0x186>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800568e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a0:	d03e      	beq.n	8005720 <HAL_TIM_ConfigClockSource+0xd4>
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a6:	f200 8087 	bhi.w	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ae:	f000 8086 	beq.w	80057be <HAL_TIM_ConfigClockSource+0x172>
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b6:	d87f      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056b8:	2b70      	cmp	r3, #112	@ 0x70
 80056ba:	d01a      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0xa6>
 80056bc:	2b70      	cmp	r3, #112	@ 0x70
 80056be:	d87b      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c0:	2b60      	cmp	r3, #96	@ 0x60
 80056c2:	d050      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x11a>
 80056c4:	2b60      	cmp	r3, #96	@ 0x60
 80056c6:	d877      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b50      	cmp	r3, #80	@ 0x50
 80056ca:	d03c      	beq.n	8005746 <HAL_TIM_ConfigClockSource+0xfa>
 80056cc:	2b50      	cmp	r3, #80	@ 0x50
 80056ce:	d873      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b40      	cmp	r3, #64	@ 0x40
 80056d2:	d058      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0x13a>
 80056d4:	2b40      	cmp	r3, #64	@ 0x40
 80056d6:	d86f      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b30      	cmp	r3, #48	@ 0x30
 80056da:	d064      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056dc:	2b30      	cmp	r3, #48	@ 0x30
 80056de:	d86b      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d060      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d867      	bhi.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05c      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d05a      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	e062      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f000 f985 	bl	8005a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]
      break;
 800571e:	e04f      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6899      	ldr	r1, [r3, #8]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f000 f96e 	bl	8005a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005742:	609a      	str	r2, [r3, #8]
      break;
 8005744:	e03c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6859      	ldr	r1, [r3, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	461a      	mov	r2, r3
 8005754:	f000 f8e2 	bl	800591c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2150      	movs	r1, #80	@ 0x50
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f93b 	bl	80059da <TIM_ITRx_SetConfig>
      break;
 8005764:	e02c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6859      	ldr	r1, [r3, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	461a      	mov	r2, r3
 8005774:	f000 f901 	bl	800597a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2160      	movs	r1, #96	@ 0x60
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f92b 	bl	80059da <TIM_ITRx_SetConfig>
      break;
 8005784:	e01c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	461a      	mov	r2, r3
 8005794:	f000 f8c2 	bl	800591c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2140      	movs	r1, #64	@ 0x40
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f91b 	bl	80059da <TIM_ITRx_SetConfig>
      break;
 80057a4:	e00c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f000 f912 	bl	80059da <TIM_ITRx_SetConfig>
      break;
 80057b6:	e003      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      break;
 80057bc:	e000      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a40      	ldr	r2, [pc, #256]	@ (80058f0 <TIM_Base_SetConfig+0x114>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fa:	d00f      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3d      	ldr	r2, [pc, #244]	@ (80058f4 <TIM_Base_SetConfig+0x118>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00b      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3c      	ldr	r2, [pc, #240]	@ (80058f8 <TIM_Base_SetConfig+0x11c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3b      	ldr	r2, [pc, #236]	@ (80058fc <TIM_Base_SetConfig+0x120>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3a      	ldr	r2, [pc, #232]	@ (8005900 <TIM_Base_SetConfig+0x124>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d108      	bne.n	800582e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2f      	ldr	r2, [pc, #188]	@ (80058f0 <TIM_Base_SetConfig+0x114>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d02b      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d027      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2c      	ldr	r2, [pc, #176]	@ (80058f4 <TIM_Base_SetConfig+0x118>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d023      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2b      	ldr	r2, [pc, #172]	@ (80058f8 <TIM_Base_SetConfig+0x11c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01f      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2a      	ldr	r2, [pc, #168]	@ (80058fc <TIM_Base_SetConfig+0x120>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01b      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a29      	ldr	r2, [pc, #164]	@ (8005900 <TIM_Base_SetConfig+0x124>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d017      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a28      	ldr	r2, [pc, #160]	@ (8005904 <TIM_Base_SetConfig+0x128>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a27      	ldr	r2, [pc, #156]	@ (8005908 <TIM_Base_SetConfig+0x12c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00f      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a26      	ldr	r2, [pc, #152]	@ (800590c <TIM_Base_SetConfig+0x130>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a25      	ldr	r2, [pc, #148]	@ (8005910 <TIM_Base_SetConfig+0x134>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a24      	ldr	r2, [pc, #144]	@ (8005914 <TIM_Base_SetConfig+0x138>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a23      	ldr	r2, [pc, #140]	@ (8005918 <TIM_Base_SetConfig+0x13c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d108      	bne.n	80058a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a0a      	ldr	r2, [pc, #40]	@ (80058f0 <TIM_Base_SetConfig+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0xf8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005900 <TIM_Base_SetConfig+0x124>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d103      	bne.n	80058dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	615a      	str	r2, [r3, #20]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40010400 	.word	0x40010400
 8005904:	40014000 	.word	0x40014000
 8005908:	40014400 	.word	0x40014400
 800590c:	40014800 	.word	0x40014800
 8005910:	40001800 	.word	0x40001800
 8005914:	40001c00 	.word	0x40001c00
 8005918:	40002000 	.word	0x40002000

0800591c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f023 0201 	bic.w	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f023 030a 	bic.w	r3, r3, #10
 8005958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597a:	b480      	push	{r7}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f023 0210 	bic.w	r2, r3, #16
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	031b      	lsls	r3, r3, #12
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f043 0307 	orr.w	r3, r3, #7
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	609a      	str	r2, [r3, #8]
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	609a      	str	r2, [r3, #8]
}
 8005a44:	bf00      	nop
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e05a      	b.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a21      	ldr	r2, [pc, #132]	@ (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d022      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab4:	d01d      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1d      	ldr	r2, [pc, #116]	@ (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d018      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1a      	ldr	r2, [pc, #104]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a18      	ldr	r2, [pc, #96]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a17      	ldr	r2, [pc, #92]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a15      	ldr	r2, [pc, #84]	@ (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10c      	bne.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	40010400 	.word	0x40010400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40001800 	.word	0x40001800

08005b48 <std>:
 8005b48:	2300      	movs	r3, #0
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b56:	6083      	str	r3, [r0, #8]
 8005b58:	8181      	strh	r1, [r0, #12]
 8005b5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b5c:	81c2      	strh	r2, [r0, #14]
 8005b5e:	6183      	str	r3, [r0, #24]
 8005b60:	4619      	mov	r1, r3
 8005b62:	2208      	movs	r2, #8
 8005b64:	305c      	adds	r0, #92	@ 0x5c
 8005b66:	f000 f9e7 	bl	8005f38 <memset>
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <std+0x58>)
 8005b6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <std+0x5c>)
 8005b70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <std+0x60>)
 8005b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b76:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <std+0x64>)
 8005b78:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <std+0x68>)
 8005b7c:	6224      	str	r4, [r4, #32]
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d006      	beq.n	8005b90 <std+0x48>
 8005b82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b86:	4294      	cmp	r4, r2
 8005b88:	d002      	beq.n	8005b90 <std+0x48>
 8005b8a:	33d0      	adds	r3, #208	@ 0xd0
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	d105      	bne.n	8005b9c <std+0x54>
 8005b90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b98:	f000 ba46 	b.w	8006028 <__retarget_lock_init_recursive>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005d89 	.word	0x08005d89
 8005ba4:	08005dab 	.word	0x08005dab
 8005ba8:	08005de3 	.word	0x08005de3
 8005bac:	08005e07 	.word	0x08005e07
 8005bb0:	20000588 	.word	0x20000588

08005bb4 <stdio_exit_handler>:
 8005bb4:	4a02      	ldr	r2, [pc, #8]	@ (8005bc0 <stdio_exit_handler+0xc>)
 8005bb6:	4903      	ldr	r1, [pc, #12]	@ (8005bc4 <stdio_exit_handler+0x10>)
 8005bb8:	4803      	ldr	r0, [pc, #12]	@ (8005bc8 <stdio_exit_handler+0x14>)
 8005bba:	f000 b869 	b.w	8005c90 <_fwalk_sglue>
 8005bbe:	bf00      	nop
 8005bc0:	20000038 	.word	0x20000038
 8005bc4:	08006329 	.word	0x08006329
 8005bc8:	20000048 	.word	0x20000048

08005bcc <cleanup_stdio>:
 8005bcc:	6841      	ldr	r1, [r0, #4]
 8005bce:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <cleanup_stdio+0x34>)
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	d001      	beq.n	8005bdc <cleanup_stdio+0x10>
 8005bd8:	f000 fba6 	bl	8006328 <_fflush_r>
 8005bdc:	68a1      	ldr	r1, [r4, #8]
 8005bde:	4b09      	ldr	r3, [pc, #36]	@ (8005c04 <cleanup_stdio+0x38>)
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d002      	beq.n	8005bea <cleanup_stdio+0x1e>
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 fb9f 	bl	8006328 <_fflush_r>
 8005bea:	68e1      	ldr	r1, [r4, #12]
 8005bec:	4b06      	ldr	r3, [pc, #24]	@ (8005c08 <cleanup_stdio+0x3c>)
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	d004      	beq.n	8005bfc <cleanup_stdio+0x30>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf8:	f000 bb96 	b.w	8006328 <_fflush_r>
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000588 	.word	0x20000588
 8005c04:	200005f0 	.word	0x200005f0
 8005c08:	20000658 	.word	0x20000658

08005c0c <global_stdio_init.part.0>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <global_stdio_init.part.0+0x30>)
 8005c10:	4c0b      	ldr	r4, [pc, #44]	@ (8005c40 <global_stdio_init.part.0+0x34>)
 8005c12:	4a0c      	ldr	r2, [pc, #48]	@ (8005c44 <global_stdio_init.part.0+0x38>)
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	4620      	mov	r0, r4
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	f7ff ff94 	bl	8005b48 <std>
 8005c20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c24:	2201      	movs	r2, #1
 8005c26:	2109      	movs	r1, #9
 8005c28:	f7ff ff8e 	bl	8005b48 <std>
 8005c2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c30:	2202      	movs	r2, #2
 8005c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c36:	2112      	movs	r1, #18
 8005c38:	f7ff bf86 	b.w	8005b48 <std>
 8005c3c:	200006c0 	.word	0x200006c0
 8005c40:	20000588 	.word	0x20000588
 8005c44:	08005bb5 	.word	0x08005bb5

08005c48 <__sfp_lock_acquire>:
 8005c48:	4801      	ldr	r0, [pc, #4]	@ (8005c50 <__sfp_lock_acquire+0x8>)
 8005c4a:	f000 b9ee 	b.w	800602a <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	200006c9 	.word	0x200006c9

08005c54 <__sfp_lock_release>:
 8005c54:	4801      	ldr	r0, [pc, #4]	@ (8005c5c <__sfp_lock_release+0x8>)
 8005c56:	f000 b9e9 	b.w	800602c <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	200006c9 	.word	0x200006c9

08005c60 <__sinit>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4604      	mov	r4, r0
 8005c64:	f7ff fff0 	bl	8005c48 <__sfp_lock_acquire>
 8005c68:	6a23      	ldr	r3, [r4, #32]
 8005c6a:	b11b      	cbz	r3, 8005c74 <__sinit+0x14>
 8005c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c70:	f7ff bff0 	b.w	8005c54 <__sfp_lock_release>
 8005c74:	4b04      	ldr	r3, [pc, #16]	@ (8005c88 <__sinit+0x28>)
 8005c76:	6223      	str	r3, [r4, #32]
 8005c78:	4b04      	ldr	r3, [pc, #16]	@ (8005c8c <__sinit+0x2c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f5      	bne.n	8005c6c <__sinit+0xc>
 8005c80:	f7ff ffc4 	bl	8005c0c <global_stdio_init.part.0>
 8005c84:	e7f2      	b.n	8005c6c <__sinit+0xc>
 8005c86:	bf00      	nop
 8005c88:	08005bcd 	.word	0x08005bcd
 8005c8c:	200006c0 	.word	0x200006c0

08005c90 <_fwalk_sglue>:
 8005c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c94:	4607      	mov	r7, r0
 8005c96:	4688      	mov	r8, r1
 8005c98:	4614      	mov	r4, r2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ca4:	d505      	bpl.n	8005cb2 <_fwalk_sglue+0x22>
 8005ca6:	6824      	ldr	r4, [r4, #0]
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	d1f7      	bne.n	8005c9c <_fwalk_sglue+0xc>
 8005cac:	4630      	mov	r0, r6
 8005cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d907      	bls.n	8005cc8 <_fwalk_sglue+0x38>
 8005cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	d003      	beq.n	8005cc8 <_fwalk_sglue+0x38>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c0      	blx	r8
 8005cc6:	4306      	orrs	r6, r0
 8005cc8:	3568      	adds	r5, #104	@ 0x68
 8005cca:	e7e9      	b.n	8005ca0 <_fwalk_sglue+0x10>

08005ccc <_puts_r>:
 8005ccc:	6a03      	ldr	r3, [r0, #32]
 8005cce:	b570      	push	{r4, r5, r6, lr}
 8005cd0:	6884      	ldr	r4, [r0, #8]
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	460e      	mov	r6, r1
 8005cd6:	b90b      	cbnz	r3, 8005cdc <_puts_r+0x10>
 8005cd8:	f7ff ffc2 	bl	8005c60 <__sinit>
 8005cdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <_puts_r+0x22>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	0598      	lsls	r0, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <_puts_r+0x22>
 8005ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cea:	f000 f99e 	bl	800602a <__retarget_lock_acquire_recursive>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	0719      	lsls	r1, r3, #28
 8005cf2:	d502      	bpl.n	8005cfa <_puts_r+0x2e>
 8005cf4:	6923      	ldr	r3, [r4, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d135      	bne.n	8005d66 <_puts_r+0x9a>
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 f8c5 	bl	8005e8c <__swsetup_r>
 8005d02:	b380      	cbz	r0, 8005d66 <_puts_r+0x9a>
 8005d04:	f04f 35ff 	mov.w	r5, #4294967295
 8005d08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d0a:	07da      	lsls	r2, r3, #31
 8005d0c:	d405      	bmi.n	8005d1a <_puts_r+0x4e>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	059b      	lsls	r3, r3, #22
 8005d12:	d402      	bmi.n	8005d1a <_puts_r+0x4e>
 8005d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d16:	f000 f989 	bl	800602c <__retarget_lock_release_recursive>
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da04      	bge.n	8005d2c <_puts_r+0x60>
 8005d22:	69a2      	ldr	r2, [r4, #24]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	dc17      	bgt.n	8005d58 <_puts_r+0x8c>
 8005d28:	290a      	cmp	r1, #10
 8005d2a:	d015      	beq.n	8005d58 <_puts_r+0x8c>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	6022      	str	r2, [r4, #0]
 8005d32:	7019      	strb	r1, [r3, #0]
 8005d34:	68a3      	ldr	r3, [r4, #8]
 8005d36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	60a3      	str	r3, [r4, #8]
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d1ed      	bne.n	8005d1e <_puts_r+0x52>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da11      	bge.n	8005d6a <_puts_r+0x9e>
 8005d46:	4622      	mov	r2, r4
 8005d48:	210a      	movs	r1, #10
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f000 f85f 	bl	8005e0e <__swbuf_r>
 8005d50:	3001      	adds	r0, #1
 8005d52:	d0d7      	beq.n	8005d04 <_puts_r+0x38>
 8005d54:	250a      	movs	r5, #10
 8005d56:	e7d7      	b.n	8005d08 <_puts_r+0x3c>
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f000 f857 	bl	8005e0e <__swbuf_r>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d1e7      	bne.n	8005d34 <_puts_r+0x68>
 8005d64:	e7ce      	b.n	8005d04 <_puts_r+0x38>
 8005d66:	3e01      	subs	r6, #1
 8005d68:	e7e4      	b.n	8005d34 <_puts_r+0x68>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	6022      	str	r2, [r4, #0]
 8005d70:	220a      	movs	r2, #10
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e7ee      	b.n	8005d54 <_puts_r+0x88>
	...

08005d78 <puts>:
 8005d78:	4b02      	ldr	r3, [pc, #8]	@ (8005d84 <puts+0xc>)
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f7ff bfa5 	b.w	8005ccc <_puts_r>
 8005d82:	bf00      	nop
 8005d84:	20000044 	.word	0x20000044

08005d88 <__sread>:
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d90:	f000 f8fc 	bl	8005f8c <_read_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	bfab      	itete	ge
 8005d98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d9c:	181b      	addge	r3, r3, r0
 8005d9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005da2:	bfac      	ite	ge
 8005da4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005da6:	81a3      	strhlt	r3, [r4, #12]
 8005da8:	bd10      	pop	{r4, pc}

08005daa <__swrite>:
 8005daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dae:	461f      	mov	r7, r3
 8005db0:	898b      	ldrh	r3, [r1, #12]
 8005db2:	05db      	lsls	r3, r3, #23
 8005db4:	4605      	mov	r5, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	4616      	mov	r6, r2
 8005dba:	d505      	bpl.n	8005dc8 <__swrite+0x1e>
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f000 f8d0 	bl	8005f68 <_lseek_r>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	4628      	mov	r0, r5
 8005dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	f000 b8e7 	b.w	8005fb0 <_write_r>

08005de2 <__sseek>:
 8005de2:	b510      	push	{r4, lr}
 8005de4:	460c      	mov	r4, r1
 8005de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dea:	f000 f8bd 	bl	8005f68 <_lseek_r>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	bf15      	itete	ne
 8005df4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005df6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dfe:	81a3      	strheq	r3, [r4, #12]
 8005e00:	bf18      	it	ne
 8005e02:	81a3      	strhne	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__sclose>:
 8005e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0a:	f000 b89d 	b.w	8005f48 <_close_r>

08005e0e <__swbuf_r>:
 8005e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e10:	460e      	mov	r6, r1
 8005e12:	4614      	mov	r4, r2
 8005e14:	4605      	mov	r5, r0
 8005e16:	b118      	cbz	r0, 8005e20 <__swbuf_r+0x12>
 8005e18:	6a03      	ldr	r3, [r0, #32]
 8005e1a:	b90b      	cbnz	r3, 8005e20 <__swbuf_r+0x12>
 8005e1c:	f7ff ff20 	bl	8005c60 <__sinit>
 8005e20:	69a3      	ldr	r3, [r4, #24]
 8005e22:	60a3      	str	r3, [r4, #8]
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	071a      	lsls	r2, r3, #28
 8005e28:	d501      	bpl.n	8005e2e <__swbuf_r+0x20>
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	b943      	cbnz	r3, 8005e40 <__swbuf_r+0x32>
 8005e2e:	4621      	mov	r1, r4
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 f82b 	bl	8005e8c <__swsetup_r>
 8005e36:	b118      	cbz	r0, 8005e40 <__swbuf_r+0x32>
 8005e38:	f04f 37ff 	mov.w	r7, #4294967295
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	6922      	ldr	r2, [r4, #16]
 8005e44:	1a98      	subs	r0, r3, r2
 8005e46:	6963      	ldr	r3, [r4, #20]
 8005e48:	b2f6      	uxtb	r6, r6
 8005e4a:	4283      	cmp	r3, r0
 8005e4c:	4637      	mov	r7, r6
 8005e4e:	dc05      	bgt.n	8005e5c <__swbuf_r+0x4e>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 fa68 	bl	8006328 <_fflush_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d1ed      	bne.n	8005e38 <__swbuf_r+0x2a>
 8005e5c:	68a3      	ldr	r3, [r4, #8]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	6022      	str	r2, [r4, #0]
 8005e68:	701e      	strb	r6, [r3, #0]
 8005e6a:	6962      	ldr	r2, [r4, #20]
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d004      	beq.n	8005e7c <__swbuf_r+0x6e>
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	07db      	lsls	r3, r3, #31
 8005e76:	d5e1      	bpl.n	8005e3c <__swbuf_r+0x2e>
 8005e78:	2e0a      	cmp	r6, #10
 8005e7a:	d1df      	bne.n	8005e3c <__swbuf_r+0x2e>
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 fa52 	bl	8006328 <_fflush_r>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d0d9      	beq.n	8005e3c <__swbuf_r+0x2e>
 8005e88:	e7d6      	b.n	8005e38 <__swbuf_r+0x2a>
	...

08005e8c <__swsetup_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4b29      	ldr	r3, [pc, #164]	@ (8005f34 <__swsetup_r+0xa8>)
 8005e90:	4605      	mov	r5, r0
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	460c      	mov	r4, r1
 8005e96:	b118      	cbz	r0, 8005ea0 <__swsetup_r+0x14>
 8005e98:	6a03      	ldr	r3, [r0, #32]
 8005e9a:	b90b      	cbnz	r3, 8005ea0 <__swsetup_r+0x14>
 8005e9c:	f7ff fee0 	bl	8005c60 <__sinit>
 8005ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea4:	0719      	lsls	r1, r3, #28
 8005ea6:	d422      	bmi.n	8005eee <__swsetup_r+0x62>
 8005ea8:	06da      	lsls	r2, r3, #27
 8005eaa:	d407      	bmi.n	8005ebc <__swsetup_r+0x30>
 8005eac:	2209      	movs	r2, #9
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eba:	e033      	b.n	8005f24 <__swsetup_r+0x98>
 8005ebc:	0758      	lsls	r0, r3, #29
 8005ebe:	d512      	bpl.n	8005ee6 <__swsetup_r+0x5a>
 8005ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ec2:	b141      	cbz	r1, 8005ed6 <__swsetup_r+0x4a>
 8005ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ec8:	4299      	cmp	r1, r3
 8005eca:	d002      	beq.n	8005ed2 <__swsetup_r+0x46>
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 f8af 	bl	8006030 <_free_r>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6063      	str	r3, [r4, #4]
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	b94b      	cbnz	r3, 8005f06 <__swsetup_r+0x7a>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efc:	d003      	beq.n	8005f06 <__swsetup_r+0x7a>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 fa5f 	bl	80063c4 <__smakebuf_r>
 8005f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f0a:	f013 0201 	ands.w	r2, r3, #1
 8005f0e:	d00a      	beq.n	8005f26 <__swsetup_r+0x9a>
 8005f10:	2200      	movs	r2, #0
 8005f12:	60a2      	str	r2, [r4, #8]
 8005f14:	6962      	ldr	r2, [r4, #20]
 8005f16:	4252      	negs	r2, r2
 8005f18:	61a2      	str	r2, [r4, #24]
 8005f1a:	6922      	ldr	r2, [r4, #16]
 8005f1c:	b942      	cbnz	r2, 8005f30 <__swsetup_r+0xa4>
 8005f1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f22:	d1c5      	bne.n	8005eb0 <__swsetup_r+0x24>
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
 8005f26:	0799      	lsls	r1, r3, #30
 8005f28:	bf58      	it	pl
 8005f2a:	6962      	ldrpl	r2, [r4, #20]
 8005f2c:	60a2      	str	r2, [r4, #8]
 8005f2e:	e7f4      	b.n	8005f1a <__swsetup_r+0x8e>
 8005f30:	2000      	movs	r0, #0
 8005f32:	e7f7      	b.n	8005f24 <__swsetup_r+0x98>
 8005f34:	20000044 	.word	0x20000044

08005f38 <memset>:
 8005f38:	4402      	add	r2, r0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d100      	bne.n	8005f42 <memset+0xa>
 8005f40:	4770      	bx	lr
 8005f42:	f803 1b01 	strb.w	r1, [r3], #1
 8005f46:	e7f9      	b.n	8005f3c <memset+0x4>

08005f48 <_close_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d06      	ldr	r5, [pc, #24]	@ (8005f64 <_close_r+0x1c>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	f7fc f95d 	bl	8002212 <_close>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_close_r+0x1a>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_close_r+0x1a>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	200006c4 	.word	0x200006c4

08005f68 <_lseek_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4d07      	ldr	r5, [pc, #28]	@ (8005f88 <_lseek_r+0x20>)
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	4608      	mov	r0, r1
 8005f70:	4611      	mov	r1, r2
 8005f72:	2200      	movs	r2, #0
 8005f74:	602a      	str	r2, [r5, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f7fc f972 	bl	8002260 <_lseek>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_lseek_r+0x1e>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_lseek_r+0x1e>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	200006c4 	.word	0x200006c4

08005f8c <_read_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4d07      	ldr	r5, [pc, #28]	@ (8005fac <_read_r+0x20>)
 8005f90:	4604      	mov	r4, r0
 8005f92:	4608      	mov	r0, r1
 8005f94:	4611      	mov	r1, r2
 8005f96:	2200      	movs	r2, #0
 8005f98:	602a      	str	r2, [r5, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f7fc f91c 	bl	80021d8 <_read>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_read_r+0x1e>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_read_r+0x1e>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	200006c4 	.word	0x200006c4

08005fb0 <_write_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d07      	ldr	r5, [pc, #28]	@ (8005fd0 <_write_r+0x20>)
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	4611      	mov	r1, r2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fb fb9c 	bl	80016fc <_write>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_write_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_write_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	200006c4 	.word	0x200006c4

08005fd4 <__errno>:
 8005fd4:	4b01      	ldr	r3, [pc, #4]	@ (8005fdc <__errno+0x8>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000044 	.word	0x20000044

08005fe0 <__libc_init_array>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8006018 <__libc_init_array+0x38>)
 8005fe4:	4c0d      	ldr	r4, [pc, #52]	@ (800601c <__libc_init_array+0x3c>)
 8005fe6:	1b64      	subs	r4, r4, r5
 8005fe8:	10a4      	asrs	r4, r4, #2
 8005fea:	2600      	movs	r6, #0
 8005fec:	42a6      	cmp	r6, r4
 8005fee:	d109      	bne.n	8006004 <__libc_init_array+0x24>
 8005ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8006020 <__libc_init_array+0x40>)
 8005ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8006024 <__libc_init_array+0x44>)
 8005ff4:	f000 faaa 	bl	800654c <_init>
 8005ff8:	1b64      	subs	r4, r4, r5
 8005ffa:	10a4      	asrs	r4, r4, #2
 8005ffc:	2600      	movs	r6, #0
 8005ffe:	42a6      	cmp	r6, r4
 8006000:	d105      	bne.n	800600e <__libc_init_array+0x2e>
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	f855 3b04 	ldr.w	r3, [r5], #4
 8006008:	4798      	blx	r3
 800600a:	3601      	adds	r6, #1
 800600c:	e7ee      	b.n	8005fec <__libc_init_array+0xc>
 800600e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006012:	4798      	blx	r3
 8006014:	3601      	adds	r6, #1
 8006016:	e7f2      	b.n	8005ffe <__libc_init_array+0x1e>
 8006018:	0800658c 	.word	0x0800658c
 800601c:	0800658c 	.word	0x0800658c
 8006020:	0800658c 	.word	0x0800658c
 8006024:	08006590 	.word	0x08006590

08006028 <__retarget_lock_init_recursive>:
 8006028:	4770      	bx	lr

0800602a <__retarget_lock_acquire_recursive>:
 800602a:	4770      	bx	lr

0800602c <__retarget_lock_release_recursive>:
 800602c:	4770      	bx	lr
	...

08006030 <_free_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4605      	mov	r5, r0
 8006034:	2900      	cmp	r1, #0
 8006036:	d041      	beq.n	80060bc <_free_r+0x8c>
 8006038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800603c:	1f0c      	subs	r4, r1, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfb8      	it	lt
 8006042:	18e4      	addlt	r4, r4, r3
 8006044:	f000 f8e0 	bl	8006208 <__malloc_lock>
 8006048:	4a1d      	ldr	r2, [pc, #116]	@ (80060c0 <_free_r+0x90>)
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	b933      	cbnz	r3, 800605c <_free_r+0x2c>
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	6014      	str	r4, [r2, #0]
 8006052:	4628      	mov	r0, r5
 8006054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006058:	f000 b8dc 	b.w	8006214 <__malloc_unlock>
 800605c:	42a3      	cmp	r3, r4
 800605e:	d908      	bls.n	8006072 <_free_r+0x42>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	1821      	adds	r1, r4, r0
 8006064:	428b      	cmp	r3, r1
 8006066:	bf01      	itttt	eq
 8006068:	6819      	ldreq	r1, [r3, #0]
 800606a:	685b      	ldreq	r3, [r3, #4]
 800606c:	1809      	addeq	r1, r1, r0
 800606e:	6021      	streq	r1, [r4, #0]
 8006070:	e7ed      	b.n	800604e <_free_r+0x1e>
 8006072:	461a      	mov	r2, r3
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	b10b      	cbz	r3, 800607c <_free_r+0x4c>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d9fa      	bls.n	8006072 <_free_r+0x42>
 800607c:	6811      	ldr	r1, [r2, #0]
 800607e:	1850      	adds	r0, r2, r1
 8006080:	42a0      	cmp	r0, r4
 8006082:	d10b      	bne.n	800609c <_free_r+0x6c>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	4401      	add	r1, r0
 8006088:	1850      	adds	r0, r2, r1
 800608a:	4283      	cmp	r3, r0
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	d1e0      	bne.n	8006052 <_free_r+0x22>
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	6053      	str	r3, [r2, #4]
 8006096:	4408      	add	r0, r1
 8006098:	6010      	str	r0, [r2, #0]
 800609a:	e7da      	b.n	8006052 <_free_r+0x22>
 800609c:	d902      	bls.n	80060a4 <_free_r+0x74>
 800609e:	230c      	movs	r3, #12
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	e7d6      	b.n	8006052 <_free_r+0x22>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	1821      	adds	r1, r4, r0
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf04      	itt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	bf04      	itt	eq
 80060b4:	1809      	addeq	r1, r1, r0
 80060b6:	6021      	streq	r1, [r4, #0]
 80060b8:	6054      	str	r4, [r2, #4]
 80060ba:	e7ca      	b.n	8006052 <_free_r+0x22>
 80060bc:	bd38      	pop	{r3, r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	200006d0 	.word	0x200006d0

080060c4 <sbrk_aligned>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006104 <sbrk_aligned+0x40>)
 80060c8:	460c      	mov	r4, r1
 80060ca:	6831      	ldr	r1, [r6, #0]
 80060cc:	4605      	mov	r5, r0
 80060ce:	b911      	cbnz	r1, 80060d6 <sbrk_aligned+0x12>
 80060d0:	f000 f9d6 	bl	8006480 <_sbrk_r>
 80060d4:	6030      	str	r0, [r6, #0]
 80060d6:	4621      	mov	r1, r4
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 f9d1 	bl	8006480 <_sbrk_r>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d103      	bne.n	80060ea <sbrk_aligned+0x26>
 80060e2:	f04f 34ff 	mov.w	r4, #4294967295
 80060e6:	4620      	mov	r0, r4
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	1cc4      	adds	r4, r0, #3
 80060ec:	f024 0403 	bic.w	r4, r4, #3
 80060f0:	42a0      	cmp	r0, r4
 80060f2:	d0f8      	beq.n	80060e6 <sbrk_aligned+0x22>
 80060f4:	1a21      	subs	r1, r4, r0
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 f9c2 	bl	8006480 <_sbrk_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1f2      	bne.n	80060e6 <sbrk_aligned+0x22>
 8006100:	e7ef      	b.n	80060e2 <sbrk_aligned+0x1e>
 8006102:	bf00      	nop
 8006104:	200006cc 	.word	0x200006cc

08006108 <_malloc_r>:
 8006108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800610c:	1ccd      	adds	r5, r1, #3
 800610e:	f025 0503 	bic.w	r5, r5, #3
 8006112:	3508      	adds	r5, #8
 8006114:	2d0c      	cmp	r5, #12
 8006116:	bf38      	it	cc
 8006118:	250c      	movcc	r5, #12
 800611a:	2d00      	cmp	r5, #0
 800611c:	4606      	mov	r6, r0
 800611e:	db01      	blt.n	8006124 <_malloc_r+0x1c>
 8006120:	42a9      	cmp	r1, r5
 8006122:	d904      	bls.n	800612e <_malloc_r+0x26>
 8006124:	230c      	movs	r3, #12
 8006126:	6033      	str	r3, [r6, #0]
 8006128:	2000      	movs	r0, #0
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006204 <_malloc_r+0xfc>
 8006132:	f000 f869 	bl	8006208 <__malloc_lock>
 8006136:	f8d8 3000 	ldr.w	r3, [r8]
 800613a:	461c      	mov	r4, r3
 800613c:	bb44      	cbnz	r4, 8006190 <_malloc_r+0x88>
 800613e:	4629      	mov	r1, r5
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff ffbf 	bl	80060c4 <sbrk_aligned>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	4604      	mov	r4, r0
 800614a:	d158      	bne.n	80061fe <_malloc_r+0xf6>
 800614c:	f8d8 4000 	ldr.w	r4, [r8]
 8006150:	4627      	mov	r7, r4
 8006152:	2f00      	cmp	r7, #0
 8006154:	d143      	bne.n	80061de <_malloc_r+0xd6>
 8006156:	2c00      	cmp	r4, #0
 8006158:	d04b      	beq.n	80061f2 <_malloc_r+0xea>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	4639      	mov	r1, r7
 800615e:	4630      	mov	r0, r6
 8006160:	eb04 0903 	add.w	r9, r4, r3
 8006164:	f000 f98c 	bl	8006480 <_sbrk_r>
 8006168:	4581      	cmp	r9, r0
 800616a:	d142      	bne.n	80061f2 <_malloc_r+0xea>
 800616c:	6821      	ldr	r1, [r4, #0]
 800616e:	1a6d      	subs	r5, r5, r1
 8006170:	4629      	mov	r1, r5
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff ffa6 	bl	80060c4 <sbrk_aligned>
 8006178:	3001      	adds	r0, #1
 800617a:	d03a      	beq.n	80061f2 <_malloc_r+0xea>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	442b      	add	r3, r5
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	f8d8 3000 	ldr.w	r3, [r8]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	bb62      	cbnz	r2, 80061e4 <_malloc_r+0xdc>
 800618a:	f8c8 7000 	str.w	r7, [r8]
 800618e:	e00f      	b.n	80061b0 <_malloc_r+0xa8>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	1b52      	subs	r2, r2, r5
 8006194:	d420      	bmi.n	80061d8 <_malloc_r+0xd0>
 8006196:	2a0b      	cmp	r2, #11
 8006198:	d917      	bls.n	80061ca <_malloc_r+0xc2>
 800619a:	1961      	adds	r1, r4, r5
 800619c:	42a3      	cmp	r3, r4
 800619e:	6025      	str	r5, [r4, #0]
 80061a0:	bf18      	it	ne
 80061a2:	6059      	strne	r1, [r3, #4]
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	bf08      	it	eq
 80061a8:	f8c8 1000 	streq.w	r1, [r8]
 80061ac:	5162      	str	r2, [r4, r5]
 80061ae:	604b      	str	r3, [r1, #4]
 80061b0:	4630      	mov	r0, r6
 80061b2:	f000 f82f 	bl	8006214 <__malloc_unlock>
 80061b6:	f104 000b 	add.w	r0, r4, #11
 80061ba:	1d23      	adds	r3, r4, #4
 80061bc:	f020 0007 	bic.w	r0, r0, #7
 80061c0:	1ac2      	subs	r2, r0, r3
 80061c2:	bf1c      	itt	ne
 80061c4:	1a1b      	subne	r3, r3, r0
 80061c6:	50a3      	strne	r3, [r4, r2]
 80061c8:	e7af      	b.n	800612a <_malloc_r+0x22>
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	bf0c      	ite	eq
 80061d0:	f8c8 2000 	streq.w	r2, [r8]
 80061d4:	605a      	strne	r2, [r3, #4]
 80061d6:	e7eb      	b.n	80061b0 <_malloc_r+0xa8>
 80061d8:	4623      	mov	r3, r4
 80061da:	6864      	ldr	r4, [r4, #4]
 80061dc:	e7ae      	b.n	800613c <_malloc_r+0x34>
 80061de:	463c      	mov	r4, r7
 80061e0:	687f      	ldr	r7, [r7, #4]
 80061e2:	e7b6      	b.n	8006152 <_malloc_r+0x4a>
 80061e4:	461a      	mov	r2, r3
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	d1fb      	bne.n	80061e4 <_malloc_r+0xdc>
 80061ec:	2300      	movs	r3, #0
 80061ee:	6053      	str	r3, [r2, #4]
 80061f0:	e7de      	b.n	80061b0 <_malloc_r+0xa8>
 80061f2:	230c      	movs	r3, #12
 80061f4:	6033      	str	r3, [r6, #0]
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 f80c 	bl	8006214 <__malloc_unlock>
 80061fc:	e794      	b.n	8006128 <_malloc_r+0x20>
 80061fe:	6005      	str	r5, [r0, #0]
 8006200:	e7d6      	b.n	80061b0 <_malloc_r+0xa8>
 8006202:	bf00      	nop
 8006204:	200006d0 	.word	0x200006d0

08006208 <__malloc_lock>:
 8006208:	4801      	ldr	r0, [pc, #4]	@ (8006210 <__malloc_lock+0x8>)
 800620a:	f7ff bf0e 	b.w	800602a <__retarget_lock_acquire_recursive>
 800620e:	bf00      	nop
 8006210:	200006c8 	.word	0x200006c8

08006214 <__malloc_unlock>:
 8006214:	4801      	ldr	r0, [pc, #4]	@ (800621c <__malloc_unlock+0x8>)
 8006216:	f7ff bf09 	b.w	800602c <__retarget_lock_release_recursive>
 800621a:	bf00      	nop
 800621c:	200006c8 	.word	0x200006c8

08006220 <__sflush_r>:
 8006220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	0716      	lsls	r6, r2, #28
 800622a:	4605      	mov	r5, r0
 800622c:	460c      	mov	r4, r1
 800622e:	d454      	bmi.n	80062da <__sflush_r+0xba>
 8006230:	684b      	ldr	r3, [r1, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	dc02      	bgt.n	800623c <__sflush_r+0x1c>
 8006236:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	dd48      	ble.n	80062ce <__sflush_r+0xae>
 800623c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800623e:	2e00      	cmp	r6, #0
 8006240:	d045      	beq.n	80062ce <__sflush_r+0xae>
 8006242:	2300      	movs	r3, #0
 8006244:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006248:	682f      	ldr	r7, [r5, #0]
 800624a:	6a21      	ldr	r1, [r4, #32]
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	d030      	beq.n	80062b2 <__sflush_r+0x92>
 8006250:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	0759      	lsls	r1, r3, #29
 8006256:	d505      	bpl.n	8006264 <__sflush_r+0x44>
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800625e:	b10b      	cbz	r3, 8006264 <__sflush_r+0x44>
 8006260:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	2300      	movs	r3, #0
 8006266:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	4628      	mov	r0, r5
 800626c:	47b0      	blx	r6
 800626e:	1c43      	adds	r3, r0, #1
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	d106      	bne.n	8006282 <__sflush_r+0x62>
 8006274:	6829      	ldr	r1, [r5, #0]
 8006276:	291d      	cmp	r1, #29
 8006278:	d82b      	bhi.n	80062d2 <__sflush_r+0xb2>
 800627a:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <__sflush_r+0x104>)
 800627c:	410a      	asrs	r2, r1
 800627e:	07d6      	lsls	r6, r2, #31
 8006280:	d427      	bmi.n	80062d2 <__sflush_r+0xb2>
 8006282:	2200      	movs	r2, #0
 8006284:	6062      	str	r2, [r4, #4]
 8006286:	04d9      	lsls	r1, r3, #19
 8006288:	6922      	ldr	r2, [r4, #16]
 800628a:	6022      	str	r2, [r4, #0]
 800628c:	d504      	bpl.n	8006298 <__sflush_r+0x78>
 800628e:	1c42      	adds	r2, r0, #1
 8006290:	d101      	bne.n	8006296 <__sflush_r+0x76>
 8006292:	682b      	ldr	r3, [r5, #0]
 8006294:	b903      	cbnz	r3, 8006298 <__sflush_r+0x78>
 8006296:	6560      	str	r0, [r4, #84]	@ 0x54
 8006298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800629a:	602f      	str	r7, [r5, #0]
 800629c:	b1b9      	cbz	r1, 80062ce <__sflush_r+0xae>
 800629e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062a2:	4299      	cmp	r1, r3
 80062a4:	d002      	beq.n	80062ac <__sflush_r+0x8c>
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7ff fec2 	bl	8006030 <_free_r>
 80062ac:	2300      	movs	r3, #0
 80062ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80062b0:	e00d      	b.n	80062ce <__sflush_r+0xae>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b0      	blx	r6
 80062b8:	4602      	mov	r2, r0
 80062ba:	1c50      	adds	r0, r2, #1
 80062bc:	d1c9      	bne.n	8006252 <__sflush_r+0x32>
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0c6      	beq.n	8006252 <__sflush_r+0x32>
 80062c4:	2b1d      	cmp	r3, #29
 80062c6:	d001      	beq.n	80062cc <__sflush_r+0xac>
 80062c8:	2b16      	cmp	r3, #22
 80062ca:	d11e      	bne.n	800630a <__sflush_r+0xea>
 80062cc:	602f      	str	r7, [r5, #0]
 80062ce:	2000      	movs	r0, #0
 80062d0:	e022      	b.n	8006318 <__sflush_r+0xf8>
 80062d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062d6:	b21b      	sxth	r3, r3
 80062d8:	e01b      	b.n	8006312 <__sflush_r+0xf2>
 80062da:	690f      	ldr	r7, [r1, #16]
 80062dc:	2f00      	cmp	r7, #0
 80062de:	d0f6      	beq.n	80062ce <__sflush_r+0xae>
 80062e0:	0793      	lsls	r3, r2, #30
 80062e2:	680e      	ldr	r6, [r1, #0]
 80062e4:	bf08      	it	eq
 80062e6:	694b      	ldreq	r3, [r1, #20]
 80062e8:	600f      	str	r7, [r1, #0]
 80062ea:	bf18      	it	ne
 80062ec:	2300      	movne	r3, #0
 80062ee:	eba6 0807 	sub.w	r8, r6, r7
 80062f2:	608b      	str	r3, [r1, #8]
 80062f4:	f1b8 0f00 	cmp.w	r8, #0
 80062f8:	dde9      	ble.n	80062ce <__sflush_r+0xae>
 80062fa:	6a21      	ldr	r1, [r4, #32]
 80062fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062fe:	4643      	mov	r3, r8
 8006300:	463a      	mov	r2, r7
 8006302:	4628      	mov	r0, r5
 8006304:	47b0      	blx	r6
 8006306:	2800      	cmp	r0, #0
 8006308:	dc08      	bgt.n	800631c <__sflush_r+0xfc>
 800630a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006312:	81a3      	strh	r3, [r4, #12]
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800631c:	4407      	add	r7, r0
 800631e:	eba8 0800 	sub.w	r8, r8, r0
 8006322:	e7e7      	b.n	80062f4 <__sflush_r+0xd4>
 8006324:	dfbffffe 	.word	0xdfbffffe

08006328 <_fflush_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	4605      	mov	r5, r0
 800632e:	460c      	mov	r4, r1
 8006330:	b913      	cbnz	r3, 8006338 <_fflush_r+0x10>
 8006332:	2500      	movs	r5, #0
 8006334:	4628      	mov	r0, r5
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	b118      	cbz	r0, 8006342 <_fflush_r+0x1a>
 800633a:	6a03      	ldr	r3, [r0, #32]
 800633c:	b90b      	cbnz	r3, 8006342 <_fflush_r+0x1a>
 800633e:	f7ff fc8f 	bl	8005c60 <__sinit>
 8006342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f3      	beq.n	8006332 <_fflush_r+0xa>
 800634a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800634c:	07d0      	lsls	r0, r2, #31
 800634e:	d404      	bmi.n	800635a <_fflush_r+0x32>
 8006350:	0599      	lsls	r1, r3, #22
 8006352:	d402      	bmi.n	800635a <_fflush_r+0x32>
 8006354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006356:	f7ff fe68 	bl	800602a <__retarget_lock_acquire_recursive>
 800635a:	4628      	mov	r0, r5
 800635c:	4621      	mov	r1, r4
 800635e:	f7ff ff5f 	bl	8006220 <__sflush_r>
 8006362:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006364:	07da      	lsls	r2, r3, #31
 8006366:	4605      	mov	r5, r0
 8006368:	d4e4      	bmi.n	8006334 <_fflush_r+0xc>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	059b      	lsls	r3, r3, #22
 800636e:	d4e1      	bmi.n	8006334 <_fflush_r+0xc>
 8006370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006372:	f7ff fe5b 	bl	800602c <__retarget_lock_release_recursive>
 8006376:	e7dd      	b.n	8006334 <_fflush_r+0xc>

08006378 <__swhatbuf_r>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	460c      	mov	r4, r1
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	2900      	cmp	r1, #0
 8006382:	b096      	sub	sp, #88	@ 0x58
 8006384:	4615      	mov	r5, r2
 8006386:	461e      	mov	r6, r3
 8006388:	da0d      	bge.n	80063a6 <__swhatbuf_r+0x2e>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	bf14      	ite	ne
 8006396:	2340      	movne	r3, #64	@ 0x40
 8006398:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800639c:	2000      	movs	r0, #0
 800639e:	6031      	str	r1, [r6, #0]
 80063a0:	602b      	str	r3, [r5, #0]
 80063a2:	b016      	add	sp, #88	@ 0x58
 80063a4:	bd70      	pop	{r4, r5, r6, pc}
 80063a6:	466a      	mov	r2, sp
 80063a8:	f000 f848 	bl	800643c <_fstat_r>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	dbec      	blt.n	800638a <__swhatbuf_r+0x12>
 80063b0:	9901      	ldr	r1, [sp, #4]
 80063b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063ba:	4259      	negs	r1, r3
 80063bc:	4159      	adcs	r1, r3
 80063be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063c2:	e7eb      	b.n	800639c <__swhatbuf_r+0x24>

080063c4 <__smakebuf_r>:
 80063c4:	898b      	ldrh	r3, [r1, #12]
 80063c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063c8:	079d      	lsls	r5, r3, #30
 80063ca:	4606      	mov	r6, r0
 80063cc:	460c      	mov	r4, r1
 80063ce:	d507      	bpl.n	80063e0 <__smakebuf_r+0x1c>
 80063d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	2301      	movs	r3, #1
 80063da:	6163      	str	r3, [r4, #20]
 80063dc:	b003      	add	sp, #12
 80063de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e0:	ab01      	add	r3, sp, #4
 80063e2:	466a      	mov	r2, sp
 80063e4:	f7ff ffc8 	bl	8006378 <__swhatbuf_r>
 80063e8:	9f00      	ldr	r7, [sp, #0]
 80063ea:	4605      	mov	r5, r0
 80063ec:	4639      	mov	r1, r7
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff fe8a 	bl	8006108 <_malloc_r>
 80063f4:	b948      	cbnz	r0, 800640a <__smakebuf_r+0x46>
 80063f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fa:	059a      	lsls	r2, r3, #22
 80063fc:	d4ee      	bmi.n	80063dc <__smakebuf_r+0x18>
 80063fe:	f023 0303 	bic.w	r3, r3, #3
 8006402:	f043 0302 	orr.w	r3, r3, #2
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	e7e2      	b.n	80063d0 <__smakebuf_r+0xc>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	6020      	str	r0, [r4, #0]
 800640e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006412:	81a3      	strh	r3, [r4, #12]
 8006414:	9b01      	ldr	r3, [sp, #4]
 8006416:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800641a:	b15b      	cbz	r3, 8006434 <__smakebuf_r+0x70>
 800641c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006420:	4630      	mov	r0, r6
 8006422:	f000 f81d 	bl	8006460 <_isatty_r>
 8006426:	b128      	cbz	r0, 8006434 <__smakebuf_r+0x70>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	431d      	orrs	r5, r3
 8006438:	81a5      	strh	r5, [r4, #12]
 800643a:	e7cf      	b.n	80063dc <__smakebuf_r+0x18>

0800643c <_fstat_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d07      	ldr	r5, [pc, #28]	@ (800645c <_fstat_r+0x20>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	f7fb feee 	bl	800222a <_fstat>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d102      	bne.n	8006458 <_fstat_r+0x1c>
 8006452:	682b      	ldr	r3, [r5, #0]
 8006454:	b103      	cbz	r3, 8006458 <_fstat_r+0x1c>
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	200006c4 	.word	0x200006c4

08006460 <_isatty_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	@ (800647c <_isatty_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fb feed 	bl	800224a <_isatty>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_isatty_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_isatty_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	200006c4 	.word	0x200006c4

08006480 <_sbrk_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d06      	ldr	r5, [pc, #24]	@ (800649c <_sbrk_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fb fef6 	bl	800227c <_sbrk>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_sbrk_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_sbrk_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	200006c4 	.word	0x200006c4

080064a0 <fmaxf>:
 80064a0:	b508      	push	{r3, lr}
 80064a2:	ed2d 8b02 	vpush	{d8}
 80064a6:	eeb0 8a40 	vmov.f32	s16, s0
 80064aa:	eef0 8a60 	vmov.f32	s17, s1
 80064ae:	f000 f831 	bl	8006514 <__fpclassifyf>
 80064b2:	b930      	cbnz	r0, 80064c2 <fmaxf+0x22>
 80064b4:	eeb0 8a68 	vmov.f32	s16, s17
 80064b8:	eeb0 0a48 	vmov.f32	s0, s16
 80064bc:	ecbd 8b02 	vpop	{d8}
 80064c0:	bd08      	pop	{r3, pc}
 80064c2:	eeb0 0a68 	vmov.f32	s0, s17
 80064c6:	f000 f825 	bl	8006514 <__fpclassifyf>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d0f4      	beq.n	80064b8 <fmaxf+0x18>
 80064ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80064d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d6:	dded      	ble.n	80064b4 <fmaxf+0x14>
 80064d8:	e7ee      	b.n	80064b8 <fmaxf+0x18>

080064da <fminf>:
 80064da:	b508      	push	{r3, lr}
 80064dc:	ed2d 8b02 	vpush	{d8}
 80064e0:	eeb0 8a40 	vmov.f32	s16, s0
 80064e4:	eef0 8a60 	vmov.f32	s17, s1
 80064e8:	f000 f814 	bl	8006514 <__fpclassifyf>
 80064ec:	b930      	cbnz	r0, 80064fc <fminf+0x22>
 80064ee:	eeb0 8a68 	vmov.f32	s16, s17
 80064f2:	eeb0 0a48 	vmov.f32	s0, s16
 80064f6:	ecbd 8b02 	vpop	{d8}
 80064fa:	bd08      	pop	{r3, pc}
 80064fc:	eeb0 0a68 	vmov.f32	s0, s17
 8006500:	f000 f808 	bl	8006514 <__fpclassifyf>
 8006504:	2800      	cmp	r0, #0
 8006506:	d0f4      	beq.n	80064f2 <fminf+0x18>
 8006508:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800650c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006510:	d5ed      	bpl.n	80064ee <fminf+0x14>
 8006512:	e7ee      	b.n	80064f2 <fminf+0x18>

08006514 <__fpclassifyf>:
 8006514:	ee10 3a10 	vmov	r3, s0
 8006518:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800651c:	d00d      	beq.n	800653a <__fpclassifyf+0x26>
 800651e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8006522:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006526:	d30a      	bcc.n	800653e <__fpclassifyf+0x2a>
 8006528:	4b07      	ldr	r3, [pc, #28]	@ (8006548 <__fpclassifyf+0x34>)
 800652a:	1e42      	subs	r2, r0, #1
 800652c:	429a      	cmp	r2, r3
 800652e:	d908      	bls.n	8006542 <__fpclassifyf+0x2e>
 8006530:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8006534:	4258      	negs	r0, r3
 8006536:	4158      	adcs	r0, r3
 8006538:	4770      	bx	lr
 800653a:	2002      	movs	r0, #2
 800653c:	4770      	bx	lr
 800653e:	2004      	movs	r0, #4
 8006540:	4770      	bx	lr
 8006542:	2003      	movs	r0, #3
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	007ffffe 	.word	0x007ffffe

0800654c <_init>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr

08006558 <_fini>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	bf00      	nop
 800655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655e:	bc08      	pop	{r3}
 8006560:	469e      	mov	lr, r3
 8006562:	4770      	bx	lr
