
CAN_MOTORFIRMWARE_like_MIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000731c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080074e4  080074e4  000084e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800751c  0800751c  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007524  08007524  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007524  08007524  00008524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007528  08007528  00008528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800752c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  2000007c  080075a8  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  080075a8  000096c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9af  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e2  00000000  00000000  00018a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c24  00000000  00000000  0001bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002355d  00000000  00000000  0001cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c1b  00000000  00000000  00040179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d54b8  00000000  00000000  00051d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012724c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a38  00000000  00000000  00127290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0012bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080074cc 	.word	0x080074cc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	080074cc 	.word	0x080074cc

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295
 8000824:	f04f 30ff 	movne.w	r0, #4294967295
 8000828:	f000 b96a 	b.w	8000b00 <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9d08      	ldr	r5, [sp, #32]
 800084a:	460c      	mov	r4, r1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d14e      	bne.n	80008ee <__udivmoddi4+0xaa>
 8000850:	4694      	mov	ip, r2
 8000852:	458c      	cmp	ip, r1
 8000854:	4686      	mov	lr, r0
 8000856:	fab2 f282 	clz	r2, r2
 800085a:	d962      	bls.n	8000922 <__udivmoddi4+0xde>
 800085c:	b14a      	cbz	r2, 8000872 <__udivmoddi4+0x2e>
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	4091      	lsls	r1, r2
 8000864:	fa20 f303 	lsr.w	r3, r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	4319      	orrs	r1, r3
 800086e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f f68c 	uxth.w	r6, ip
 800087a:	fbb1 f4f7 	udiv	r4, r1, r7
 800087e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000882:	fb07 1114 	mls	r1, r7, r4, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb04 f106 	mul.w	r1, r4, r6
 800088e:	4299      	cmp	r1, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x64>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f104 30ff 	add.w	r0, r4, #4294967295
 800089a:	f080 8112 	bcs.w	8000ac2 <__udivmoddi4+0x27e>
 800089e:	4299      	cmp	r1, r3
 80008a0:	f240 810f 	bls.w	8000ac2 <__udivmoddi4+0x27e>
 80008a4:	3c02      	subs	r4, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1a59      	subs	r1, r3, r1
 80008aa:	fa1f f38e 	uxth.w	r3, lr
 80008ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b2:	fb07 1110 	mls	r1, r7, r0, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f606 	mul.w	r6, r0, r6
 80008be:	429e      	cmp	r6, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x94>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ca:	f080 80fc 	bcs.w	8000ac6 <__udivmoddi4+0x282>
 80008ce:	429e      	cmp	r6, r3
 80008d0:	f240 80f9 	bls.w	8000ac6 <__udivmoddi4+0x282>
 80008d4:	4463      	add	r3, ip
 80008d6:	3802      	subs	r0, #2
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008de:	2100      	movs	r1, #0
 80008e0:	b11d      	cbz	r5, 80008ea <__udivmoddi4+0xa6>
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d905      	bls.n	80008fe <__udivmoddi4+0xba>
 80008f2:	b10d      	cbz	r5, 80008f8 <__udivmoddi4+0xb4>
 80008f4:	e9c5 0100 	strd	r0, r1, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	4608      	mov	r0, r1
 80008fc:	e7f5      	b.n	80008ea <__udivmoddi4+0xa6>
 80008fe:	fab3 f183 	clz	r1, r3
 8000902:	2900      	cmp	r1, #0
 8000904:	d146      	bne.n	8000994 <__udivmoddi4+0x150>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d302      	bcc.n	8000910 <__udivmoddi4+0xcc>
 800090a:	4290      	cmp	r0, r2
 800090c:	f0c0 80f0 	bcc.w	8000af0 <__udivmoddi4+0x2ac>
 8000910:	1a86      	subs	r6, r0, r2
 8000912:	eb64 0303 	sbc.w	r3, r4, r3
 8000916:	2001      	movs	r0, #1
 8000918:	2d00      	cmp	r5, #0
 800091a:	d0e6      	beq.n	80008ea <__udivmoddi4+0xa6>
 800091c:	e9c5 6300 	strd	r6, r3, [r5]
 8000920:	e7e3      	b.n	80008ea <__udivmoddi4+0xa6>
 8000922:	2a00      	cmp	r2, #0
 8000924:	f040 8090 	bne.w	8000a48 <__udivmoddi4+0x204>
 8000928:	eba1 040c 	sub.w	r4, r1, ip
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	fa1f f78c 	uxth.w	r7, ip
 8000934:	2101      	movs	r1, #1
 8000936:	fbb4 f6f8 	udiv	r6, r4, r8
 800093a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093e:	fb08 4416 	mls	r4, r8, r6, r4
 8000942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000946:	fb07 f006 	mul.w	r0, r7, r6
 800094a:	4298      	cmp	r0, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x11c>
 800094e:	eb1c 0303 	adds.w	r3, ip, r3
 8000952:	f106 34ff 	add.w	r4, r6, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x11a>
 8000958:	4298      	cmp	r0, r3
 800095a:	f200 80cd 	bhi.w	8000af8 <__udivmoddi4+0x2b4>
 800095e:	4626      	mov	r6, r4
 8000960:	1a1c      	subs	r4, r3, r0
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb4 f0f8 	udiv	r0, r4, r8
 800096a:	fb08 4410 	mls	r4, r8, r0, r4
 800096e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000972:	fb00 f707 	mul.w	r7, r0, r7
 8000976:	429f      	cmp	r7, r3
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x148>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000982:	d202      	bcs.n	800098a <__udivmoddi4+0x146>
 8000984:	429f      	cmp	r7, r3
 8000986:	f200 80b0 	bhi.w	8000aea <__udivmoddi4+0x2a6>
 800098a:	4620      	mov	r0, r4
 800098c:	1bdb      	subs	r3, r3, r7
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	e7a5      	b.n	80008e0 <__udivmoddi4+0x9c>
 8000994:	f1c1 0620 	rsb	r6, r1, #32
 8000998:	408b      	lsls	r3, r1
 800099a:	fa22 f706 	lsr.w	r7, r2, r6
 800099e:	431f      	orrs	r7, r3
 80009a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a4:	fa04 f301 	lsl.w	r3, r4, r1
 80009a8:	ea43 030c 	orr.w	r3, r3, ip
 80009ac:	40f4      	lsrs	r4, r6
 80009ae:	fa00 f801 	lsl.w	r8, r0, r1
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b8:	fbb4 fef0 	udiv	lr, r4, r0
 80009bc:	fa1f fc87 	uxth.w	ip, r7
 80009c0:	fb00 441e 	mls	r4, r0, lr, r4
 80009c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c8:	fb0e f90c 	mul.w	r9, lr, ip
 80009cc:	45a1      	cmp	r9, r4
 80009ce:	fa02 f201 	lsl.w	r2, r2, r1
 80009d2:	d90a      	bls.n	80009ea <__udivmoddi4+0x1a6>
 80009d4:	193c      	adds	r4, r7, r4
 80009d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009da:	f080 8084 	bcs.w	8000ae6 <__udivmoddi4+0x2a2>
 80009de:	45a1      	cmp	r9, r4
 80009e0:	f240 8081 	bls.w	8000ae6 <__udivmoddi4+0x2a2>
 80009e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	eba4 0409 	sub.w	r4, r4, r9
 80009ee:	fa1f f983 	uxth.w	r9, r3
 80009f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f6:	fb00 4413 	mls	r4, r0, r3, r4
 80009fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a02:	45a4      	cmp	ip, r4
 8000a04:	d907      	bls.n	8000a16 <__udivmoddi4+0x1d2>
 8000a06:	193c      	adds	r4, r7, r4
 8000a08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a0c:	d267      	bcs.n	8000ade <__udivmoddi4+0x29a>
 8000a0e:	45a4      	cmp	ip, r4
 8000a10:	d965      	bls.n	8000ade <__udivmoddi4+0x29a>
 8000a12:	3b02      	subs	r3, #2
 8000a14:	443c      	add	r4, r7
 8000a16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1e:	eba4 040c 	sub.w	r4, r4, ip
 8000a22:	429c      	cmp	r4, r3
 8000a24:	46ce      	mov	lr, r9
 8000a26:	469c      	mov	ip, r3
 8000a28:	d351      	bcc.n	8000ace <__udivmoddi4+0x28a>
 8000a2a:	d04e      	beq.n	8000aca <__udivmoddi4+0x286>
 8000a2c:	b155      	cbz	r5, 8000a44 <__udivmoddi4+0x200>
 8000a2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a32:	eb64 040c 	sbc.w	r4, r4, ip
 8000a36:	fa04 f606 	lsl.w	r6, r4, r6
 8000a3a:	40cb      	lsrs	r3, r1
 8000a3c:	431e      	orrs	r6, r3
 8000a3e:	40cc      	lsrs	r4, r1
 8000a40:	e9c5 6400 	strd	r6, r4, [r5]
 8000a44:	2100      	movs	r1, #0
 8000a46:	e750      	b.n	80008ea <__udivmoddi4+0xa6>
 8000a48:	f1c2 0320 	rsb	r3, r2, #32
 8000a4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	fa24 f303 	lsr.w	r3, r4, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a64:	fa1f f78c 	uxth.w	r7, ip
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb00 f107 	mul.w	r1, r0, r7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x24c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a86:	d22c      	bcs.n	8000ae2 <__udivmoddi4+0x29e>
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d92a      	bls.n	8000ae2 <__udivmoddi4+0x29e>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a98:	fb08 3311 	mls	r3, r8, r1, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb01 f307 	mul.w	r3, r1, r7
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x276>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ab0:	d213      	bcs.n	8000ada <__udivmoddi4+0x296>
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	d911      	bls.n	8000ada <__udivmoddi4+0x296>
 8000ab6:	3902      	subs	r1, #2
 8000ab8:	4464      	add	r4, ip
 8000aba:	1ae4      	subs	r4, r4, r3
 8000abc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ac0:	e739      	b.n	8000936 <__udivmoddi4+0xf2>
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	e6f0      	b.n	80008a8 <__udivmoddi4+0x64>
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e706      	b.n	80008d8 <__udivmoddi4+0x94>
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d2ae      	bcs.n	8000a2c <__udivmoddi4+0x1e8>
 8000ace:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ad2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7a8      	b.n	8000a2c <__udivmoddi4+0x1e8>
 8000ada:	4631      	mov	r1, r6
 8000adc:	e7ed      	b.n	8000aba <__udivmoddi4+0x276>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e799      	b.n	8000a16 <__udivmoddi4+0x1d2>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e7d4      	b.n	8000a90 <__udivmoddi4+0x24c>
 8000ae6:	46d6      	mov	lr, sl
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1a6>
 8000aea:	4463      	add	r3, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	e74d      	b.n	800098c <__udivmoddi4+0x148>
 8000af0:	4606      	mov	r6, r0
 8000af2:	4623      	mov	r3, r4
 8000af4:	4608      	mov	r0, r1
 8000af6:	e70f      	b.n	8000918 <__udivmoddi4+0xd4>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	e730      	b.n	8000960 <__udivmoddi4+0x11c>
 8000afe:	bf00      	nop

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d013      	beq.n	8000b44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00b      	beq.n	8000b44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b2c:	e000      	b.n	8000b30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f9      	beq.n	8000b2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b3a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_CAN_RxFifo0MsgPendingCallback>:
int check_nan_in_spi_rx(spi_rx *data);


// CAN Rx Callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData_buf);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000b5e:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f002 fd39 	bl	80035da <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d102      	bne.n	8000b76 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		receivedCanBus=0;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
	}
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000538 	.word	0x20000538
 8000b84:	20000104 	.word	0x20000104
 8000b88:	2000000c 	.word	0x2000000c

08000b8c <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, CAN_RxData_buf);
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000b96:	4a09      	ldr	r2, [pc, #36]	@ (8000bbc <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f002 fd1d 	bl	80035da <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d102      	bne.n	8000bae <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		receivedCanBus=1;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000538 	.word	0x20000538
 8000bbc:	20000104 	.word	0x20000104
 8000bc0:	2000000c 	.word	0x2000000c

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bca:	f002 f8e9 	bl	8002da0 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000bce:	f001 fa7f 	bl	80020d0 <SystemClock_Config>

	//Initialize the spi buffers to avoid junk values
	for(int i = 0; i < TX_LEN ; i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	e007      	b.n	8000be8 <main+0x24>
		spi_tx_buffer[i] = 0;
 8000bd8:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd4 <main+0x110>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < TX_LEN ; i++)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3301      	adds	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b41      	cmp	r3, #65	@ 0x41
 8000bec:	ddf4      	ble.n	8000bd8 <main+0x14>
	for(int i = 0; i < RX_LEN ; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	e007      	b.n	8000c04 <main+0x40>
		spi_rx_buffer[i] = 0;
 8000bf4:	4a38      	ldr	r2, [pc, #224]	@ (8000cd8 <main+0x114>)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < RX_LEN ; i++)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b41      	cmp	r3, #65	@ 0x41
 8000c08:	ddf4      	ble.n	8000bf4 <main+0x30>



	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c0a:	f001 fc75 	bl	80024f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c0e:	f001 fc4b 	bl	80024a8 <MX_DMA_Init>
	MX_CAN1_Init();
 8000c12:	f001 facf 	bl	80021b4 <MX_CAN1_Init>
	MX_TIM1_Init();
 8000c16:	f001 fba7 	bl	8002368 <MX_TIM1_Init>
	MX_SPI1_Init();
 8000c1a:	f001 fb73 	bl	8002304 <MX_SPI1_Init>
	MX_CAN2_Init();
 8000c1e:	f001 fb1d 	bl	800225c <MX_CAN2_Init>
	MX_TIM8_Init();
 8000c22:	f001 fbf1 	bl	8002408 <MX_TIM8_Init>

	CAN_Start();
 8000c26:	f000 f99d 	bl	8000f64 <CAN_Start>
	HAL_TIM_Base_Start(&htim1);
 8000c2a:	482c      	ldr	r0, [pc, #176]	@ (8000cdc <main+0x118>)
 8000c2c:	f005 fc20 	bl	8006470 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8000c30:	482b      	ldr	r0, [pc, #172]	@ (8000ce0 <main+0x11c>)
 8000c32:	f005 fc1d 	bl	8006470 <HAL_TIM_Base_Start>


	TxHeader.DLC = 8;  // data length
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <main+0x120>)
 8000c38:	2208      	movs	r2, #8
 8000c3a:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000c3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <main+0x120>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c42:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <main+0x120>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]



	printf("start\n");
 8000c48:	4827      	ldr	r0, [pc, #156]	@ (8000ce8 <main+0x124>)
 8000c4a:	f006 f80f 	bl	8006c6c <puts>

    // ***** ARM SPI once, in interrupt mode *****
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8000c4e:	2342      	movs	r3, #66	@ 0x42
 8000c50:	4a21      	ldr	r2, [pc, #132]	@ (8000cd8 <main+0x114>)
 8000c52:	4920      	ldr	r1, [pc, #128]	@ (8000cd4 <main+0x110>)
 8000c54:	4825      	ldr	r0, [pc, #148]	@ (8000cec <main+0x128>)
 8000c56:	f004 feb7 	bl	80059c8 <HAL_SPI_TransmitReceive_IT>




	// START MOTOR
	motor_mode(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000c5a:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <main+0x12c>)
 8000c5c:	4921      	ldr	r1, [pc, #132]	@ (8000ce4 <main+0x120>)
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 ffee 	bl	8001c40 <motor_mode>
	motor_mode(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000c64:	4a22      	ldr	r2, [pc, #136]	@ (8000cf0 <main+0x12c>)
 8000c66:	491f      	ldr	r1, [pc, #124]	@ (8000ce4 <main+0x120>)
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f000 ffe9 	bl	8001c40 <motor_mode>
	motor_mode(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000c6e:	4a20      	ldr	r2, [pc, #128]	@ (8000cf0 <main+0x12c>)
 8000c70:	491c      	ldr	r1, [pc, #112]	@ (8000ce4 <main+0x120>)
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 ffe4 	bl	8001c40 <motor_mode>
 	delay_us(1000);
 8000c78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c7c:	f001 f8d2 	bl	8001e24 <delay_us>
//			time=__HAL_TIM_GET_COUNTER(&htim8);
//	  }


 	// Loop until exited
	while (exit_command == 0)
 8000c80:	e008      	b.n	8000c94 <main+0xd0>
	{
		//count = 1 executes the CAN
		if(count==1)
 8000c82:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <main+0x130>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d104      	bne.n	8000c94 <main+0xd0>
		{
			can_send_receive();
 8000c8a:	f000 f9e3 	bl	8001054 <can_send_receive>
			count=2;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <main+0x130>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	601a      	str	r2, [r3, #0]
	while (exit_command == 0)
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <main+0x134>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f2      	beq.n	8000c82 <main+0xbe>

	}//end of while


	// STOP MOTOR
	exit_mode(Abad_CANID, &TxHeader, CAN_TxData_buf);
 8000c9c:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <main+0x12c>)
 8000c9e:	4911      	ldr	r1, [pc, #68]	@ (8000ce4 <main+0x120>)
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f001 f813 	bl	8001ccc <exit_mode>
	exit_mode(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8000ca6:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <main+0x12c>)
 8000ca8:	490e      	ldr	r1, [pc, #56]	@ (8000ce4 <main+0x120>)
 8000caa:	2002      	movs	r0, #2
 8000cac:	f001 f80e 	bl	8001ccc <exit_mode>
	exit_mode(Knee_CANID, &TxHeader, CAN_TxData_buf);
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <main+0x12c>)
 8000cb2:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <main+0x120>)
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f001 f809 	bl	8001ccc <exit_mode>


	// Wait before shutting down communication
	delay_us(1000);
 8000cba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cbe:	f001 f8b1 	bl	8001e24 <delay_us>

	// Exit communication
	CAN_Exit();
 8000cc2:	f000 f983 	bl	8000fcc <CAN_Exit>
	SPI_Exit();
 8000cc6:	f000 f929 	bl	8000f1c <SPI_Exit>
 8000cca:	2300      	movs	r3, #0

}// end of main
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000428 	.word	0x20000428
 8000cd8:	200004ac 	.word	0x200004ac
 8000cdc:	2000023c 	.word	0x2000023c
 8000ce0:	20000284 	.word	0x20000284
 8000ce4:	200000ec 	.word	0x200000ec
 8000ce8:	080074e4 	.word	0x080074e4
 8000cec:	20000124 	.word	0x20000124
 8000cf0:	20000530 	.word	0x20000530
 8000cf4:	20000010 	.word	0x20000010
 8000cf8:	20000560 	.word	0x20000560

08000cfc <spi_send_receive>:
							/***************************************************
							 *  				 S P I
							 ***************************************************/

void spi_send_receive(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	//Pack the torques into the flag.
	 state.flags[0] = encode_floats(torque.ab_t[0], torque.hip_t[0], torque.knee_t[0]) | (state.flags[0]& 0x03);
 8000d02:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <spi_send_receive+0xa8>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <spi_send_receive+0xa8>)
 8000d0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d0e:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <spi_send_receive+0xa8>)
 8000d10:	edd3 6a04 	vldr	s13, [r3, #16]
 8000d14:	eeb0 1a66 	vmov.f32	s2, s13
 8000d18:	eef0 0a47 	vmov.f32	s1, s14
 8000d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d20:	f001 f8ba 	bl	8001e98 <encode_floats>
 8000d24:	4602      	mov	r2, r0
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <spi_send_receive+0xac>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	4a1d      	ldr	r2, [pc, #116]	@ (8000da8 <spi_send_receive+0xac>)
 8000d32:	6313      	str	r3, [r2, #48]	@ 0x30
	 state.flags[1] = encode_floats(torque.ab_t[1], torque.hip_t[1], torque.knee_t[1]) | (state.flags[1]& 0x03);
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <spi_send_receive+0xa8>)
 8000d36:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <spi_send_receive+0xa8>)
 8000d3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <spi_send_receive+0xa8>)
 8000d42:	edd3 6a05 	vldr	s13, [r3, #20]
 8000d46:	eeb0 1a66 	vmov.f32	s2, s13
 8000d4a:	eef0 0a47 	vmov.f32	s1, s14
 8000d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d52:	f001 f8a1 	bl	8001e98 <encode_floats>
 8000d56:	4602      	mov	r2, r0
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <spi_send_receive+0xac>)
 8000d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <spi_send_receive+0xac>)
 8000d64:	6353      	str	r3, [r2, #52]	@ 0x34


	//calculate the checksum
	state.checksum = xor_checksum((uint32_t*)&state,14);
 8000d66:	210e      	movs	r1, #14
 8000d68:	480f      	ldr	r0, [pc, #60]	@ (8000da8 <spi_send_receive+0xac>)
 8000d6a:	f001 f875 	bl	8001e58 <xor_checksum>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <spi_send_receive+0xac>)
 8000d72:	6393      	str	r3, [r2, #56]	@ 0x38

	//pack the status variables into the tx buffer
	for(int i = 0; i < STATE_LEN ; i++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	e00b      	b.n	8000d92 <spi_send_receive+0x96>
	{
		spi_tx_buffer[i] = ((uint16_t*)(&state))[i];
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <spi_send_receive+0xac>)
 8000d80:	4413      	add	r3, r2
 8000d82:	8819      	ldrh	r1, [r3, #0]
 8000d84:	4a09      	ldr	r2, [pc, #36]	@ (8000dac <spi_send_receive+0xb0>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < STATE_LEN ; i++)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b1d      	cmp	r3, #29
 8000d96:	ddf0      	ble.n	8000d7a <spi_send_receive+0x7e>
	}
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000410 	.word	0x20000410
 8000da8:	200003d4 	.word	0x200003d4
 8000dac:	20000428 	.word	0x20000428

08000db0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1 && count == 2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a39      	ldr	r2, [pc, #228]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0xf4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d16b      	bne.n	8000e9a <HAL_SPI_TxRxCpltCallback+0xea>
 8000dc2:	4b39      	ldr	r3, [pc, #228]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0xf8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d167      	bne.n	8000e9a <HAL_SPI_TxRxCpltCallback+0xea>
	{
		uint8_t validData = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
		//unpack the received bytes from rx buffer into †he valuesrec structur

		for(int i = 0; i < RX_LEN; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	e00b      	b.n	8000dec <HAL_SPI_TxRxCpltCallback+0x3c>
		{
			((uint16_t*) &valuesrec)[i] = spi_rx_buffer[i];
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4a34      	ldr	r2, [pc, #208]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000dda:	4413      	add	r3, r2
 8000ddc:	4934      	ldr	r1, [pc, #208]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x100>)
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000de4:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < RX_LEN; i++)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	3301      	adds	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	2b41      	cmp	r3, #65	@ 0x41
 8000df0:	ddf0      	ble.n	8000dd4 <HAL_SPI_TxRxCpltCallback+0x24>

		}

		if (check_nan_in_spi_rx(&valuesrec))
 8000df2:	482e      	ldr	r0, [pc, #184]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000df4:	f001 f92a 	bl	800204c <check_nan_in_spi_rx>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_SPI_TxRxCpltCallback+0x52>
		{
			validData = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	75fb      	strb	r3, [r7, #23]
		}

		if(validData == 1)
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d13d      	bne.n	8000e84 <HAL_SPI_TxRxCpltCallback+0xd4>
		{
			//if the communication has no issues the values will write in the control structure
			checksum_calc = xor_checksum((uint32_t*)&valuesrec,32);
 8000e08:	2120      	movs	r1, #32
 8000e0a:	4828      	ldr	r0, [pc, #160]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e0c:	f001 f824 	bl	8001e58 <xor_checksum>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a28      	ldr	r2, [pc, #160]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x104>)
 8000e14:	6013      	str	r3, [r2, #0]

			//Retrieve the current control Mode stored at higher 16 bits and reset flags to its value
			currentControlMode = (valuesrec.flags[0]>>16);
 8000e16:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x108>)
 8000e1e:	6013      	str	r3, [r2, #0]
			valuesrec.flags[0] = (valuesrec.flags[0] & 0xFFFF);
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e28:	6793      	str	r3, [r2, #120]	@ 0x78
			valuesrec.flags[1] = (valuesrec.flags[1] & 0xFFFF);
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4a1e      	ldr	r2, [pc, #120]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e32:	67d3      	str	r3, [r2, #124]	@ 0x7c

			if(valuesrec.checksum == checksum_calc && (valuesrec.flags[0]<=3 || valuesrec.flags[1]<=3))
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e36:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x104>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d11b      	bne.n	8000e7a <HAL_SPI_TxRxCpltCallback+0xca>
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d903      	bls.n	8000e52 <HAL_SPI_TxRxCpltCallback+0xa2>
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d813      	bhi.n	8000e7a <HAL_SPI_TxRxCpltCallback+0xca>
			{
				for(int i = 0; i < CONTROL_LEN; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e00c      	b.n	8000e72 <HAL_SPI_TxRxCpltCallback+0xc2>
				{
					((uint16_t*) &control)[i] = ((uint16_t*) &valuesrec)[i];
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4a13      	ldr	r2, [pc, #76]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0xfc>)
 8000e5e:	441a      	add	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4915      	ldr	r1, [pc, #84]	@ (8000ebc <HAL_SPI_TxRxCpltCallback+0x10c>)
 8000e66:	440b      	add	r3, r1
 8000e68:	8812      	ldrh	r2, [r2, #0]
 8000e6a:	801a      	strh	r2, [r3, #0]
				for(int i = 0; i < CONTROL_LEN; i++)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2b41      	cmp	r3, #65	@ 0x41
 8000e76:	ddef      	ble.n	8000e58 <HAL_SPI_TxRxCpltCallback+0xa8>
 8000e78:	e004      	b.n	8000e84 <HAL_SPI_TxRxCpltCallback+0xd4>
				}
			}
			else
			{
				count_checksumerror = count_checksumerror + 1;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_SPI_TxRxCpltCallback+0x110>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <HAL_SPI_TxRxCpltCallback+0x110>)
 8000e82:	6013      	str	r3, [r2, #0]
			}
		}

		// ***** Now prepare for the NEXT transaction *****
		// 1. Update spi_tx_buffer with fresh data
		spi_send_receive();
 8000e84:	f7ff ff3a 	bl	8000cfc <spi_send_receive>

		// 2. Re-arm the SPI in interrupt mode
		HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8000e88:	2342      	movs	r3, #66	@ 0x42
 8000e8a:	4a09      	ldr	r2, [pc, #36]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x100>)
 8000e8c:	490d      	ldr	r1, [pc, #52]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x114>)
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x118>)
 8000e90:	f004 fd9a 	bl	80059c8 <HAL_SPI_TransmitReceive_IT>
		//HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);

		//Start CAN
		count = 1;
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0xf8>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
	}//If it is SPI1
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	20000010 	.word	0x20000010
 8000eac:	200002cc 	.word	0x200002cc
 8000eb0:	200004ac 	.word	0x200004ac
 8000eb4:	20000544 	.word	0x20000544
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000350 	.word	0x20000350
 8000ec0:	20000540 	.word	0x20000540
 8000ec4:	20000428 	.word	0x20000428
 8000ec8:	20000124 	.word	0x20000124

08000ecc <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback (SPI_HandleTypeDef* hspi){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	CallbackError_spi=HAL_SPI_GetError(&hspi1);
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <HAL_SPI_ErrorCallback+0x3c>)
 8000ed6:	f004 fff5 	bl	8005ec4 <HAL_SPI_GetError>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <HAL_SPI_ErrorCallback+0x40>)
 8000ede:	6013      	str	r3, [r2, #0]

	HAL_SPI_DeInit(&hspi1);
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <HAL_SPI_ErrorCallback+0x3c>)
 8000ee2:	f004 fd48 	bl	8005976 <HAL_SPI_DeInit>
	HAL_SPI_Init(&hspi1);
 8000ee6:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <HAL_SPI_ErrorCallback+0x3c>)
 8000ee8:	f004 fcbc 	bl	8005864 <HAL_SPI_Init>
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8000eec:	2342      	movs	r3, #66	@ 0x42
 8000eee:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <HAL_SPI_ErrorCallback+0x44>)
 8000ef0:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <HAL_SPI_ErrorCallback+0x48>)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <HAL_SPI_ErrorCallback+0x3c>)
 8000ef4:	f004 fd68 	bl	80059c8 <HAL_SPI_TransmitReceive_IT>

	//Start CAN
	count = 1;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <HAL_SPI_ErrorCallback+0x4c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000124 	.word	0x20000124
 8000f0c:	20000564 	.word	0x20000564
 8000f10:	200004ac 	.word	0x200004ac
 8000f14:	20000428 	.word	0x20000428
 8000f18:	20000010 	.word	0x20000010

08000f1c <SPI_Exit>:

void SPI_Exit(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    // Disable SPI Interrupts
    HAL_NVIC_DisableIRQ(DMA2_Stream0_IRQn); // If SPI uses DMA Rx
 8000f20:	2038      	movs	r0, #56	@ 0x38
 8000f22:	f002 ffe0 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn); // If SPI uses DMA Tx
 8000f26:	203b      	movs	r0, #59	@ 0x3b
 8000f28:	f002 ffdd 	bl	8003ee6 <HAL_NVIC_DisableIRQ>

    // Abort any ongoing SPI transactions
    HAL_SPI_Abort(&hspi1);
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <SPI_Exit+0x44>)
 8000f2e:	f004 fddf 	bl	8005af0 <HAL_SPI_Abort>

    // Stop SPI DMA if enabled
    if (hspi1.hdmatx) {
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <SPI_Exit+0x44>)
 8000f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <SPI_Exit+0x28>
        HAL_DMA_Abort(hspi1.hdmatx);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <SPI_Exit+0x44>)
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 f8f8 	bl	8004134 <HAL_DMA_Abort>
    }
    if (hspi1.hdmarx) {
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <SPI_Exit+0x44>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <SPI_Exit+0x3a>
        HAL_DMA_Abort(hspi1.hdmarx);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SPI_Exit+0x44>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 f8ef 	bl	8004134 <HAL_DMA_Abort>
    }

    // Disable SPI Peripheral
    HAL_SPI_DeInit(&hspi1);
 8000f56:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <SPI_Exit+0x44>)
 8000f58:	f004 fd0d 	bl	8005976 <HAL_SPI_DeInit>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000124 	.word	0x20000124

08000f64 <CAN_Start>:

							/***************************************************
							 *  				 C A N
							 ***************************************************/

void CAN_Start(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    // Stop CAN to prevent any ongoing transmissions
    HAL_CAN_Stop(&hcan1);
 8000f68:	4816      	ldr	r0, [pc, #88]	@ (8000fc4 <CAN_Start+0x60>)
 8000f6a:	f002 f9cd 	bl	8003308 <HAL_CAN_Stop>
    HAL_CAN_Stop(&hcan2);
 8000f6e:	4816      	ldr	r0, [pc, #88]	@ (8000fc8 <CAN_Start+0x64>)
 8000f70:	f002 f9ca 	bl	8003308 <HAL_CAN_Stop>

    // Abort any pending transmissions safely using HAL functions
    HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX0);
 8000f74:	2101      	movs	r1, #1
 8000f76:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <CAN_Start+0x60>)
 8000f78:	f002 faea 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX1);
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <CAN_Start+0x60>)
 8000f80:	f002 fae6 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX2);
 8000f84:	2104      	movs	r1, #4
 8000f86:	480f      	ldr	r0, [pc, #60]	@ (8000fc4 <CAN_Start+0x60>)
 8000f88:	f002 fae2 	bl	8003550 <HAL_CAN_AbortTxRequest>

    HAL_CAN_AbortTxRequest(&hcan2, CAN_TX_MAILBOX0);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <CAN_Start+0x64>)
 8000f90:	f002 fade 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan2, CAN_TX_MAILBOX1);
 8000f94:	2102      	movs	r1, #2
 8000f96:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <CAN_Start+0x64>)
 8000f98:	f002 fada 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan2, CAN_TX_MAILBOX2);
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <CAN_Start+0x64>)
 8000fa0:	f002 fad6 	bl	8003550 <HAL_CAN_AbortTxRequest>

    // Restart CAN
    HAL_CAN_Start(&hcan1);
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <CAN_Start+0x60>)
 8000fa6:	f002 f96b 	bl	8003280 <HAL_CAN_Start>
    HAL_CAN_Start(&hcan2);
 8000faa:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <CAN_Start+0x64>)
 8000fac:	f002 f968 	bl	8003280 <HAL_CAN_Start>

    // Reactivate CAN notifications (if used)
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <CAN_Start+0x60>)
 8000fb4:	f002 fc23 	bl	80037fe <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <CAN_Start+0x64>)
 8000fbc:	f002 fc1f 	bl	80037fe <HAL_CAN_ActivateNotification>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000009c 	.word	0x2000009c
 8000fc8:	200000c4 	.word	0x200000c4

08000fcc <CAN_Exit>:

void CAN_Exit(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

    // Disable CAN interrupts
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000fd0:	2013      	movs	r0, #19
 8000fd2:	f002 ff88 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000fd6:	2014      	movs	r0, #20
 8000fd8:	f002 ff85 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000fdc:	2015      	movs	r0, #21
 8000fde:	f002 ff82 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8000fe2:	2016      	movs	r0, #22
 8000fe4:	f002 ff7f 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_TX_IRQn);
 8000fe8:	203f      	movs	r0, #63	@ 0x3f
 8000fea:	f002 ff7c 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 8000fee:	2040      	movs	r0, #64	@ 0x40
 8000ff0:	f002 ff79 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 8000ff4:	2041      	movs	r0, #65	@ 0x41
 8000ff6:	f002 ff76 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_SCE_IRQn);
 8000ffa:	2042      	movs	r0, #66	@ 0x42
 8000ffc:	f002 ff73 	bl	8003ee6 <HAL_NVIC_DisableIRQ>

    // Abort any pending CAN transmissions
    HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX0);
 8001000:	2101      	movs	r1, #1
 8001002:	4812      	ldr	r0, [pc, #72]	@ (800104c <CAN_Exit+0x80>)
 8001004:	f002 faa4 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX1);
 8001008:	2102      	movs	r1, #2
 800100a:	4810      	ldr	r0, [pc, #64]	@ (800104c <CAN_Exit+0x80>)
 800100c:	f002 faa0 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX2);
 8001010:	2104      	movs	r1, #4
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <CAN_Exit+0x80>)
 8001014:	f002 fa9c 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan2, CAN_TX_MAILBOX0);
 8001018:	2101      	movs	r1, #1
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <CAN_Exit+0x84>)
 800101c:	f002 fa98 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan2, CAN_TX_MAILBOX1);
 8001020:	2102      	movs	r1, #2
 8001022:	480b      	ldr	r0, [pc, #44]	@ (8001050 <CAN_Exit+0x84>)
 8001024:	f002 fa94 	bl	8003550 <HAL_CAN_AbortTxRequest>
    HAL_CAN_AbortTxRequest(&hcan2, CAN_TX_MAILBOX2);
 8001028:	2104      	movs	r1, #4
 800102a:	4809      	ldr	r0, [pc, #36]	@ (8001050 <CAN_Exit+0x84>)
 800102c:	f002 fa90 	bl	8003550 <HAL_CAN_AbortTxRequest>

    // Disable CAN
    HAL_CAN_Stop(&hcan1);
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <CAN_Exit+0x80>)
 8001032:	f002 f969 	bl	8003308 <HAL_CAN_Stop>
    HAL_CAN_Stop(&hcan2);
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <CAN_Exit+0x84>)
 8001038:	f002 f966 	bl	8003308 <HAL_CAN_Stop>

	HAL_CAN_DeInit(&hcan1);
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <CAN_Exit+0x80>)
 800103e:	f002 f81c 	bl	800307a <HAL_CAN_DeInit>
	HAL_CAN_DeInit(&hcan2);
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <CAN_Exit+0x84>)
 8001044:	f002 f819 	bl	800307a <HAL_CAN_DeInit>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000009c 	.word	0x2000009c
 8001050:	200000c4 	.word	0x200000c4

08001054 <can_send_receive>:

void can_send_receive(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

	// Reset the flags before each CAN communication
	state.flags[0] = 0;
 8001058:	4b48      	ldr	r3, [pc, #288]	@ (800117c <can_send_receive+0x128>)
 800105a:	2200      	movs	r2, #0
 800105c:	631a      	str	r2, [r3, #48]	@ 0x30
	state.flags[1] = 0;
 800105e:	4b47      	ldr	r3, [pc, #284]	@ (800117c <can_send_receive+0x128>)
 8001060:	2200      	movs	r2, #0
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34

	CAN=0;
 8001064:	4b46      	ldr	r3, [pc, #280]	@ (8001180 <can_send_receive+0x12c>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
	pack_message(Abad_CANID, &TxHeader, CAN_TxData_buf);
 800106a:	4a46      	ldr	r2, [pc, #280]	@ (8001184 <can_send_receive+0x130>)
 800106c:	4946      	ldr	r1, [pc, #280]	@ (8001188 <can_send_receive+0x134>)
 800106e:	2001      	movs	r0, #1
 8001070:	f000 f896 	bl	80011a0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8001074:	4b45      	ldr	r3, [pc, #276]	@ (800118c <can_send_receive+0x138>)
 8001076:	4a43      	ldr	r2, [pc, #268]	@ (8001184 <can_send_receive+0x130>)
 8001078:	4943      	ldr	r1, [pc, #268]	@ (8001188 <can_send_receive+0x134>)
 800107a:	4845      	ldr	r0, [pc, #276]	@ (8001190 <can_send_receive+0x13c>)
 800107c:	f002 f98d 	bl	800339a <HAL_CAN_AddTxMessage>
    delay_us(300);
 8001080:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001084:	f000 fece 	bl	8001e24 <delay_us>
	if (receivedCanBus==0){
 8001088:	4b42      	ldr	r3, [pc, #264]	@ (8001194 <can_send_receive+0x140>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <can_send_receive+0x42>
		unpack_replay(CAN_RxData_buf);
 8001090:	4841      	ldr	r0, [pc, #260]	@ (8001198 <can_send_receive+0x144>)
 8001092:	f000 fbdd 	bl	8001850 <unpack_replay>
	}
	pack_message(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8001096:	4a3b      	ldr	r2, [pc, #236]	@ (8001184 <can_send_receive+0x130>)
 8001098:	493b      	ldr	r1, [pc, #236]	@ (8001188 <can_send_receive+0x134>)
 800109a:	2002      	movs	r0, #2
 800109c:	f000 f880 	bl	80011a0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 80010a0:	4b3a      	ldr	r3, [pc, #232]	@ (800118c <can_send_receive+0x138>)
 80010a2:	4a38      	ldr	r2, [pc, #224]	@ (8001184 <can_send_receive+0x130>)
 80010a4:	4938      	ldr	r1, [pc, #224]	@ (8001188 <can_send_receive+0x134>)
 80010a6:	483a      	ldr	r0, [pc, #232]	@ (8001190 <can_send_receive+0x13c>)
 80010a8:	f002 f977 	bl	800339a <HAL_CAN_AddTxMessage>
    delay_us(300);
 80010ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010b0:	f000 feb8 	bl	8001e24 <delay_us>
	if (receivedCanBus==0){
 80010b4:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <can_send_receive+0x140>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <can_send_receive+0x6e>
		unpack_replay(CAN_RxData_buf);
 80010bc:	4836      	ldr	r0, [pc, #216]	@ (8001198 <can_send_receive+0x144>)
 80010be:	f000 fbc7 	bl	8001850 <unpack_replay>
	}
	pack_message(Knee_CANID, &TxHeader, CAN_TxData_buf);
 80010c2:	4a30      	ldr	r2, [pc, #192]	@ (8001184 <can_send_receive+0x130>)
 80010c4:	4930      	ldr	r1, [pc, #192]	@ (8001188 <can_send_receive+0x134>)
 80010c6:	2003      	movs	r0, #3
 80010c8:	f000 f86a 	bl	80011a0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CAN_TxData_buf, &TxMailbox);
 80010cc:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <can_send_receive+0x138>)
 80010ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001184 <can_send_receive+0x130>)
 80010d0:	492d      	ldr	r1, [pc, #180]	@ (8001188 <can_send_receive+0x134>)
 80010d2:	482f      	ldr	r0, [pc, #188]	@ (8001190 <can_send_receive+0x13c>)
 80010d4:	f002 f961 	bl	800339a <HAL_CAN_AddTxMessage>
    delay_us(300);
 80010d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010dc:	f000 fea2 	bl	8001e24 <delay_us>
	if (receivedCanBus==0){
 80010e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <can_send_receive+0x140>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <can_send_receive+0x9a>
		unpack_replay(CAN_RxData_buf);
 80010e8:	482b      	ldr	r0, [pc, #172]	@ (8001198 <can_send_receive+0x144>)
 80010ea:	f000 fbb1 	bl	8001850 <unpack_replay>
	}

	CAN=1;
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <can_send_receive+0x12c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
	pack_message(Abad_CANID, &TxHeader, CAN_TxData_buf);
 80010f4:	4a23      	ldr	r2, [pc, #140]	@ (8001184 <can_send_receive+0x130>)
 80010f6:	4924      	ldr	r1, [pc, #144]	@ (8001188 <can_send_receive+0x134>)
 80010f8:	2001      	movs	r0, #1
 80010fa:	f000 f851 	bl	80011a0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <can_send_receive+0x138>)
 8001100:	4a20      	ldr	r2, [pc, #128]	@ (8001184 <can_send_receive+0x130>)
 8001102:	4921      	ldr	r1, [pc, #132]	@ (8001188 <can_send_receive+0x134>)
 8001104:	4825      	ldr	r0, [pc, #148]	@ (800119c <can_send_receive+0x148>)
 8001106:	f002 f948 	bl	800339a <HAL_CAN_AddTxMessage>
    delay_us(300);
 800110a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800110e:	f000 fe89 	bl	8001e24 <delay_us>
	if (receivedCanBus==1){
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <can_send_receive+0x140>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d102      	bne.n	8001120 <can_send_receive+0xcc>
		unpack_replay(CAN_RxData_buf);
 800111a:	481f      	ldr	r0, [pc, #124]	@ (8001198 <can_send_receive+0x144>)
 800111c:	f000 fb98 	bl	8001850 <unpack_replay>
	}
	pack_message(Hip_CANID, &TxHeader, CAN_TxData_buf);
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <can_send_receive+0x130>)
 8001122:	4919      	ldr	r1, [pc, #100]	@ (8001188 <can_send_receive+0x134>)
 8001124:	2002      	movs	r0, #2
 8001126:	f000 f83b 	bl	80011a0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <can_send_receive+0x138>)
 800112c:	4a15      	ldr	r2, [pc, #84]	@ (8001184 <can_send_receive+0x130>)
 800112e:	4916      	ldr	r1, [pc, #88]	@ (8001188 <can_send_receive+0x134>)
 8001130:	481a      	ldr	r0, [pc, #104]	@ (800119c <can_send_receive+0x148>)
 8001132:	f002 f932 	bl	800339a <HAL_CAN_AddTxMessage>
    delay_us(300);
 8001136:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800113a:	f000 fe73 	bl	8001e24 <delay_us>
	if (receivedCanBus==1){
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <can_send_receive+0x140>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d102      	bne.n	800114c <can_send_receive+0xf8>
		unpack_replay(CAN_RxData_buf);
 8001146:	4814      	ldr	r0, [pc, #80]	@ (8001198 <can_send_receive+0x144>)
 8001148:	f000 fb82 	bl	8001850 <unpack_replay>
	}
	pack_message(Knee_CANID, &TxHeader, CAN_TxData_buf);
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <can_send_receive+0x130>)
 800114e:	490e      	ldr	r1, [pc, #56]	@ (8001188 <can_send_receive+0x134>)
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f825 	bl	80011a0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, CAN_TxData_buf, &TxMailbox);
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <can_send_receive+0x138>)
 8001158:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <can_send_receive+0x130>)
 800115a:	490b      	ldr	r1, [pc, #44]	@ (8001188 <can_send_receive+0x134>)
 800115c:	480f      	ldr	r0, [pc, #60]	@ (800119c <can_send_receive+0x148>)
 800115e:	f002 f91c 	bl	800339a <HAL_CAN_AddTxMessage>
    delay_us(300);
 8001162:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001166:	f000 fe5d 	bl	8001e24 <delay_us>
	if (receivedCanBus==1){
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <can_send_receive+0x140>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <can_send_receive+0x124>
		unpack_replay(CAN_RxData_buf);
 8001172:	4809      	ldr	r0, [pc, #36]	@ (8001198 <can_send_receive+0x144>)
 8001174:	f000 fb6c 	bl	8001850 <unpack_replay>
	}

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200003d4 	.word	0x200003d4
 8001180:	20000098 	.word	0x20000098
 8001184:	20000530 	.word	0x20000530
 8001188:	200000ec 	.word	0x200000ec
 800118c:	20000120 	.word	0x20000120
 8001190:	2000009c 	.word	0x2000009c
 8001194:	2000000c 	.word	0x2000000c
 8001198:	20000538 	.word	0x20000538
 800119c:	200000c4 	.word	0x200000c4

080011a0 <pack_message>:

/////////////////////////pack and unpack//////////////////////////

void pack_message(uint8_t ID,CAN_TxHeaderTypeDef*Header,uint8_t*Data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	@ 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	73fb      	strb	r3, [r7, #15]

	if(ID == Abad_CANID)
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f040 80ae 	bne.w	8001312 <pack_message+0x172>
	{
		p_in 	= (control.ab_p[CAN] * ab_mitdirection[CAN]);
 80011b6:	4bbc      	ldr	r3, [pc, #752]	@ (80014a8 <pack_message+0x308>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4abc      	ldr	r2, [pc, #752]	@ (80014ac <pack_message+0x30c>)
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	ed93 7a00 	vldr	s14, [r3]
 80011c4:	4bb8      	ldr	r3, [pc, #736]	@ (80014a8 <pack_message+0x308>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4bb9      	ldr	r3, [pc, #740]	@ (80014b0 <pack_message+0x310>)
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	4bb5      	ldr	r3, [pc, #724]	@ (80014b4 <pack_message+0x314>)
 80011de:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.ab_v[CAN] * ab_mitdirection[CAN]);
 80011e2:	4bb1      	ldr	r3, [pc, #708]	@ (80014a8 <pack_message+0x308>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4ab1      	ldr	r2, [pc, #708]	@ (80014ac <pack_message+0x30c>)
 80011e8:	3306      	adds	r3, #6
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	4bad      	ldr	r3, [pc, #692]	@ (80014a8 <pack_message+0x308>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4bad      	ldr	r3, [pc, #692]	@ (80014b0 <pack_message+0x310>)
 80011fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120a:	4bab      	ldr	r3, [pc, #684]	@ (80014b8 <pack_message+0x318>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
		kp_in 	=  control.ab_kp[CAN];   //stifness
 8001210:	4ba5      	ldr	r3, [pc, #660]	@ (80014a8 <pack_message+0x308>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4aa5      	ldr	r2, [pc, #660]	@ (80014ac <pack_message+0x30c>)
 8001216:	330c      	adds	r3, #12
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4aa7      	ldr	r2, [pc, #668]	@ (80014bc <pack_message+0x31c>)
 8001220:	6013      	str	r3, [r2, #0]
		kd_in 	=  control.ab_kd[CAN];     //damper
 8001222:	4ba1      	ldr	r3, [pc, #644]	@ (80014a8 <pack_message+0x308>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4aa1      	ldr	r2, [pc, #644]	@ (80014ac <pack_message+0x30c>)
 8001228:	3312      	adds	r3, #18
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4aa3      	ldr	r2, [pc, #652]	@ (80014c0 <pack_message+0x320>)
 8001232:	6013      	str	r3, [r2, #0]
		t_in 	= (control.ab_t[CAN] * ab_mitdirection[CAN]);
 8001234:	4b9c      	ldr	r3, [pc, #624]	@ (80014a8 <pack_message+0x308>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4a9c      	ldr	r2, [pc, #624]	@ (80014ac <pack_message+0x30c>)
 800123a:	3318      	adds	r3, #24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	ed93 7a00 	vldr	s14, [r3]
 8001244:	4b98      	ldr	r3, [pc, #608]	@ (80014a8 <pack_message+0x308>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b99      	ldr	r3, [pc, #612]	@ (80014b0 <pack_message+0x310>)
 800124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	4b99      	ldr	r3, [pc, #612]	@ (80014c4 <pack_message+0x324>)
 800125e:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.ab_p[CAN],state.ab_p[CAN],AB_LIM_P, AB_LIM_N))
 8001262:	4b91      	ldr	r3, [pc, #580]	@ (80014a8 <pack_message+0x308>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4a90      	ldr	r2, [pc, #576]	@ (80014ac <pack_message+0x30c>)
 800126a:	441a      	add	r2, r3
 800126c:	4b8e      	ldr	r3, [pc, #568]	@ (80014a8 <pack_message+0x308>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4995      	ldr	r1, [pc, #596]	@ (80014c8 <pack_message+0x328>)
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 80014cc <pack_message+0x32c>
 800127e:	eddf 0a94 	vldr	s1, [pc, #592]	@ 80014d0 <pack_message+0x330>
 8001282:	eeb0 0a67 	vmov.f32	s0, s15
 8001286:	4610      	mov	r0, r2
 8001288:	f000 fc34 	bl	8001af4 <softstop_joint>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d021      	beq.n	80012d6 <pack_message+0x136>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b01;
 8001292:	4b85      	ldr	r3, [pc, #532]	@ (80014a8 <pack_message+0x308>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4a8c      	ldr	r2, [pc, #560]	@ (80014c8 <pack_message+0x328>)
 8001298:	330c      	adds	r3, #12
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	4a82      	ldr	r2, [pc, #520]	@ (80014a8 <pack_message+0x308>)
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	4610      	mov	r0, r2
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	4987      	ldr	r1, [pc, #540]	@ (80014c8 <pack_message+0x328>)
 80012aa:	f100 030c 	add.w	r3, r0, #12
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = p_in * ab_mitdirection[CAN]; // Direction update
 80012b2:	4b7d      	ldr	r3, [pc, #500]	@ (80014a8 <pack_message+0x308>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b7d      	ldr	r3, [pc, #500]	@ (80014b0 <pack_message+0x310>)
 80012ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c6:	4b7b      	ldr	r3, [pc, #492]	@ (80014b4 <pack_message+0x314>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d0:	4b78      	ldr	r3, [pc, #480]	@ (80014b4 <pack_message+0x314>)
 80012d2:	edc3 7a00 	vstr	s15, [r3]
//			t_in = t_in * ab_mitdirection[CAN]; // Direction update
		}

		// Safety Limit
		safetycheck_reqTrq(state.ab_p[CAN], state.ab_v[CAN], torque.ab_t[CAN]);
 80012d6:	4b74      	ldr	r3, [pc, #464]	@ (80014a8 <pack_message+0x308>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4a7b      	ldr	r2, [pc, #492]	@ (80014c8 <pack_message+0x328>)
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <pack_message+0x308>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4a77      	ldr	r2, [pc, #476]	@ (80014c8 <pack_message+0x328>)
 80012ea:	3306      	adds	r3, #6
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	4b6c      	ldr	r3, [pc, #432]	@ (80014a8 <pack_message+0x308>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4a76      	ldr	r2, [pc, #472]	@ (80014d4 <pack_message+0x334>)
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	edd3 6a00 	vldr	s13, [r3]
 8001302:	eeb0 1a66 	vmov.f32	s2, s13
 8001306:	eef0 0a47 	vmov.f32	s1, s14
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	f000 fc23 	bl	8001b58 <safetycheck_reqTrq>
	}
	if(ID == Hip_CANID)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b02      	cmp	r3, #2
 8001316:	f040 80b3 	bne.w	8001480 <pack_message+0x2e0>
	{
		p_in 	= (control.hip_p[CAN] * hip_mitdirection[CAN]);
 800131a:	4b63      	ldr	r3, [pc, #396]	@ (80014a8 <pack_message+0x308>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4a63      	ldr	r2, [pc, #396]	@ (80014ac <pack_message+0x30c>)
 8001320:	3302      	adds	r3, #2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	4b5f      	ldr	r3, [pc, #380]	@ (80014a8 <pack_message+0x308>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <pack_message+0x338>)
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001342:	4b5c      	ldr	r3, [pc, #368]	@ (80014b4 <pack_message+0x314>)
 8001344:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.hip_v[CAN] * hip_mitdirection[CAN]);
 8001348:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <pack_message+0x308>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4a57      	ldr	r2, [pc, #348]	@ (80014ac <pack_message+0x30c>)
 800134e:	3308      	adds	r3, #8
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	ed93 7a00 	vldr	s14, [r3]
 8001358:	4b53      	ldr	r3, [pc, #332]	@ (80014a8 <pack_message+0x308>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <pack_message+0x338>)
 8001360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	4b51      	ldr	r3, [pc, #324]	@ (80014b8 <pack_message+0x318>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
		kp_in	=  control.hip_kp[CAN];   //stifness
 8001376:	4b4c      	ldr	r3, [pc, #304]	@ (80014a8 <pack_message+0x308>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4a4c      	ldr	r2, [pc, #304]	@ (80014ac <pack_message+0x30c>)
 800137c:	330e      	adds	r3, #14
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a4d      	ldr	r2, [pc, #308]	@ (80014bc <pack_message+0x31c>)
 8001386:	6013      	str	r3, [r2, #0]
		kd_in	=  control.hip_kd[CAN];     //damper
 8001388:	4b47      	ldr	r3, [pc, #284]	@ (80014a8 <pack_message+0x308>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4a47      	ldr	r2, [pc, #284]	@ (80014ac <pack_message+0x30c>)
 800138e:	3314      	adds	r3, #20
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a4a      	ldr	r2, [pc, #296]	@ (80014c0 <pack_message+0x320>)
 8001398:	6013      	str	r3, [r2, #0]
		t_in	= (control.hip_t[CAN] * hip_mitdirection[CAN]);
 800139a:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <pack_message+0x308>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4a43      	ldr	r2, [pc, #268]	@ (80014ac <pack_message+0x30c>)
 80013a0:	331a      	adds	r3, #26
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	4b3f      	ldr	r3, [pc, #252]	@ (80014a8 <pack_message+0x308>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <pack_message+0x338>)
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c2:	4b40      	ldr	r3, [pc, #256]	@ (80014c4 <pack_message+0x324>)
 80013c4:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.hip_p[CAN],state.hip_p[CAN], HIP_LIM_P, HIP_LIM_N))
 80013c8:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <pack_message+0x308>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3302      	adds	r3, #2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4a36      	ldr	r2, [pc, #216]	@ (80014ac <pack_message+0x30c>)
 80013d2:	441a      	add	r2, r3
 80013d4:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <pack_message+0x308>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	493b      	ldr	r1, [pc, #236]	@ (80014c8 <pack_message+0x328>)
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 80014dc <pack_message+0x33c>
 80013e8:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80014e0 <pack_message+0x340>
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	4610      	mov	r0, r2
 80013f2:	f000 fb7f 	bl	8001af4 <softstop_joint>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d021      	beq.n	8001440 <pack_message+0x2a0>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b10;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <pack_message+0x308>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4a31      	ldr	r2, [pc, #196]	@ (80014c8 <pack_message+0x328>)
 8001402:	330c      	adds	r3, #12
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <pack_message+0x308>)
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	4610      	mov	r0, r2
 800140e:	f043 0202 	orr.w	r2, r3, #2
 8001412:	492d      	ldr	r1, [pc, #180]	@ (80014c8 <pack_message+0x328>)
 8001414:	f100 030c 	add.w	r3, r0, #12
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = p_in * hip_mitdirection[CAN]; // Direction update
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <pack_message+0x308>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <pack_message+0x338>)
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <pack_message+0x314>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <pack_message+0x314>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
//			t_in = t_in * hip_mitdirection[CAN]; // Direction update
		}

		// Safety Limit
		safetycheck_reqTrq(state.hip_p[CAN], state.hip_v[CAN], torque.hip_t[CAN]);
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <pack_message+0x308>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4a20      	ldr	r2, [pc, #128]	@ (80014c8 <pack_message+0x328>)
 8001446:	3302      	adds	r3, #2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <pack_message+0x308>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <pack_message+0x328>)
 8001456:	3308      	adds	r3, #8
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	ed93 7a00 	vldr	s14, [r3]
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <pack_message+0x308>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <pack_message+0x334>)
 8001466:	3302      	adds	r3, #2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	edd3 6a00 	vldr	s13, [r3]
 8001470:	eeb0 1a66 	vmov.f32	s2, s13
 8001474:	eef0 0a47 	vmov.f32	s1, s14
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	f000 fb6c 	bl	8001b58 <safetycheck_reqTrq>
	}
	if(ID == Knee_CANID)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b03      	cmp	r3, #3
 8001484:	f040 80e5 	bne.w	8001652 <pack_message+0x4b2>
	{
		p_in 	= (control.knee_p[CAN] * knee_mitdirection[CAN]) * KNEE_GEARRATIO;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <pack_message+0x308>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <pack_message+0x30c>)
 800148e:	3304      	adds	r3, #4
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <pack_message+0x308>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <pack_message+0x344>)
 80014a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a4:	e020      	b.n	80014e8 <pack_message+0x348>
 80014a6:	bf00      	nop
 80014a8:	20000098 	.word	0x20000098
 80014ac:	20000350 	.word	0x20000350
 80014b0:	080074ec 	.word	0x080074ec
 80014b4:	20000548 	.word	0x20000548
 80014b8:	2000054c 	.word	0x2000054c
 80014bc:	20000004 	.word	0x20000004
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000550 	.word	0x20000550
 80014c8:	200003d4 	.word	0x200003d4
 80014cc:	bfc90ff9 	.word	0xbfc90ff9
 80014d0:	3fc90ff9 	.word	0x3fc90ff9
 80014d4:	20000410 	.word	0x20000410
 80014d8:	080074f4 	.word	0x080074f4
 80014dc:	c0060aa6 	.word	0xc0060aa6
 80014e0:	40060aa6 	.word	0x40060aa6
 80014e4:	080074fc 	.word	0x080074fc
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	4bc2      	ldr	r3, [pc, #776]	@ (8001808 <pack_message+0x668>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
		v_in 	= (control.knee_v[CAN] * knee_mitdirection[CAN]) / KNEE_GEARRATIO;
 8001502:	4bc2      	ldr	r3, [pc, #776]	@ (800180c <pack_message+0x66c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4ac2      	ldr	r2, [pc, #776]	@ (8001810 <pack_message+0x670>)
 8001508:	330a      	adds	r3, #10
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	4bbe      	ldr	r3, [pc, #760]	@ (800180c <pack_message+0x66c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	4bbe      	ldr	r3, [pc, #760]	@ (8001814 <pack_message+0x674>)
 800151a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800152e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001532:	4bb9      	ldr	r3, [pc, #740]	@ (8001818 <pack_message+0x678>)
 8001534:	edc3 7a00 	vstr	s15, [r3]
		kp_in 	=  control.knee_kp[CAN];   //stifness
 8001538:	4bb4      	ldr	r3, [pc, #720]	@ (800180c <pack_message+0x66c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4ab4      	ldr	r2, [pc, #720]	@ (8001810 <pack_message+0x670>)
 800153e:	3310      	adds	r3, #16
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4ab5      	ldr	r2, [pc, #724]	@ (800181c <pack_message+0x67c>)
 8001548:	6013      	str	r3, [r2, #0]
		kd_in	=  control.knee_kd[CAN];     //damper
 800154a:	4bb0      	ldr	r3, [pc, #704]	@ (800180c <pack_message+0x66c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4ab0      	ldr	r2, [pc, #704]	@ (8001810 <pack_message+0x670>)
 8001550:	3316      	adds	r3, #22
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4ab1      	ldr	r2, [pc, #708]	@ (8001820 <pack_message+0x680>)
 800155a:	6013      	str	r3, [r2, #0]
		t_in 	= (control.knee_t[CAN] * knee_mitdirection[CAN]) * KNEE_GEARRATIO;
 800155c:	4bab      	ldr	r3, [pc, #684]	@ (800180c <pack_message+0x66c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4aab      	ldr	r2, [pc, #684]	@ (8001810 <pack_message+0x670>)
 8001562:	331c      	adds	r3, #28
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	4ba7      	ldr	r3, [pc, #668]	@ (800180c <pack_message+0x66c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4ba8      	ldr	r3, [pc, #672]	@ (8001814 <pack_message+0x674>)
 8001574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	4ba5      	ldr	r3, [pc, #660]	@ (8001824 <pack_message+0x684>)
 800158e:	edc3 7a00 	vstr	s15, [r3]

		if(softstop_joint(&control.knee_p[CAN], state.knee_p[CAN], KNEE_LIM_P, KNEE_LIM_N))
 8001592:	4b9e      	ldr	r3, [pc, #632]	@ (800180c <pack_message+0x66c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3304      	adds	r3, #4
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4a9d      	ldr	r2, [pc, #628]	@ (8001810 <pack_message+0x670>)
 800159c:	441a      	add	r2, r3
 800159e:	4b9b      	ldr	r3, [pc, #620]	@ (800180c <pack_message+0x66c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	49a1      	ldr	r1, [pc, #644]	@ (8001828 <pack_message+0x688>)
 80015a4:	3304      	adds	r3, #4
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 800182c <pack_message+0x68c>
 80015b2:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8001830 <pack_message+0x690>
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	4610      	mov	r0, r2
 80015bc:	f000 fa9a 	bl	8001af4 <softstop_joint>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d025      	beq.n	8001612 <pack_message+0x472>
		{	//Incase of wrong request
			state.flags[CAN] |= 0b11;
 80015c6:	4b91      	ldr	r3, [pc, #580]	@ (800180c <pack_message+0x66c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4a97      	ldr	r2, [pc, #604]	@ (8001828 <pack_message+0x688>)
 80015cc:	330c      	adds	r3, #12
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	4a8e      	ldr	r2, [pc, #568]	@ (800180c <pack_message+0x66c>)
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	4610      	mov	r0, r2
 80015d8:	f043 0203 	orr.w	r2, r3, #3
 80015dc:	4992      	ldr	r1, [pc, #584]	@ (8001828 <pack_message+0x688>)
 80015de:	f100 030c 	add.w	r3, r0, #12
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = (p_in * knee_mitdirection[CAN]) * KNEE_GEARRATIO; // Direction update
 80015e6:	4b89      	ldr	r3, [pc, #548]	@ (800180c <pack_message+0x66c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b89      	ldr	r3, [pc, #548]	@ (8001814 <pack_message+0x674>)
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fa:	4b83      	ldr	r3, [pc, #524]	@ (8001808 <pack_message+0x668>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160c:	4b7e      	ldr	r3, [pc, #504]	@ (8001808 <pack_message+0x668>)
 800160e:	edc3 7a00 	vstr	s15, [r3]
//			t_in = (t_in * knee_mitdirection[CAN]) * KNEE_GEARRATIO; // Direction update
		}

		// Safety Limit
		safetycheck_reqTrq(state.knee_p[CAN], state.knee_v[CAN], torque.knee_t[CAN]);
 8001612:	4b7e      	ldr	r3, [pc, #504]	@ (800180c <pack_message+0x66c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4a84      	ldr	r2, [pc, #528]	@ (8001828 <pack_message+0x688>)
 8001618:	3304      	adds	r3, #4
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	4b7a      	ldr	r3, [pc, #488]	@ (800180c <pack_message+0x66c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4a80      	ldr	r2, [pc, #512]	@ (8001828 <pack_message+0x688>)
 8001628:	330a      	adds	r3, #10
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	4b76      	ldr	r3, [pc, #472]	@ (800180c <pack_message+0x66c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4a7f      	ldr	r2, [pc, #508]	@ (8001834 <pack_message+0x694>)
 8001638:	3304      	adds	r3, #4
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	edd3 6a00 	vldr	s13, [r3]
 8001642:	eeb0 1a66 	vmov.f32	s2, s13
 8001646:	eef0 0a47 	vmov.f32	s1, s14
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	f000 fa83 	bl	8001b58 <safetycheck_reqTrq>
	}

	Header->StdId = ID;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	601a      	str	r2, [r3, #0]

    /// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, p_in), P_MAX);
 8001658:	4b6b      	ldr	r3, [pc, #428]	@ (8001808 <pack_message+0x668>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	f005 fe95 	bl	8007394 <fmaxf>
 800166a:	eef0 7a40 	vmov.f32	s15, s0
 800166e:	eef2 0a09 	vmov.f32	s1, #41	@ 0x41480000  12.5
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	f005 feaa 	bl	80073ce <fminf>
 800167a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	float v_des = fminf(fmaxf(V_MIN, v_in), V_MAX);
 800167e:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <pack_message+0x678>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eefb 0a0a 	vmov.f32	s1, #186	@ 0xc1d00000 -26.0
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	f005 fe82 	bl	8007394 <fmaxf>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	eef3 0a0a 	vmov.f32	s1, #58	@ 0x41d00000  26.0
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	f005 fe97 	bl	80073ce <fminf>
 80016a0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float kp = fminf(fmaxf(KP_MIN, kp_in), KP_MAX);
 80016a4:	4b5d      	ldr	r3, [pc, #372]	@ (800181c <pack_message+0x67c>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8001838 <pack_message+0x698>
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	f005 fe6f 	bl	8007394 <fmaxf>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
 80016ba:	eddf 0a60 	vldr	s1, [pc, #384]	@ 800183c <pack_message+0x69c>
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	f005 fe84 	bl	80073ce <fminf>
 80016c6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float kd = fminf(fmaxf(KD_MIN, kd_in), KD_MAX);
 80016ca:	4b55      	ldr	r3, [pc, #340]	@ (8001820 <pack_message+0x680>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8001838 <pack_message+0x698>
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	f005 fe5c 	bl	8007394 <fmaxf>
 80016dc:	eef0 7a40 	vmov.f32	s15, s0
 80016e0:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	f005 fe71 	bl	80073ce <fminf>
 80016ec:	ed87 0a08 	vstr	s0, [r7, #32]
	float t_ff = fminf(fmaxf(T_MIN, t_in), T_MAX);
 80016f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001824 <pack_message+0x684>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	f005 fe49 	bl	8007394 <fmaxf>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	f005 fe5e 	bl	80073ce <fminf>
 8001712:	ed87 0a07 	vstr	s0, [r7, #28]

    /// convert floats to unsigned ints ///
    uint16_t p_int = float_to_uint(p_des, MOTOR_P_MIN, MOTOR_P_MAX, 16);
 8001716:	2010      	movs	r0, #16
 8001718:	eeb2 1a09 	vmov.f32	s2, #41	@ 0x41480000  12.5
 800171c:	eefa 0a09 	vmov.f32	s1, #169	@ 0xc1480000 -12.5
 8001720:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001724:	f000 fb18 	bl	8001d58 <float_to_uint>
 8001728:	4603      	mov	r3, r0
 800172a:	837b      	strh	r3, [r7, #26]
    uint16_t v_int = float_to_uint(v_des, MOTOR_V_MIN, MOTOR_V_MAX, 12);
 800172c:	200c      	movs	r0, #12
 800172e:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 8001840 <pack_message+0x6a0>
 8001732:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001844 <pack_message+0x6a4>
 8001736:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800173a:	f000 fb0d 	bl	8001d58 <float_to_uint>
 800173e:	4603      	mov	r3, r0
 8001740:	833b      	strh	r3, [r7, #24]
    uint16_t kp_int = float_to_uint(kp, MOTOR_KP_MIN, MOTOR_KP_MAX, 12);
 8001742:	200c      	movs	r0, #12
 8001744:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 800183c <pack_message+0x69c>
 8001748:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8001838 <pack_message+0x698>
 800174c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001750:	f000 fb02 	bl	8001d58 <float_to_uint>
 8001754:	4603      	mov	r3, r0
 8001756:	82fb      	strh	r3, [r7, #22]
    uint16_t kd_int = float_to_uint(kd, MOTOR_KD_MIN, MOTOR_KD_MAX, 12);
 8001758:	200c      	movs	r0, #12
 800175a:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800175e:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8001838 <pack_message+0x698>
 8001762:	ed97 0a08 	vldr	s0, [r7, #32]
 8001766:	f000 faf7 	bl	8001d58 <float_to_uint>
 800176a:	4603      	mov	r3, r0
 800176c:	82bb      	strh	r3, [r7, #20]
    uint16_t t_int = float_to_uint(t_ff, MOTOR_T_MIN, MOTOR_T_MAX, 12);
 800176e:	200c      	movs	r0, #12
 8001770:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8001848 <pack_message+0x6a8>
 8001774:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800184c <pack_message+0x6ac>
 8001778:	ed97 0a07 	vldr	s0, [r7, #28]
 800177c:	f000 faec 	bl	8001d58 <float_to_uint>
 8001780:	4603      	mov	r3, r0
 8001782:	827b      	strh	r3, [r7, #18]

    /// pack ints into the can buffer ///
    Data[0] = p_int>>8;
 8001784:	8b7b      	ldrh	r3, [r7, #26]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	701a      	strb	r2, [r3, #0]
    Data[1] = p_int&0xFF;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	8b7a      	ldrh	r2, [r7, #26]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
    Data[2] = v_int>>4;
 800179a:	8b3b      	ldrh	r3, [r7, #24]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3302      	adds	r3, #2
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	701a      	strb	r2, [r3, #0]
    Data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80017a8:	8b3b      	ldrh	r3, [r7, #24]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	b25a      	sxtb	r2, r3
 80017ae:	8afb      	ldrh	r3, [r7, #22]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3303      	adds	r3, #3
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]
    Data[4] = kp_int&0xFF;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3304      	adds	r3, #4
 80017c6:	8afa      	ldrh	r2, [r7, #22]
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
    Data[5] = kd_int>>4;
 80017cc:	8abb      	ldrh	r3, [r7, #20]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3305      	adds	r3, #5
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]
    Data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80017da:	8abb      	ldrh	r3, [r7, #20]
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	8a7b      	ldrh	r3, [r7, #18]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25a      	sxtb	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3306      	adds	r3, #6
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	701a      	strb	r2, [r3, #0]
    Data[7] = t_int&0xff;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3307      	adds	r3, #7
 80017f8:	8a7a      	ldrh	r2, [r7, #18]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

}
 80017fe:	bf00      	nop
 8001800:	3730      	adds	r7, #48	@ 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000548 	.word	0x20000548
 800180c:	20000098 	.word	0x20000098
 8001810:	20000350 	.word	0x20000350
 8001814:	080074fc 	.word	0x080074fc
 8001818:	2000054c 	.word	0x2000054c
 800181c:	20000004 	.word	0x20000004
 8001820:	20000008 	.word	0x20000008
 8001824:	20000550 	.word	0x20000550
 8001828:	200003d4 	.word	0x200003d4
 800182c:	bdcccccd 	.word	0xbdcccccd
 8001830:	408074d1 	.word	0x408074d1
 8001834:	20000410 	.word	0x20000410
 8001838:	00000000 	.word	0x00000000
 800183c:	43fa0000 	.word	0x43fa0000
 8001840:	42480000 	.word	0x42480000
 8001844:	c2480000 	.word	0xc2480000
 8001848:	42820000 	.word	0x42820000
 800184c:	c2820000 	.word	0xc2820000

08001850 <unpack_replay>:


void unpack_replay(uint8_t*Data){
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	/// unpack ints from can buffer ///

	uint16_t id = Data[0];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	81fb      	strh	r3, [r7, #14]
	uint16_t p_int = (Data[1]<<8)|Data[2];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3301      	adds	r3, #1
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21a      	sxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3302      	adds	r3, #2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b21b      	sxth	r3, r3
 8001874:	81bb      	strh	r3, [r7, #12]
	uint16_t v_int = (Data[3]<<4)|(Data[4]>>4);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3303      	adds	r3, #3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	b21a      	sxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	b2db      	uxtb	r3, r3
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21b      	sxth	r3, r3
 8001890:	817b      	strh	r3, [r7, #10]
	uint16_t i_int = ((Data[4]&0xF)<<8)|Data[5];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3304      	adds	r3, #4
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21b      	sxth	r3, r3
 800189c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3305      	adds	r3, #5
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	813b      	strh	r3, [r7, #8]
	/// convert uints to floats ///
	p_out = uint_to_float(p_int, MOTOR_P_MIN, MOTOR_P_MAX, 16);
 80018b0:	89bb      	ldrh	r3, [r7, #12]
 80018b2:	2110      	movs	r1, #16
 80018b4:	eef2 0a09 	vmov.f32	s1, #41	@ 0x41480000  12.5
 80018b8:	eeba 0a09 	vmov.f32	s0, #169	@ 0xc1480000 -12.5
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fa7e 	bl	8001dbe <uint_to_float>
 80018c2:	eef0 7a40 	vmov.f32	s15, s0
 80018c6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac0 <unpack_replay+0x270>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
	v_out = uint_to_float(v_int, MOTOR_V_MIN, MOTOR_V_MAX, 12);
 80018cc:	897b      	ldrh	r3, [r7, #10]
 80018ce:	210c      	movs	r1, #12
 80018d0:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8001ac4 <unpack_replay+0x274>
 80018d4:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8001ac8 <unpack_replay+0x278>
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fa70 	bl	8001dbe <uint_to_float>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	4b7a      	ldr	r3, [pc, #488]	@ (8001acc <unpack_replay+0x27c>)
 80018e4:	edc3 7a00 	vstr	s15, [r3]
	t_out = uint_to_float(i_int, MOTOR_T_MIN, MOTOR_T_MAX, 12);
 80018e8:	893b      	ldrh	r3, [r7, #8]
 80018ea:	210c      	movs	r1, #12
 80018ec:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8001ad0 <unpack_replay+0x280>
 80018f0:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8001ad4 <unpack_replay+0x284>
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fa62 	bl	8001dbe <uint_to_float>
 80018fa:	eef0 7a40 	vmov.f32	s15, s0
 80018fe:	4b76      	ldr	r3, [pc, #472]	@ (8001ad8 <unpack_replay+0x288>)
 8001900:	edc3 7a00 	vstr	s15, [r3]

	if(id == Abad_CANID)
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d13f      	bne.n	800198a <unpack_replay+0x13a>
	{
		state.ab_p[receivedCanBus]=  (p_out * ab_mitdirection[receivedCanBus]);
 800190a:	4b74      	ldr	r3, [pc, #464]	@ (8001adc <unpack_replay+0x28c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a74      	ldr	r2, [pc, #464]	@ (8001ae0 <unpack_replay+0x290>)
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191c:	4b68      	ldr	r3, [pc, #416]	@ (8001ac0 <unpack_replay+0x270>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	4b6e      	ldr	r3, [pc, #440]	@ (8001adc <unpack_replay+0x28c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <unpack_replay+0x294>)
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	edc3 7a00 	vstr	s15, [r3]
		state.ab_v[receivedCanBus]=  (v_out * ab_mitdirection[receivedCanBus]);
 8001934:	4b69      	ldr	r3, [pc, #420]	@ (8001adc <unpack_replay+0x28c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a69      	ldr	r2, [pc, #420]	@ (8001ae0 <unpack_replay+0x290>)
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001946:	4b61      	ldr	r3, [pc, #388]	@ (8001acc <unpack_replay+0x27c>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <unpack_replay+0x28c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001954:	4a63      	ldr	r2, [pc, #396]	@ (8001ae4 <unpack_replay+0x294>)
 8001956:	3306      	adds	r3, #6
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	edc3 7a00 	vstr	s15, [r3]
		torque.ab_t[receivedCanBus]= (t_out * ab_mitdirection[receivedCanBus]);
 8001960:	4b5e      	ldr	r3, [pc, #376]	@ (8001adc <unpack_replay+0x28c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5e      	ldr	r2, [pc, #376]	@ (8001ae0 <unpack_replay+0x290>)
 8001966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001972:	4b59      	ldr	r3, [pc, #356]	@ (8001ad8 <unpack_replay+0x288>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <unpack_replay+0x28c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	4a59      	ldr	r2, [pc, #356]	@ (8001ae8 <unpack_replay+0x298>)
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	edc3 7a00 	vstr	s15, [r3]
	}
	if(id == Hip_CANID)
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d141      	bne.n	8001a14 <unpack_replay+0x1c4>
	{
		state.hip_p[receivedCanBus]=  (p_out * hip_mitdirection[receivedCanBus]);
 8001990:	4b52      	ldr	r3, [pc, #328]	@ (8001adc <unpack_replay+0x28c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a55      	ldr	r2, [pc, #340]	@ (8001aec <unpack_replay+0x29c>)
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <unpack_replay+0x270>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	4b4c      	ldr	r3, [pc, #304]	@ (8001adc <unpack_replay+0x28c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae4 <unpack_replay+0x294>)
 80019b2:	3302      	adds	r3, #2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	edc3 7a00 	vstr	s15, [r3]
		state.hip_v[receivedCanBus]=  (v_out * hip_mitdirection[receivedCanBus]);
 80019bc:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <unpack_replay+0x28c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a4a      	ldr	r2, [pc, #296]	@ (8001aec <unpack_replay+0x29c>)
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ce:	4b3f      	ldr	r3, [pc, #252]	@ (8001acc <unpack_replay+0x27c>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <unpack_replay+0x28c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019dc:	4a41      	ldr	r2, [pc, #260]	@ (8001ae4 <unpack_replay+0x294>)
 80019de:	3308      	adds	r3, #8
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	edc3 7a00 	vstr	s15, [r3]
		torque.hip_t[receivedCanBus]= (t_out * hip_mitdirection[receivedCanBus]);
 80019e8:	4b3c      	ldr	r3, [pc, #240]	@ (8001adc <unpack_replay+0x28c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a3f      	ldr	r2, [pc, #252]	@ (8001aec <unpack_replay+0x29c>)
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <unpack_replay+0x288>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <unpack_replay+0x28c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	4a37      	ldr	r2, [pc, #220]	@ (8001ae8 <unpack_replay+0x298>)
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	edc3 7a00 	vstr	s15, [r3]
	}
	if(id == Knee_CANID)
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d14d      	bne.n	8001ab6 <unpack_replay+0x266>
	{
		state.knee_p[receivedCanBus]=  (p_out * knee_mitdirection[receivedCanBus])/ KNEE_GEARRATIO;
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <unpack_replay+0x28c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a34      	ldr	r2, [pc, #208]	@ (8001af0 <unpack_replay+0x2a0>)
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <unpack_replay+0x270>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a36:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <unpack_replay+0x28c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8001a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a42:	4a28      	ldr	r2, [pc, #160]	@ (8001ae4 <unpack_replay+0x294>)
 8001a44:	3304      	adds	r3, #4
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
		state.knee_v[receivedCanBus]=  (v_out * knee_mitdirection[receivedCanBus])* KNEE_GEARRATIO;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <unpack_replay+0x28c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a27      	ldr	r2, [pc, #156]	@ (8001af0 <unpack_replay+0x2a0>)
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <unpack_replay+0x27c>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <unpack_replay+0x28c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <unpack_replay+0x294>)
 8001a78:	330a      	adds	r3, #10
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
		torque.knee_t[receivedCanBus]= (t_out * knee_mitdirection[receivedCanBus])/ KNEE_GEARRATIO;
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <unpack_replay+0x28c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1a      	ldr	r2, [pc, #104]	@ (8001af0 <unpack_replay+0x2a0>)
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <unpack_replay+0x288>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <unpack_replay+0x28c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8001aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <unpack_replay+0x298>)
 8001aac:	3304      	adds	r3, #4
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000554 	.word	0x20000554
 8001ac4:	42480000 	.word	0x42480000
 8001ac8:	c2480000 	.word	0xc2480000
 8001acc:	20000558 	.word	0x20000558
 8001ad0:	42820000 	.word	0x42820000
 8001ad4:	c2820000 	.word	0xc2820000
 8001ad8:	2000055c 	.word	0x2000055c
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	080074ec 	.word	0x080074ec
 8001ae4:	200003d4 	.word	0x200003d4
 8001ae8:	20000410 	.word	0x20000410
 8001aec:	080074f4 	.word	0x080074f4
 8001af0:	080074fc 	.word	0x080074fc

08001af4 <softstop_joint>:

////////////////////////softstop//////////////////////////////////
//actuator only can move to a limit position

int softstop_joint(float *control,float state, float limit_p, float limit_n)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b00:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b04:	ed87 1a00 	vstr	s2, [r7]
	if(*control>limit_p)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d504      	bpl.n	8001b26 <softstop_joint+0x32>
	{
		//*control = limit_p;
		p_in = limit_p;
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <softstop_joint+0x60>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
//		v_in = 0.0f;
//		kp_in = 0.0f;
//		kd_in = KD_SOFTSTOP;
//		t_in += KP_SOFTSTOP*(limit_p - state);
		return 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <softstop_joint+0x52>
	}
	if(*control<limit_n)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ed97 7a00 	vldr	s14, [r7]
 8001b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	dd04      	ble.n	8001b44 <softstop_joint+0x50>
	{
		//*control = limit_n;
		p_in = limit_n;
 8001b3a:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <softstop_joint+0x60>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6013      	str	r3, [r2, #0]
//		v_in = 0.0f;
//		kp_in = 0.0f;
//		kd_in = KD_SOFTSTOP;
//		t_in += KP_SOFTSTOP*(limit_n - state);
		return 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <softstop_joint+0x52>
	}

  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000548 	.word	0x20000548

08001b58 <safetycheck_reqTrq>:


////////////////////////safetycheck_reqTrq//////////////////////////////////
//To add additional check on the torque requested to the motor. Calculated based on the PID model of motor.
void safetycheck_reqTrq(float p_act, float v_act, float t_ff)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b62:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b66:	ed87 1a01 	vstr	s2, [r7, #4]
			 //𝜏 = 𝜏ff   + 𝐾𝑝(𝑞des − 𝑞) + 𝐾𝑑(𝑞_des − 𝑞_) (2.2) Software and Control Design for the MIT Cheetah Quadruped Robots by Jared Di Carlo
	float trqreq = t_in + kp_in*(p_in - p_act) + kd_in*(v_in - v_act);
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c24 <safetycheck_reqTrq+0xcc>)
 8001b6c:	ed93 7a00 	vldr	s14, [r3]
 8001b70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <safetycheck_reqTrq+0xd0>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <safetycheck_reqTrq+0xd4>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8c:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <safetycheck_reqTrq+0xd8>)
 8001b8e:	edd3 6a00 	vldr	s13, [r3]
 8001b92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b9a:	4b26      	ldr	r3, [pc, #152]	@ (8001c34 <safetycheck_reqTrq+0xdc>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba8:	edc7 7a05 	vstr	s15, [r7, #20]

	// Incase the Trq to be calculated at the motor is too high, cancel the req by setting Kp, Kd to zero
	if (trqreq >= TRQ_REQ_MAX || trqreq <= -TRQ_REQ_MAX)
 8001bac:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	da08      	bge.n	8001bd0 <safetycheck_reqTrq+0x78>
 8001bbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bc2:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	d807      	bhi.n	8001be0 <safetycheck_reqTrq+0x88>
	{
		//Only reset kp, kd. Let other signals remain same. Trq will be limited in the next check
		kp_in = 0.0f;
 8001bd0:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <safetycheck_reqTrq+0xd0>)
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
		kd_in = 0.0f;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <safetycheck_reqTrq+0xdc>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
	} 

	// Limit `t_in` to max/min allowed torque
	if (t_in > TRQ_REQ_MAX)
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <safetycheck_reqTrq+0xd4>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	dd03      	ble.n	8001bfc <safetycheck_reqTrq+0xa4>
	{
		t_in = TRQ_REQ_MAX;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <safetycheck_reqTrq+0xd4>)
 8001bf6:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <safetycheck_reqTrq+0xe0>)
 8001bf8:	601a      	str	r2, [r3, #0]
	} else if (t_in < -TRQ_REQ_MAX)
	{
		t_in = -TRQ_REQ_MAX;
	}
}
 8001bfa:	e00d      	b.n	8001c18 <safetycheck_reqTrq+0xc0>
	} else if (t_in < -TRQ_REQ_MAX)
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <safetycheck_reqTrq+0xd4>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d400      	bmi.n	8001c12 <safetycheck_reqTrq+0xba>
}
 8001c10:	e002      	b.n	8001c18 <safetycheck_reqTrq+0xc0>
		t_in = -TRQ_REQ_MAX;
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <safetycheck_reqTrq+0xd4>)
 8001c14:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <safetycheck_reqTrq+0xe4>)
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	20000548 	.word	0x20000548
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	20000550 	.word	0x20000550
 8001c30:	2000054c 	.word	0x2000054c
 8001c34:	20000008 	.word	0x20000008
 8001c38:	40400000 	.word	0x40400000
 8001c3c:	c0400000 	.word	0xc0400000

08001c40 <motor_mode>:
									 *  		M O T O R    M O D E S
									 ***************************************************/


//Start motor
void motor_mode(uint8_t ID,CAN_TxHeaderTypeDef*Header,uint8_t*Data){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	601a      	str	r2, [r3, #0]
	Data[0] = 0xFF;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	22ff      	movs	r2, #255	@ 0xff
 8001c58:	701a      	strb	r2, [r3, #0]
	Data[1] = 0xFF;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	22ff      	movs	r2, #255	@ 0xff
 8001c60:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xFF;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3302      	adds	r3, #2
 8001c66:	22ff      	movs	r2, #255	@ 0xff
 8001c68:	701a      	strb	r2, [r3, #0]
	Data[3] = 0xFF;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3303      	adds	r3, #3
 8001c6e:	22ff      	movs	r2, #255	@ 0xff
 8001c70:	701a      	strb	r2, [r3, #0]
	Data[4] = 0xFF;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	22ff      	movs	r2, #255	@ 0xff
 8001c78:	701a      	strb	r2, [r3, #0]
	Data[5] = 0xFF;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3305      	adds	r3, #5
 8001c7e:	22ff      	movs	r2, #255	@ 0xff
 8001c80:	701a      	strb	r2, [r3, #0]
	Data[6] = 0xFF;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3306      	adds	r3, #6
 8001c86:	22ff      	movs	r2, #255	@ 0xff
 8001c88:	701a      	strb	r2, [r3, #0]
	Data[7] = 0xFC;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	22fc      	movs	r2, #252	@ 0xfc
 8001c90:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <motor_mode+0x7c>)
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	490a      	ldr	r1, [pc, #40]	@ (8001cc0 <motor_mode+0x80>)
 8001c98:	480a      	ldr	r0, [pc, #40]	@ (8001cc4 <motor_mode+0x84>)
 8001c9a:	f001 fb7e 	bl	800339a <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <motor_mode+0x7c>)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4907      	ldr	r1, [pc, #28]	@ (8001cc0 <motor_mode+0x80>)
 8001ca4:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <motor_mode+0x88>)
 8001ca6:	f001 fb78 	bl	800339a <HAL_CAN_AddTxMessage>
	delay_us(300);
 8001caa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001cae:	f000 f8b9 	bl	8001e24 <delay_us>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000120 	.word	0x20000120
 8001cc0:	200000ec 	.word	0x200000ec
 8001cc4:	2000009c 	.word	0x2000009c
 8001cc8:	200000c4 	.word	0x200000c4

08001ccc <exit_mode>:

//stop motor
void exit_mode(uint8_t ID,CAN_TxHeaderTypeDef*Header,uint8_t*Data){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	601a      	str	r2, [r3, #0]
	Data[0] = 0xFF;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	22ff      	movs	r2, #255	@ 0xff
 8001ce4:	701a      	strb	r2, [r3, #0]
	Data[1] = 0xFF;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	22ff      	movs	r2, #255	@ 0xff
 8001cec:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xFF;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	22ff      	movs	r2, #255	@ 0xff
 8001cf4:	701a      	strb	r2, [r3, #0]
	Data[3] = 0xFF;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	22ff      	movs	r2, #255	@ 0xff
 8001cfc:	701a      	strb	r2, [r3, #0]
	Data[4] = 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	22ff      	movs	r2, #255	@ 0xff
 8001d04:	701a      	strb	r2, [r3, #0]
	Data[5] = 0xFF;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3305      	adds	r3, #5
 8001d0a:	22ff      	movs	r2, #255	@ 0xff
 8001d0c:	701a      	strb	r2, [r3, #0]
	Data[6] = 0xFF;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3306      	adds	r3, #6
 8001d12:	22ff      	movs	r2, #255	@ 0xff
 8001d14:	701a      	strb	r2, [r3, #0]
	Data[7] = 0xFD;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3307      	adds	r3, #7
 8001d1a:	22fd      	movs	r2, #253	@ 0xfd
 8001d1c:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <exit_mode+0x7c>)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	490a      	ldr	r1, [pc, #40]	@ (8001d4c <exit_mode+0x80>)
 8001d24:	480a      	ldr	r0, [pc, #40]	@ (8001d50 <exit_mode+0x84>)
 8001d26:	f001 fb38 	bl	800339a <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <exit_mode+0x7c>)
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4907      	ldr	r1, [pc, #28]	@ (8001d4c <exit_mode+0x80>)
 8001d30:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <exit_mode+0x88>)
 8001d32:	f001 fb32 	bl	800339a <HAL_CAN_AddTxMessage>
	delay_us(300);
 8001d36:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d3a:	f000 f873 	bl	8001e24 <delay_us>
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000120 	.word	0x20000120
 8001d4c:	200000ec 	.word	0x200000ec
 8001d50:	2000009c 	.word	0x2000009c
 8001d54:	200000c4 	.word	0x200000c4

08001d58 <float_to_uint>:
									 ***************************************************/


//math
int float_to_uint(float x, float x_min, float x_max, int bits)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d62:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d66:	ed87 1a01 	vstr	s2, [r7, #4]
 8001d6a:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8001d6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8001d80:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001da2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dae:	ee17 3a90 	vmov	r3, s15
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <uint_to_float>:

float uint_to_float(int x_int, float x_min, float x_max, int bits)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dca:	edc7 0a01 	vstr	s1, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8001dd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ddc:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001df6:	2201      	movs	r2, #1
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <delay_us>:

//delay
void delay_us (uint16_t us)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <delay_us+0x30>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8001e36:	bf00      	nop
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <delay_us+0x30>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d8f8      	bhi.n	8001e38 <delay_us+0x14>
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	2000023c 	.word	0x2000023c

08001e58 <xor_checksum>:

//spi checksum
uint32_t xor_checksum(uint32_t* data, int len)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    uint32_t t = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	e00a      	b.n	8001e82 <xor_checksum+0x2a>
        t = t ^ data[i];
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4053      	eors	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbf0      	blt.n	8001e6c <xor_checksum+0x14>
    return t;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <encode_floats>:
/*
 * This funciton encodes the torque value into high 30 bits of a 32bit variable.
 * This is used to encode torque into flag for logging it in UP
 */
uint32_t encode_floats(float a, float b, float c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ea2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ea6:	ed87 1a01 	vstr	s2, [r7, #4]
    uint32_t encoded = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]

    // Clamp each value to the range [-70, 70] using conditional statements
    if (a < -70.0f) a = -70.0f;
 8001eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb2:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002038 <encode_floats+0x1a0>
 8001eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	d501      	bpl.n	8001ec4 <encode_floats+0x2c>
 8001ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800203c <encode_floats+0x1a4>)
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (a > 70.0f) a = 70.0f;
 8001ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ec8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8002040 <encode_floats+0x1a8>
 8001ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed4:	dd01      	ble.n	8001eda <encode_floats+0x42>
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8002044 <encode_floats+0x1ac>)
 8001ed8:	60fb      	str	r3, [r7, #12]

    if (b < -70.0f) b = -70.0f;
 8001eda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ede:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002038 <encode_floats+0x1a0>
 8001ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	d501      	bpl.n	8001ef0 <encode_floats+0x58>
 8001eec:	4b53      	ldr	r3, [pc, #332]	@ (800203c <encode_floats+0x1a4>)
 8001eee:	60bb      	str	r3, [r7, #8]
    if (b > 70.0f) b = 70.0f;
 8001ef0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8002040 <encode_floats+0x1a8>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	dd01      	ble.n	8001f06 <encode_floats+0x6e>
 8001f02:	4b50      	ldr	r3, [pc, #320]	@ (8002044 <encode_floats+0x1ac>)
 8001f04:	60bb      	str	r3, [r7, #8]

    if (c < -70.0f) c = -70.0f;
 8001f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f0a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002038 <encode_floats+0x1a0>
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d501      	bpl.n	8001f1c <encode_floats+0x84>
 8001f18:	4b48      	ldr	r3, [pc, #288]	@ (800203c <encode_floats+0x1a4>)
 8001f1a:	607b      	str	r3, [r7, #4]
    if (c > 70.0f) c = 70.0f;
 8001f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f20:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002040 <encode_floats+0x1a8>
 8001f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2c:	dd01      	ble.n	8001f32 <encode_floats+0x9a>
 8001f2e:	4b45      	ldr	r3, [pc, #276]	@ (8002044 <encode_floats+0x1ac>)
 8001f30:	607b      	str	r3, [r7, #4]


    // Normalize and encode each float to 10 bits
    uint16_t a_enc = (uint16_t)round((a + 70) * (1023.0 / 140.0));
 8001f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f36:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002040 <encode_floats+0x1a8>
 8001f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f3e:	ee17 0a90 	vmov	r0, s15
 8001f42:	f7fe fbef 	bl	8000724 <__aeabi_f2d>
 8001f46:	a33a      	add	r3, pc, #232	@ (adr r3, 8002030 <encode_floats+0x198>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe f95c 	bl	8000208 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	ec43 2b17 	vmov	d7, r2, r3
 8001f58:	eeb0 0a47 	vmov.f32	s0, s14
 8001f5c:	eef0 0a67 	vmov.f32	s1, s15
 8001f60:	f005 fa6e 	bl	8007440 <round>
 8001f64:	ec53 2b10 	vmov	r2, r3, d0
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fc32 	bl	80007d4 <__aeabi_d2uiz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	837b      	strh	r3, [r7, #26]
    uint16_t b_enc = (uint16_t)round((b + 70) * (1023.0 / 140.0));
 8001f74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f78:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002040 <encode_floats+0x1a8>
 8001f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f80:	ee17 0a90 	vmov	r0, s15
 8001f84:	f7fe fbce 	bl	8000724 <__aeabi_f2d>
 8001f88:	a329      	add	r3, pc, #164	@ (adr r3, 8002030 <encode_floats+0x198>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe f93b 	bl	8000208 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	ec43 2b17 	vmov	d7, r2, r3
 8001f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9e:	eef0 0a67 	vmov.f32	s1, s15
 8001fa2:	f005 fa4d 	bl	8007440 <round>
 8001fa6:	ec53 2b10 	vmov	r2, r3, d0
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7fe fc11 	bl	80007d4 <__aeabi_d2uiz>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	833b      	strh	r3, [r7, #24]
    uint16_t c_enc = (uint16_t)round((c + 70) * (1023.0 / 140.0));
 8001fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fba:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002040 <encode_floats+0x1a8>
 8001fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc2:	ee17 0a90 	vmov	r0, s15
 8001fc6:	f7fe fbad 	bl	8000724 <__aeabi_f2d>
 8001fca:	a319      	add	r3, pc, #100	@ (adr r3, 8002030 <encode_floats+0x198>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe f91a 	bl	8000208 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	ec43 2b17 	vmov	d7, r2, r3
 8001fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe0:	eef0 0a67 	vmov.f32	s1, s15
 8001fe4:	f005 fa2c 	bl	8007440 <round>
 8001fe8:	ec53 2b10 	vmov	r2, r3, d0
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fbf0 	bl	80007d4 <__aeabi_d2uiz>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	82fb      	strh	r3, [r7, #22]

    // Pack into 32 bits, leaving the first 2 bits unused
    encoded |= (a_enc & 0x3FF) << 2;        // First 10 bits start at bit 2
 8001ff8:	8b7b      	ldrh	r3, [r7, #26]
 8001ffa:	009a      	lsls	r2, r3, #2
 8001ffc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002000:	4013      	ands	r3, r2
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	4313      	orrs	r3, r2
 8002006:	61fb      	str	r3, [r7, #28]
    encoded |= (b_enc & 0x3FF) << 12;       // Next 10 bits start at bit 12
 8002008:	8b3b      	ldrh	r3, [r7, #24]
 800200a:	031a      	lsls	r2, r3, #12
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <encode_floats+0x1b0>)
 800200e:	4013      	ands	r3, r2
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	4313      	orrs	r3, r2
 8002014:	61fb      	str	r3, [r7, #28]
    encoded |= (c_enc & 0x3FF) << 22;       // Last 10 bits start at bit 22
 8002016:	8afb      	ldrh	r3, [r7, #22]
 8002018:	059b      	lsls	r3, r3, #22
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4313      	orrs	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]

    return encoded;
 8002020:	69fb      	ldr	r3, [r7, #28]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w
 8002030:	a83a83a8 	.word	0xa83a83a8
 8002034:	401d3a83 	.word	0x401d3a83
 8002038:	c28c0000 	.word	0xc28c0000
 800203c:	c28c0000 	.word	0xc28c0000
 8002040:	428c0000 	.word	0x428c0000
 8002044:	428c0000 	.word	0x428c0000
 8002048:	003ff000 	.word	0x003ff000

0800204c <check_nan_in_spi_rx>:


int check_nan_in_spi_rx(spi_rx *data)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	
    float *values_ptr = (float *)data;  // Treat struct as float array
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	613b      	str	r3, [r7, #16]
    int num_floats = (sizeof(spi_rx) - sizeof(data->flags) - sizeof(data->checksum)) / sizeof(float);
 8002058:	231e      	movs	r3, #30
 800205a:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_floats; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00f      	b.n	8002082 <check_nan_in_spi_rx+0x36>
    {
        if (isnan(values_ptr[i]))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	eef4 7a67 	vcmp.f32	s15, s15
 8002072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002076:	d701      	bvc.n	800207c <check_nan_in_spi_rx+0x30>
        {
            // printf("ERROR: NaN detected at index %d! Value: %.9g\n", i, values_ptr[i]);
            return 1;  // Return error if NaN is found
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <check_nan_in_spi_rx+0x40>
    for (int i = 0; i < num_floats; i++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbeb      	blt.n	8002062 <check_nan_in_spi_rx+0x16>
        }
    }
    return 0;  // No NaN detected
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_write>:

//Printfunction
int _write(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e009      	b.n	80020be <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fd26 	bl	8000b04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbf1      	blt.n	80020aa <_write+0x12>
	}
	return len;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b094      	sub	sp, #80	@ 0x50
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2234      	movs	r2, #52	@ 0x34
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 fea4 	bl	8006e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <SystemClock_Config+0xdc>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a2b      	ldr	r2, [pc, #172]	@ (80021ac <SystemClock_Config+0xdc>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40
 8002104:	4b29      	ldr	r3, [pc, #164]	@ (80021ac <SystemClock_Config+0xdc>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <SystemClock_Config+0xe0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a25      	ldr	r2, [pc, #148]	@ (80021b0 <SystemClock_Config+0xe0>)
 800211a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b23      	ldr	r3, [pc, #140]	@ (80021b0 <SystemClock_Config+0xe0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800212c:	2301      	movs	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002134:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002136:	2302      	movs	r3, #2
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800213a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800213e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002140:	2304      	movs	r3, #4
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002144:	23b4      	movs	r3, #180	@ 0xb4
 8002146:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002148:	2302      	movs	r3, #2
 800214a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4618      	mov	r0, r3
 800215a:	f003 f8e5 	bl	8005328 <HAL_RCC_OscConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002164:	f000 fa64 	bl	8002630 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002168:	f002 fd78 	bl	8004c5c <HAL_PWREx_EnableOverDrive>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002172:	f000 fa5d 	bl	8002630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002176:	230f      	movs	r3, #15
 8002178:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217a:	2302      	movs	r3, #2
 800217c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002182:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2105      	movs	r1, #5
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fdb1 	bl	8004cfc <HAL_RCC_ClockConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021a0:	f000 fa46 	bl	8002630 <Error_Handler>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3750      	adds	r7, #80	@ 0x50
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000

080021b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021bc:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <MX_CAN1_Init+0xa4>)
 80021be:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80021c0:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021c2:	2209      	movs	r2, #9
 80021c4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80021c6:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021cc:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80021d2:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021d8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80021f4:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80021fa:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <MX_CAN1_Init+0xa0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002200:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <MX_CAN1_Init+0xa0>)
 8002202:	2200      	movs	r2, #0
 8002204:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002206:	4813      	ldr	r0, [pc, #76]	@ (8002254 <MX_CAN1_Init+0xa0>)
 8002208:	f000 fe3c 	bl	8002e84 <HAL_CAN_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002212:	f000 fa0d 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002216:	2301      	movs	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones 18
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0xFFFF;
 800222a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800222e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0xFFFC;
 8002230:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002234:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800223a:	2301      	movs	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can) 20
 800223e:	230e      	movs	r3, #14
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002242:	463b      	mov	r3, r7
 8002244:	4619      	mov	r1, r3
 8002246:	4803      	ldr	r0, [pc, #12]	@ (8002254 <MX_CAN1_Init+0xa0>)
 8002248:	f000 ff3a 	bl	80030c0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	@ 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000009c 	.word	0x2000009c
 8002258:	40006400 	.word	0x40006400

0800225c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	@ 0x28
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002262:	4b26      	ldr	r3, [pc, #152]	@ (80022fc <MX_CAN2_Init+0xa0>)
 8002264:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <MX_CAN2_Init+0xa4>)
 8002266:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8002268:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <MX_CAN2_Init+0xa0>)
 800226a:	2209      	movs	r2, #9
 800226c:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800226e:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <MX_CAN2_Init+0xa0>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002274:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <MX_CAN2_Init+0xa0>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <MX_CAN2_Init+0xa0>)
 800227c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002280:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <MX_CAN2_Init+0xa0>)
 8002284:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002288:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800228a:	4b1c      	ldr	r3, [pc, #112]	@ (80022fc <MX_CAN2_Init+0xa0>)
 800228c:	2200      	movs	r2, #0
 800228e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <MX_CAN2_Init+0xa0>)
 8002292:	2200      	movs	r2, #0
 8002294:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002296:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <MX_CAN2_Init+0xa0>)
 8002298:	2200      	movs	r2, #0
 800229a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <MX_CAN2_Init+0xa0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022a2:	4b16      	ldr	r3, [pc, #88]	@ (80022fc <MX_CAN2_Init+0xa0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <MX_CAN2_Init+0xa0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022ae:	4813      	ldr	r0, [pc, #76]	@ (80022fc <MX_CAN2_Init+0xa0>)
 80022b0:	f000 fde8 	bl	8002e84 <HAL_CAN_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80022ba:	f000 f9b9 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig2;

  canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 80022be:	2301      	movs	r3, #1
 80022c0:	623b      	str	r3, [r7, #32]
  canfilterconfig2.FilterBank = 15;  // which filter bank to use from the assigned ones
 80022c2:	230f      	movs	r3, #15
 80022c4:	617b      	str	r3, [r7, #20]
  canfilterconfig2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	613b      	str	r3, [r7, #16]
  canfilterconfig2.FilterIdHigh = 0x0000;
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
  canfilterconfig2.FilterIdLow = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  canfilterconfig2.FilterMaskIdHigh = 0xFFFF;
 80022d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022d6:	60bb      	str	r3, [r7, #8]
  canfilterconfig2.FilterMaskIdLow = 0xFFFC;
 80022d8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80022dc:	60fb      	str	r3, [r7, #12]
  canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
  canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
  canfilterconfig2.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 80022e6:	230e      	movs	r3, #14
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2);
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4803      	ldr	r0, [pc, #12]	@ (80022fc <MX_CAN2_Init+0xa0>)
 80022f0:	f000 fee6 	bl	80030c0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	@ 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200000c4 	.word	0x200000c4
 8002300:	40006800 	.word	0x40006800

08002304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002308:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <MX_SPI1_Init+0x5c>)
 800230a:	4a16      	ldr	r2, [pc, #88]	@ (8002364 <MX_SPI1_Init+0x60>)
 800230c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800230e:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <MX_SPI1_Init+0x5c>)
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002314:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <MX_SPI1_Init+0x5c>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <MX_SPI1_Init+0x5c>)
 800231c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002320:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002322:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <MX_SPI1_Init+0x5c>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <MX_SPI1_Init+0x5c>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800232e:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <MX_SPI1_Init+0x5c>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002334:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <MX_SPI1_Init+0x5c>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <MX_SPI1_Init+0x5c>)
 800233c:	2200      	movs	r2, #0
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002340:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <MX_SPI1_Init+0x5c>)
 8002342:	2200      	movs	r2, #0
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <MX_SPI1_Init+0x5c>)
 8002348:	220a      	movs	r2, #10
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800234c:	4804      	ldr	r0, [pc, #16]	@ (8002360 <MX_SPI1_Init+0x5c>)
 800234e:	f003 fa89 	bl	8005864 <HAL_SPI_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8002358:	f000 f96a 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000124 	.word	0x20000124
 8002364:	40013000 	.word	0x40013000

08002368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0308 	add.w	r3, r7, #8
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002384:	4b1e      	ldr	r3, [pc, #120]	@ (8002400 <MX_TIM1_Init+0x98>)
 8002386:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <MX_TIM1_Init+0x9c>)
 8002388:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 800238a:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <MX_TIM1_Init+0x98>)
 800238c:	22b4      	movs	r2, #180	@ 0xb4
 800238e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <MX_TIM1_Init+0x98>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8002396:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <MX_TIM1_Init+0x98>)
 8002398:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800239c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239e:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <MX_TIM1_Init+0x98>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <MX_TIM1_Init+0x98>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023aa:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <MX_TIM1_Init+0x98>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b0:	4813      	ldr	r0, [pc, #76]	@ (8002400 <MX_TIM1_Init+0x98>)
 80023b2:	f004 f80d 	bl	80063d0 <HAL_TIM_Base_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023bc:	f000 f938 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	4619      	mov	r1, r3
 80023cc:	480c      	ldr	r0, [pc, #48]	@ (8002400 <MX_TIM1_Init+0x98>)
 80023ce:	f004 f8b7 	bl	8006540 <HAL_TIM_ConfigClockSource>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023d8:	f000 f92a 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4805      	ldr	r0, [pc, #20]	@ (8002400 <MX_TIM1_Init+0x98>)
 80023ea:	f004 faab 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023f4:	f000 f91c 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	2000023c 	.word	0x2000023c
 8002404:	40010000 	.word	0x40010000

08002408 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	463b      	mov	r3, r7
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002424:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <MX_TIM8_Init+0x98>)
 8002426:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <MX_TIM8_Init+0x9c>)
 8002428:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180;
 800242a:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <MX_TIM8_Init+0x98>)
 800242c:	22b4      	movs	r2, #180	@ 0xb4
 800242e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <MX_TIM8_Init+0x98>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <MX_TIM8_Init+0x98>)
 8002438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800243c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <MX_TIM8_Init+0x98>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002444:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <MX_TIM8_Init+0x98>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <MX_TIM8_Init+0x98>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002450:	4813      	ldr	r0, [pc, #76]	@ (80024a0 <MX_TIM8_Init+0x98>)
 8002452:	f003 ffbd 	bl	80063d0 <HAL_TIM_Base_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800245c:	f000 f8e8 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	4619      	mov	r1, r3
 800246c:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <MX_TIM8_Init+0x98>)
 800246e:	f004 f867 	bl	8006540 <HAL_TIM_ConfigClockSource>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002478:	f000 f8da 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002484:	463b      	mov	r3, r7
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <MX_TIM8_Init+0x98>)
 800248a:	f004 fa5b 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002494:	f000 f8cc 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000284 	.word	0x20000284
 80024a4:	40010400 	.word	0x40010400

080024a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <MX_DMA_Init+0x4c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	4a0f      	ldr	r2, [pc, #60]	@ (80024f4 <MX_DMA_Init+0x4c>)
 80024b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <MX_DMA_Init+0x4c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2038      	movs	r0, #56	@ 0x38
 80024d0:	f001 fcdf 	bl	8003e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024d4:	2038      	movs	r0, #56	@ 0x38
 80024d6:	f001 fcf8 	bl	8003eca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	203b      	movs	r0, #59	@ 0x3b
 80024e0:	f001 fcd7 	bl	8003e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80024e4:	203b      	movs	r0, #59	@ 0x3b
 80024e6:	f001 fcf0 	bl	8003eca <HAL_NVIC_EnableIRQ>

}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b43      	ldr	r3, [pc, #268]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a42      	ldr	r2, [pc, #264]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b40      	ldr	r3, [pc, #256]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a3b      	ldr	r2, [pc, #236]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <MX_GPIO_Init+0x128>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <MX_GPIO_Init+0x128>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a34      	ldr	r2, [pc, #208]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b32      	ldr	r3, [pc, #200]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a2d      	ldr	r2, [pc, #180]	@ (8002620 <MX_GPIO_Init+0x128>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b2b      	ldr	r3, [pc, #172]	@ (8002620 <MX_GPIO_Init+0x128>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002584:	4827      	ldr	r0, [pc, #156]	@ (8002624 <MX_GPIO_Init+0x12c>)
 8002586:	f002 fb2b 	bl	8004be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800258a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002590:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	4821      	ldr	r0, [pc, #132]	@ (8002628 <MX_GPIO_Init+0x130>)
 80025a2:	f002 f895 	bl	80046d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025a6:	2303      	movs	r3, #3
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	481a      	ldr	r0, [pc, #104]	@ (8002624 <MX_GPIO_Init+0x12c>)
 80025ba:	f002 f889 	bl	80046d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025be:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80025c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4813      	ldr	r0, [pc, #76]	@ (8002624 <MX_GPIO_Init+0x12c>)
 80025d8:	f002 f87a 	bl	80046d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80025dc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80025e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_GPIO_Init+0x130>)
 80025f2:	f002 f86d 	bl	80046d0 <HAL_GPIO_Init>

  /*Configure PA15 for SPI1_NSS in Alternate Function mode */
  GPIO_InitStruct.Pin       = GPIO_PIN_15;
 80025f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;     // Or AF_OD if required, usually AF_PP is correct
 80025fc:	2302      	movs	r3, #2
 80025fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;         // Typically no pull for NSS
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW; // Speed not critical for NSS
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;       // On STM32F446, AF5 is SPI1_NSS
 8002608:	2305      	movs	r3, #5
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	4806      	ldr	r0, [pc, #24]	@ (800262c <MX_GPIO_Init+0x134>)
 8002614:	f002 f85c 	bl	80046d0 <HAL_GPIO_Init>

//  /* EXTI interrupt init > Vishnu : Now this interrupt is not required as NSS hanldes the SPI enable/disable*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8002618:	bf00      	nop
 800261a:	3728      	adds	r7, #40	@ 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020000 	.word	0x40020000

08002630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
    CAN_Exit();  // Clean up CAN and SPI before entering infinite loop
 8002634:	f7fe fcca 	bl	8000fcc <CAN_Exit>
	SPI_Exit();
 8002638:	f7fe fc70 	bl	8000f1c <SPI_Exit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800263c:	b672      	cpsid	i
}
 800263e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <Error_Handler+0x10>

08002644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_MspInit+0x4c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	4a0f      	ldr	r2, [pc, #60]	@ (8002690 <HAL_MspInit+0x4c>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002658:	6453      	str	r3, [r2, #68]	@ 0x44
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_MspInit+0x4c>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	4a08      	ldr	r2, [pc, #32]	@ (8002690 <HAL_MspInit+0x4c>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	@ 0x40
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	@ 0x30
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	@ (80027ec <HAL_CAN_MspInit+0x158>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d13e      	bne.n	8002734 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80026b6:	4b4e      	ldr	r3, [pc, #312]	@ (80027f0 <HAL_CAN_MspInit+0x15c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	4a4c      	ldr	r2, [pc, #304]	@ (80027f0 <HAL_CAN_MspInit+0x15c>)
 80026be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80026c0:	4b4b      	ldr	r3, [pc, #300]	@ (80027f0 <HAL_CAN_MspInit+0x15c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10d      	bne.n	80026e4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	4b49      	ldr	r3, [pc, #292]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	4a48      	ldr	r2, [pc, #288]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 80026d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d8:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	4b42      	ldr	r3, [pc, #264]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4a41      	ldr	r2, [pc, #260]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f4:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002700:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002712:	2309      	movs	r3, #9
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	4836      	ldr	r0, [pc, #216]	@ (80027f8 <HAL_CAN_MspInit+0x164>)
 800271e:	f001 ffd7 	bl	80046d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2014      	movs	r0, #20
 8002728:	f001 fbb3 	bl	8003e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800272c:	2014      	movs	r0, #20
 800272e:	f001 fbcc 	bl	8003eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002732:	e057      	b.n	80027e4 <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a30      	ldr	r2, [pc, #192]	@ (80027fc <HAL_CAN_MspInit+0x168>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d152      	bne.n	80027e4 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b2c      	ldr	r3, [pc, #176]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	4a2b      	ldr	r2, [pc, #172]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 8002748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800274c:	6413      	str	r3, [r2, #64]	@ 0x40
 800274e:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800275a:	4b25      	ldr	r3, [pc, #148]	@ (80027f0 <HAL_CAN_MspInit+0x15c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	4a23      	ldr	r2, [pc, #140]	@ (80027f0 <HAL_CAN_MspInit+0x15c>)
 8002762:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <HAL_CAN_MspInit+0x15c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10d      	bne.n	8002788 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	4a1f      	ldr	r2, [pc, #124]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 8002776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800277a:	6413      	str	r3, [r2, #64]	@ 0x40
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 8002792:	f043 0302 	orr.w	r3, r3, #2
 8002796:	6313      	str	r3, [r2, #48]	@ 0x30
 8002798:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_CAN_MspInit+0x160>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027a4:	2360      	movs	r3, #96	@ 0x60
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80027b4:	2309      	movs	r3, #9
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	4810      	ldr	r0, [pc, #64]	@ (8002800 <HAL_CAN_MspInit+0x16c>)
 80027c0:	f001 ff86 	bl	80046d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	2040      	movs	r0, #64	@ 0x40
 80027ca:	f001 fb62 	bl	8003e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80027ce:	2040      	movs	r0, #64	@ 0x40
 80027d0:	f001 fb7b 	bl	8003eca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	2041      	movs	r0, #65	@ 0x41
 80027da:	f001 fb5a 	bl	8003e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80027de:	2041      	movs	r0, #65	@ 0x41
 80027e0:	f001 fb73 	bl	8003eca <HAL_NVIC_EnableIRQ>
}
 80027e4:	bf00      	nop
 80027e6:	3730      	adds	r7, #48	@ 0x30
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40006400 	.word	0x40006400
 80027f0:	20000568 	.word	0x20000568
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40006800 	.word	0x40006800
 8002800:	40020400 	.word	0x40020400

08002804 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a21      	ldr	r2, [pc, #132]	@ (8002898 <HAL_CAN_MspDeInit+0x94>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d117      	bne.n	8002846 <HAL_CAN_MspDeInit+0x42>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_CAN1_CLK_ENABLED--;
 8002816:	4b21      	ldr	r3, [pc, #132]	@ (800289c <HAL_CAN_MspDeInit+0x98>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	4a1f      	ldr	r2, [pc, #124]	@ (800289c <HAL_CAN_MspDeInit+0x98>)
 800281e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 8002820:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_CAN_MspDeInit+0x98>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_CAN_MspDeInit+0x30>
      __HAL_RCC_CAN1_CLK_DISABLE();
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_CAN_MspDeInit+0x9c>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <HAL_CAN_MspDeInit+0x9c>)
 800282e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002832:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002834:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002838:	481a      	ldr	r0, [pc, #104]	@ (80028a4 <HAL_CAN_MspDeInit+0xa0>)
 800283a:	f002 f8dd 	bl	80049f8 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 800283e:	2014      	movs	r0, #20
 8002840:	f001 fb51 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN2_MspDeInit 1 */

  /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 8002844:	e023      	b.n	800288e <HAL_CAN_MspDeInit+0x8a>
  else if(hcan->Instance==CAN2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a17      	ldr	r2, [pc, #92]	@ (80028a8 <HAL_CAN_MspDeInit+0xa4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d11e      	bne.n	800288e <HAL_CAN_MspDeInit+0x8a>
    __HAL_RCC_CAN2_CLK_DISABLE();
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_CAN_MspDeInit+0x9c>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <HAL_CAN_MspDeInit+0x9c>)
 8002856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800285a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_RCC_CAN1_CLK_ENABLED--;
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <HAL_CAN_MspDeInit+0x98>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3b01      	subs	r3, #1
 8002862:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <HAL_CAN_MspDeInit+0x98>)
 8002864:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <HAL_CAN_MspDeInit+0x98>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <HAL_CAN_MspDeInit+0x76>
      __HAL_RCC_CAN1_CLK_DISABLE();
 800286e:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_CAN_MspDeInit+0x9c>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	4a0b      	ldr	r2, [pc, #44]	@ (80028a0 <HAL_CAN_MspDeInit+0x9c>)
 8002874:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002878:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 800287a:	2160      	movs	r1, #96	@ 0x60
 800287c:	480b      	ldr	r0, [pc, #44]	@ (80028ac <HAL_CAN_MspDeInit+0xa8>)
 800287e:	f002 f8bb 	bl	80049f8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 8002882:	2040      	movs	r0, #64	@ 0x40
 8002884:	f001 fb2f 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 8002888:	2041      	movs	r0, #65	@ 0x41
 800288a:	f001 fb2c 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40006400 	.word	0x40006400
 800289c:	20000568 	.word	0x20000568
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40006800 	.word	0x40006800
 80028ac:	40020400 	.word	0x40020400

080028b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002a38 <HAL_SPI_MspInit+0x188>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f040 80ae 	bne.w	8002a30 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	4b58      	ldr	r3, [pc, #352]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	4a57      	ldr	r2, [pc, #348]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 80028de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80028e4:	4b55      	ldr	r3, [pc, #340]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	4b51      	ldr	r3, [pc, #324]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	4a50      	ldr	r2, [pc, #320]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002900:	4b4e      	ldr	r3, [pc, #312]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	4a49      	ldr	r2, [pc, #292]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	6313      	str	r3, [r2, #48]	@ 0x30
 800291c:	4b47      	ldr	r3, [pc, #284]	@ (8002a3c <HAL_SPI_MspInit+0x18c>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002928:	23c0      	movs	r3, #192	@ 0xc0
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002938:	2305      	movs	r3, #5
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	483f      	ldr	r0, [pc, #252]	@ (8002a40 <HAL_SPI_MspInit+0x190>)
 8002944:	f001 fec4 	bl	80046d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002948:	2308      	movs	r3, #8
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002958:	2305      	movs	r3, #5
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	4838      	ldr	r0, [pc, #224]	@ (8002a44 <HAL_SPI_MspInit+0x194>)
 8002964:	f001 feb4 	bl	80046d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002968:	4b37      	ldr	r3, [pc, #220]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 800296a:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_SPI_MspInit+0x19c>)
 800296c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800296e:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 8002970:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002974:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002976:	4b34      	ldr	r3, [pc, #208]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297c:	4b32      	ldr	r3, [pc, #200]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002982:	4b31      	ldr	r3, [pc, #196]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 8002984:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002988:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002990:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002996:	4b2c      	ldr	r3, [pc, #176]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800299c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a2:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80029a8:	4827      	ldr	r0, [pc, #156]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 80029aa:	f001 fab7 	bl	8003f1c <HAL_DMA_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80029b4:	f7ff fe3c 	bl	8002630 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 80029bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80029be:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <HAL_SPI_MspInit+0x198>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80029c4:	4b22      	ldr	r3, [pc, #136]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029c6:	4a23      	ldr	r2, [pc, #140]	@ (8002a54 <HAL_SPI_MspInit+0x1a4>)
 80029c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80029ca:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029cc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80029d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029de:	4b1c      	ldr	r3, [pc, #112]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ec:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80029f2:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029f8:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a04:	4812      	ldr	r0, [pc, #72]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 8002a06:	f001 fa89 	bl	8003f1c <HAL_DMA_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8002a10:	f7ff fe0e 	bl	8002630 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0e      	ldr	r2, [pc, #56]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 8002a18:	649a      	str	r2, [r3, #72]	@ 0x48
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <HAL_SPI_MspInit+0x1a0>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	2023      	movs	r0, #35	@ 0x23
 8002a26:	f001 fa34 	bl	8003e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a2a:	2023      	movs	r0, #35	@ 0x23
 8002a2c:	f001 fa4d 	bl	8003eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3728      	adds	r7, #40	@ 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40013000 	.word	0x40013000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	2000017c 	.word	0x2000017c
 8002a4c:	40026410 	.word	0x40026410
 8002a50:	200001dc 	.word	0x200001dc
 8002a54:	40026458 	.word	0x40026458

08002a58 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a10      	ldr	r2, [pc, #64]	@ (8002aa8 <HAL_SPI_MspDeInit+0x50>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d11a      	bne.n	8002aa0 <HAL_SPI_MspDeInit+0x48>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <HAL_SPI_MspDeInit+0x54>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002aac <HAL_SPI_MspDeInit+0x54>)
 8002a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a74:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8002a76:	21c0      	movs	r1, #192	@ 0xc0
 8002a78:	480d      	ldr	r0, [pc, #52]	@ (8002ab0 <HAL_SPI_MspDeInit+0x58>)
 8002a7a:	f001 ffbd 	bl	80049f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8002a7e:	2108      	movs	r1, #8
 8002a80:	480c      	ldr	r0, [pc, #48]	@ (8002ab4 <HAL_SPI_MspDeInit+0x5c>)
 8002a82:	f001 ffb9 	bl	80049f8 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 faf4 	bl	8004078 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 faef 	bl	8004078 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8002a9a:	2023      	movs	r0, #35	@ 0x23
 8002a9c:	f001 fa23 	bl	8003ee6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40013000 	.word	0x40013000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400

08002ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	@ (8002b1c <HAL_TIM_Base_MspInit+0x64>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <HAL_TIM_Base_MspInit+0x68>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	4a13      	ldr	r2, [pc, #76]	@ (8002b20 <HAL_TIM_Base_MspInit+0x68>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ada:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <HAL_TIM_Base_MspInit+0x68>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ae6:	e012      	b.n	8002b0e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <HAL_TIM_Base_MspInit+0x6c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <HAL_TIM_Base_MspInit+0x68>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <HAL_TIM_Base_MspInit+0x68>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_TIM_Base_MspInit+0x68>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40010400 	.word	0x40010400

08002b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <NMI_Handler+0x4>

08002b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <HardFault_Handler+0x4>

08002b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <MemManage_Handler+0x4>

08002b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <BusFault_Handler+0x4>

08002b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <UsageFault_Handler+0x4>

08002b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7e:	f000 f961 	bl	8002e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <CAN1_RX0_IRQHandler+0x10>)
 8002b8e:	f000 fe5c 	bl	800384a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000009c 	.word	0x2000009c

08002b9c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <SPI1_IRQHandler+0x10>)
 8002ba2:	f003 f891 	bl	8005cc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000124 	.word	0x20000124

08002bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002bb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bb8:	f002 f82c 	bl	8004c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002bbc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002bc0:	f002 f828 	bl	8004c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002bcc:	4802      	ldr	r0, [pc, #8]	@ (8002bd8 <DMA2_Stream0_IRQHandler+0x10>)
 8002bce:	f001 fb43 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000017c 	.word	0x2000017c

08002bdc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002be0:	4802      	ldr	r0, [pc, #8]	@ (8002bec <DMA2_Stream3_IRQHandler+0x10>)
 8002be2:	f001 fb39 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200001dc 	.word	0x200001dc

08002bf0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002bf4:	4802      	ldr	r0, [pc, #8]	@ (8002c00 <CAN2_RX0_IRQHandler+0x10>)
 8002bf6:	f000 fe28 	bl	800384a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200000c4 	.word	0x200000c4

08002c04 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <CAN2_RX1_IRQHandler+0x10>)
 8002c0a:	f000 fe1e 	bl	800384a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200000c4 	.word	0x200000c4

08002c18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e00a      	b.n	8002c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c2a:	f3af 8000 	nop.w
 8002c2e:	4601      	mov	r1, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	60ba      	str	r2, [r7, #8]
 8002c36:	b2ca      	uxtb	r2, r1
 8002c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbf0      	blt.n	8002c2a <_read+0x12>
	}

return len;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	return -1;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <_isatty>:

int _isatty(int file)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	return 1;
 8002c92:	2301      	movs	r3, #1
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
	return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc4:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <_sbrk+0x5c>)
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <_sbrk+0x60>)
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd0:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <_sbrk+0x64>)
 8002cda:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <_sbrk+0x68>)
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cde:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d207      	bcs.n	8002cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cec:	f004 f8ec 	bl	8006ec8 <__errno>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e009      	b.n	8002d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cfc:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d02:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <_sbrk+0x64>)
 8002d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20020000 	.word	0x20020000
 8002d1c:	00000400 	.word	0x00000400
 8002d20:	2000056c 	.word	0x2000056c
 8002d24:	200006c0 	.word	0x200006c0

08002d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <SystemInit+0x20>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d32:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <SystemInit+0x20>)
 8002d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d50:	480d      	ldr	r0, [pc, #52]	@ (8002d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d52:	490e      	ldr	r1, [pc, #56]	@ (8002d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d54:	4a0e      	ldr	r2, [pc, #56]	@ (8002d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0b      	ldr	r2, [pc, #44]	@ (8002d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d68:	4c0b      	ldr	r4, [pc, #44]	@ (8002d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d76:	f7ff ffd7 	bl	8002d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f004 f8ab 	bl	8006ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7e:	f7fd ff21 	bl	8000bc4 <main>
  bx  lr    
 8002d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002d90:	0800752c 	.word	0x0800752c
  ldr r2, =_sbss
 8002d94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002d98:	200006c0 	.word	0x200006c0

08002d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC_IRQHandler>
	...

08002da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da4:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <HAL_Init+0x40>)
 8002daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <HAL_Init+0x40>)
 8002db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a07      	ldr	r2, [pc, #28]	@ (8002de0 <HAL_Init+0x40>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc8:	2003      	movs	r0, #3
 8002dca:	f001 f857 	bl	8003e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f000 f808 	bl	8002de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd4:	f7ff fc36 	bl	8002644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_InitTick+0x54>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <HAL_InitTick+0x58>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 f87d 	bl	8003f02 <HAL_SYSTICK_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00e      	b.n	8002e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b0f      	cmp	r3, #15
 8002e16:	d80a      	bhi.n	8002e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f001 f837 	bl	8003e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e24:	4a06      	ldr	r2, [pc, #24]	@ (8002e40 <HAL_InitTick+0x5c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000014 	.word	0x20000014
 8002e3c:	2000001c 	.word	0x2000001c
 8002e40:	20000018 	.word	0x20000018

08002e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_IncTick+0x20>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_IncTick+0x24>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	@ (8002e68 <HAL_IncTick+0x24>)
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	2000001c 	.word	0x2000001c
 8002e68:	20000570 	.word	0x20000570

08002e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <HAL_GetTick+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000570 	.word	0x20000570

08002e84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0ed      	b.n	8003072 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff fbf6 	bl	8002694 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb8:	f7ff ffd8 	bl	8002e6c <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ebe:	e012      	b.n	8002ee6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ec0:	f7ff ffd4 	bl	8002e6c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b0a      	cmp	r3, #10
 8002ecc:	d90b      	bls.n	8002ee6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2205      	movs	r2, #5
 8002ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0c5      	b.n	8003072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0e5      	beq.n	8002ec0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0202 	bic.w	r2, r2, #2
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f04:	f7ff ffb2 	bl	8002e6c <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f0a:	e012      	b.n	8002f32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f0c:	f7ff ffae 	bl	8002e6c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b0a      	cmp	r3, #10
 8002f18:	d90b      	bls.n	8002f32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2205      	movs	r2, #5
 8002f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e09f      	b.n	8003072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e5      	bne.n	8002f0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7e1b      	ldrb	r3, [r3, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e007      	b.n	8002f6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7e5b      	ldrb	r3, [r3, #25]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e007      	b.n	8002f94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7e9b      	ldrb	r3, [r3, #26]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d108      	bne.n	8002fae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0220 	orr.w	r2, r2, #32
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e007      	b.n	8002fbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0220 	bic.w	r2, r2, #32
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7edb      	ldrb	r3, [r3, #27]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d108      	bne.n	8002fd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0210 	bic.w	r2, r2, #16
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e007      	b.n	8002fe8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0210 	orr.w	r2, r2, #16
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7f1b      	ldrb	r3, [r3, #28]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d108      	bne.n	8003002 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e007      	b.n	8003012 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0208 	bic.w	r2, r2, #8
 8003010:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7f5b      	ldrb	r3, [r3, #29]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d108      	bne.n	800302c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0204 	orr.w	r2, r2, #4
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e007      	b.n	800303c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	ea42 0103 	orr.w	r1, r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	1e5a      	subs	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e015      	b.n	80030b8 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f93b 	bl	8003308 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fbb6 	bl	8002804 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030a6:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d003      	beq.n	80030e6 <HAL_CAN_ConfigFilter+0x26>
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	f040 80be 	bne.w	8003262 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030e6:	4b65      	ldr	r3, [pc, #404]	@ (800327c <HAL_CAN_ConfigFilter+0x1bc>)
 80030e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003100:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	431a      	orrs	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2201      	movs	r2, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43db      	mvns	r3, r3
 8003138:	401a      	ands	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d123      	bne.n	8003190 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800316a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3248      	adds	r2, #72	@ 0x48
 8003170:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003184:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	3348      	adds	r3, #72	@ 0x48
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d122      	bne.n	80031de <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3248      	adds	r2, #72	@ 0x48
 80031be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031d4:	6979      	ldr	r1, [r7, #20]
 80031d6:	3348      	adds	r3, #72	@ 0x48
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	401a      	ands	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80031f8:	e007      	b.n	800320a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	431a      	orrs	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	401a      	ands	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003224:	e007      	b.n	8003236 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	431a      	orrs	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d107      	bne.n	800324e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	431a      	orrs	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003254:	f023 0201 	bic.w	r2, r3, #1
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e006      	b.n	8003270 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40006400 	.word	0x40006400

08003280 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d12e      	bne.n	80032f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032ac:	f7ff fdde 	bl	8002e6c <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032b2:	e012      	b.n	80032da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032b4:	f7ff fdda 	bl	8002e6c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b0a      	cmp	r3, #10
 80032c0:	d90b      	bls.n	80032da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2205      	movs	r2, #5
 80032d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e012      	b.n	8003300 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e5      	bne.n	80032b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e006      	b.n	8003300 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d133      	bne.n	8003384 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800332c:	f7ff fd9e 	bl	8002e6c <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003332:	e012      	b.n	800335a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003334:	f7ff fd9a 	bl	8002e6c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b0a      	cmp	r3, #10
 8003340:	d90b      	bls.n	800335a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2205      	movs	r2, #5
 8003352:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e01b      	b.n	8003392 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0e5      	beq.n	8003334 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0202 	bic.w	r2, r2, #2
 8003376:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e006      	b.n	8003392 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800339a:	b480      	push	{r7}
 800339c:	b089      	sub	sp, #36	@ 0x24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033b8:	7ffb      	ldrb	r3, [r7, #31]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <HAL_CAN_AddTxMessage+0x2c>
 80033be:	7ffb      	ldrb	r3, [r7, #31]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f040 80b8 	bne.w	8003536 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a0 	beq.w	8003526 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	0e1b      	lsrs	r3, r3, #24
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d907      	bls.n	8003406 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e09e      	b.n	8003544 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003406:	2201      	movs	r2, #1
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	6809      	ldr	r1, [r1, #0]
 8003426:	431a      	orrs	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3318      	adds	r3, #24
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	440b      	add	r3, r1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e00f      	b.n	8003454 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800343e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003448:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3318      	adds	r3, #24
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	440b      	add	r3, r1
 8003452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3318      	adds	r3, #24
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	440b      	add	r3, r1
 8003464:	3304      	adds	r3, #4
 8003466:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	7d1b      	ldrb	r3, [r3, #20]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d111      	bne.n	8003494 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3318      	adds	r3, #24
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	6811      	ldr	r1, [r2, #0]
 8003484:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3318      	adds	r3, #24
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	440b      	add	r3, r1
 8003490:	3304      	adds	r3, #4
 8003492:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3307      	adds	r3, #7
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	061a      	lsls	r2, r3, #24
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3306      	adds	r3, #6
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3305      	adds	r3, #5
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	4313      	orrs	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	3204      	adds	r2, #4
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	4610      	mov	r0, r2
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6811      	ldr	r1, [r2, #0]
 80034bc:	ea43 0200 	orr.w	r2, r3, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80034ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3303      	adds	r3, #3
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	061a      	lsls	r2, r3, #24
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3302      	adds	r3, #2
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3301      	adds	r3, #1
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	4313      	orrs	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	4610      	mov	r0, r2
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	6811      	ldr	r1, [r2, #0]
 80034f2:	ea43 0200 	orr.w	r2, r3, r0
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3318      	adds	r3, #24
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	6811      	ldr	r1, [r2, #0]
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3318      	adds	r3, #24
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	440b      	add	r3, r1
 8003520:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e00e      	b.n	8003544 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e006      	b.n	8003544 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3724      	adds	r7, #36	@ 0x24
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003560:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d002      	beq.n	800356e <HAL_CAN_AbortTxRequest+0x1e>
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d128      	bne.n	80035c0 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003586:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035a0:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80035ba:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e006      	b.n	80035ce <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
  }
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d003      	beq.n	80035fe <HAL_CAN_GetRxMessage+0x24>
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f040 80f3 	bne.w	80037e4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10e      	bne.n	8003622 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0e7      	b.n	80037f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0d8      	b.n	80037f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	331b      	adds	r3, #27
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	4413      	add	r3, r2
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0204 	and.w	r2, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	331b      	adds	r3, #27
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0d5b      	lsrs	r3, r3, #21
 800366e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e00b      	b.n	8003690 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	331b      	adds	r3, #27
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	08db      	lsrs	r3, r3, #3
 8003688:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	331b      	adds	r3, #27
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0202 	and.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	331b      	adds	r3, #27
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 020f 	and.w	r2, r3, #15
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	331b      	adds	r3, #27
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4413      	add	r3, r2
 80036ca:	3304      	adds	r3, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	331b      	adds	r3, #27
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	4413      	add	r3, r2
 800370e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0a1a      	lsrs	r2, r3, #8
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	4413      	add	r3, r2
 8003728:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0c1a      	lsrs	r2, r3, #16
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	3302      	adds	r3, #2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	4413      	add	r3, r2
 8003742:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e1a      	lsrs	r2, r3, #24
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	3303      	adds	r3, #3
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	4413      	add	r3, r2
 800375c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	3304      	adds	r3, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4413      	add	r3, r2
 8003774:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0a1a      	lsrs	r2, r3, #8
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	3305      	adds	r3, #5
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	4413      	add	r3, r2
 800378e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0c1a      	lsrs	r2, r3, #16
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	3306      	adds	r3, #6
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	0e1a      	lsrs	r2, r3, #24
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	3307      	adds	r3, #7
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0220 	orr.w	r2, r2, #32
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e007      	b.n	80037e0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e006      	b.n	80037f2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d002      	beq.n	800381c <HAL_CAN_ActivateNotification+0x1e>
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d109      	bne.n	8003830 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6959      	ldr	r1, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e006      	b.n	800383e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b08a      	sub	sp, #40	@ 0x28
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d07c      	beq.n	800398a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d023      	beq.n	80038e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f983 	bl	8003bb8 <HAL_CAN_TxMailbox0CompleteCallback>
 80038b2:	e016      	b.n	80038e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c6:	e00c      	b.n	80038e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038da:	e002      	b.n	80038e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f989 	bl	8003bf4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d024      	beq.n	8003936 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f963 	bl	8003bcc <HAL_CAN_TxMailbox1CompleteCallback>
 8003906:	e016      	b.n	8003936 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	e00c      	b.n	8003936 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
 800392e:	e002      	b.n	8003936 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f969 	bl	8003c08 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d024      	beq.n	800398a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003948:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f943 	bl	8003be0 <HAL_CAN_TxMailbox2CompleteCallback>
 800395a:	e016      	b.n	800398a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
 800396e:	e00c      	b.n	800398a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
 8003982:	e002      	b.n	800398a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f949 	bl	8003c1c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00c      	beq.n	80039ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2210      	movs	r2, #16
 80039ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f930 	bl	8003c30 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd f8b3 	bl	8000b54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00c      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2210      	movs	r2, #16
 8003a10:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f908 	bl	8003c44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fd f89d 	bl	8000b8c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8f2 	bl	8003c58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8eb 	bl	8003c6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07b      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d072      	beq.n	8003b90 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d043      	beq.n	8003b90 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d03e      	beq.n	8003b90 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b18:	2b60      	cmp	r3, #96	@ 0x60
 8003b1a:	d02b      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x32a>
 8003b1c:	2b60      	cmp	r3, #96	@ 0x60
 8003b1e:	d82e      	bhi.n	8003b7e <HAL_CAN_IRQHandler+0x334>
 8003b20:	2b50      	cmp	r3, #80	@ 0x50
 8003b22:	d022      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x320>
 8003b24:	2b50      	cmp	r3, #80	@ 0x50
 8003b26:	d82a      	bhi.n	8003b7e <HAL_CAN_IRQHandler+0x334>
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d019      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x316>
 8003b2c:	2b40      	cmp	r3, #64	@ 0x40
 8003b2e:	d826      	bhi.n	8003b7e <HAL_CAN_IRQHandler+0x334>
 8003b30:	2b30      	cmp	r3, #48	@ 0x30
 8003b32:	d010      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x30c>
 8003b34:	2b30      	cmp	r3, #48	@ 0x30
 8003b36:	d822      	bhi.n	8003b7e <HAL_CAN_IRQHandler+0x334>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d002      	beq.n	8003b42 <HAL_CAN_IRQHandler+0x2f8>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d005      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b40:	e01d      	b.n	8003b7e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	f043 0308 	orr.w	r3, r3, #8
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b4a:	e019      	b.n	8003b80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	f043 0310 	orr.w	r3, r3, #16
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b54:	e014      	b.n	8003b80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	f043 0320 	orr.w	r3, r3, #32
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b5e:	e00f      	b.n	8003b80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b68:	e00a      	b.n	8003b80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b72:	e005      	b.n	8003b80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b7c:	e000      	b.n	8003b80 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b7e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b8e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2204      	movs	r2, #4
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f868 	bl	8003c80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3728      	adds	r7, #40	@ 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <__NVIC_SetPriorityGrouping>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	@ (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_DisableIRQ>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	db12      	blt.n	8003d6c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	f003 021f 	and.w	r2, r3, #31
 8003d4c:	490a      	ldr	r1, [pc, #40]	@ (8003d78 <__NVIC_DisableIRQ+0x44>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2001      	movs	r0, #1
 8003d56:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5a:	3320      	adds	r3, #32
 8003d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d60:	f3bf 8f4f 	dsb	sy
}
 8003d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d66:	f3bf 8f6f 	isb	sy
}
 8003d6a:	bf00      	nop
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000e100 	.word	0xe000e100

08003d7c <__NVIC_SetPriority>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	6039      	str	r1, [r7, #0]
 8003d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	db0a      	blt.n	8003da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	490c      	ldr	r1, [pc, #48]	@ (8003dc8 <__NVIC_SetPriority+0x4c>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	0112      	lsls	r2, r2, #4
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003da4:	e00a      	b.n	8003dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4908      	ldr	r1, [pc, #32]	@ (8003dcc <__NVIC_SetPriority+0x50>)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	3b04      	subs	r3, #4
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	440b      	add	r3, r1
 8003dba:	761a      	strb	r2, [r3, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000e100 	.word	0xe000e100
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <NVIC_EncodePriority>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	@ 0x24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f1c3 0307 	rsb	r3, r3, #7
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	bf28      	it	cs
 8003dee:	2304      	movcs	r3, #4
 8003df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3304      	adds	r3, #4
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d902      	bls.n	8003e00 <NVIC_EncodePriority+0x30>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3b03      	subs	r3, #3
 8003dfe:	e000      	b.n	8003e02 <NVIC_EncodePriority+0x32>
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	401a      	ands	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e18:	f04f 31ff 	mov.w	r1, #4294967295
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	43d9      	mvns	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e28:	4313      	orrs	r3, r2
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3724      	adds	r7, #36	@ 0x24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <SysTick_Config>:
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e48:	d301      	bcc.n	8003e4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e00f      	b.n	8003e6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <SysTick_Config+0x40>)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e56:	210f      	movs	r1, #15
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	f7ff ff8e 	bl	8003d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <SysTick_Config+0x40>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e66:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <SysTick_Config+0x40>)
 8003e68:	2207      	movs	r2, #7
 8003e6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	e000e010 	.word	0xe000e010

08003e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff05 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea4:	f7ff ff1a 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	6978      	ldr	r0, [r7, #20]
 8003eb0:	f7ff ff8e 	bl	8003dd0 <NVIC_EncodePriority>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff5d 	bl	8003d7c <__NVIC_SetPriority>
}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff0d 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	4603      	mov	r3, r0
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff1d 	bl	8003d34 <__NVIC_DisableIRQ>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff94 	bl	8003e38 <SysTick_Config>
 8003f10:	4603      	mov	r3, r0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f28:	f7fe ffa0 	bl	8002e6c <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e099      	b.n	800406c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f58:	e00f      	b.n	8003f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f5a:	f7fe ff87 	bl	8002e6c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d908      	bls.n	8003f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2203      	movs	r2, #3
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e078      	b.n	800406c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e8      	bne.n	8003f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4b38      	ldr	r3, [pc, #224]	@ (8004074 <HAL_DMA_Init+0x158>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d107      	bne.n	8003fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	2b04      	cmp	r3, #4
 800400c:	d117      	bne.n	800403e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fad9 	bl	80045d8 <DMA_CheckFifoParam>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2240      	movs	r2, #64	@ 0x40
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800403a:	2301      	movs	r3, #1
 800403c:	e016      	b.n	800406c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa90 	bl	800456c <DMA_CalcBaseAndBitshift>
 800404c:	4603      	mov	r3, r0
 800404e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	223f      	movs	r2, #63	@ 0x3f
 8004056:	409a      	lsls	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	f010803f 	.word	0xf010803f

08004078 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e050      	b.n	800412c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d101      	bne.n	800409a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	e048      	b.n	800412c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2221      	movs	r2, #33	@ 0x21
 80040d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa46 	bl	800456c <DMA_CalcBaseAndBitshift>
 80040e0:	4603      	mov	r3, r0
 80040e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	223f      	movs	r2, #63	@ 0x3f
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004140:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004142:	f7fe fe93 	bl	8002e6c <HAL_GetTick>
 8004146:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d008      	beq.n	8004166 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2280      	movs	r2, #128	@ 0x80
 8004158:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e052      	b.n	800420c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0216 	bic.w	r2, r2, #22
 8004174:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004184:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_DMA_Abort+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041b6:	e013      	b.n	80041e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041b8:	f7fe fe58 	bl	8002e6c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d90c      	bls.n	80041e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e015      	b.n	800420c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e4      	bne.n	80041b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f2:	223f      	movs	r2, #63	@ 0x3f
 80041f4:	409a      	lsls	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2280      	movs	r2, #128	@ 0x80
 800422c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00c      	b.n	800424c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2205      	movs	r2, #5
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004264:	4b8e      	ldr	r3, [pc, #568]	@ (80044a0 <HAL_DMA_IRQHandler+0x248>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a8e      	ldr	r2, [pc, #568]	@ (80044a4 <HAL_DMA_IRQHandler+0x24c>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	2208      	movs	r2, #8
 8004284:	409a      	lsls	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01a      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	2208      	movs	r2, #8
 80042b2:	409a      	lsls	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	2201      	movs	r2, #1
 80042e8:	409a      	lsls	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fe:	2204      	movs	r2, #4
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d012      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	2204      	movs	r2, #4
 800431e:	409a      	lsls	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004334:	2210      	movs	r2, #16
 8004336:	409a      	lsls	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d043      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	2210      	movs	r2, #16
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d018      	beq.n	800439a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d024      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
 8004386:	e01f      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
 8004398:	e016      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0208 	bic.w	r2, r2, #8
 80043b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043cc:	2220      	movs	r2, #32
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 808f 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8087 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	2220      	movs	r2, #32
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d136      	bne.n	8004470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0216 	bic.w	r2, r2, #22
 8004410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_DMA_IRQHandler+0x1da>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0208 	bic.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	223f      	movs	r2, #63	@ 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d07e      	beq.n	8004564 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
        }
        return;
 800446e:	e079      	b.n	8004564 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01d      	beq.n	80044ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004490:	2b00      	cmp	r3, #0
 8004492:	d031      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e02c      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
 800449e:	bf00      	nop
 80044a0:	20000014 	.word	0x20000014
 80044a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d023      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
 80044b8:	e01e      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0210 	bic.w	r2, r2, #16
 80044d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d032      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2205      	movs	r2, #5
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3301      	adds	r3, #1
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d307      	bcc.n	8004540 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f2      	bne.n	8004524 <HAL_DMA_IRQHandler+0x2cc>
 800453e:	e000      	b.n	8004542 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004540:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
 8004562:	e000      	b.n	8004566 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004564:	bf00      	nop
    }
  }
}
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	3b10      	subs	r3, #16
 800457c:	4a14      	ldr	r2, [pc, #80]	@ (80045d0 <DMA_CalcBaseAndBitshift+0x64>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004586:	4a13      	ldr	r2, [pc, #76]	@ (80045d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d909      	bls.n	80045ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	1d1a      	adds	r2, r3, #4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80045ac:	e007      	b.n	80045be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	aaaaaaab 	.word	0xaaaaaaab
 80045d4:	08007514 	.word	0x08007514

080045d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11f      	bne.n	8004632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d856      	bhi.n	80046a6 <DMA_CheckFifoParam+0xce>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <DMA_CheckFifoParam+0x28>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004611 	.word	0x08004611
 8004604:	08004623 	.word	0x08004623
 8004608:	08004611 	.word	0x08004611
 800460c:	080046a7 	.word	0x080046a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d046      	beq.n	80046aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004620:	e043      	b.n	80046aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800462a:	d140      	bne.n	80046ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e03d      	b.n	80046ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463a:	d121      	bne.n	8004680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d837      	bhi.n	80046b2 <DMA_CheckFifoParam+0xda>
 8004642:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <DMA_CheckFifoParam+0x70>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	08004659 	.word	0x08004659
 800464c:	0800465f 	.word	0x0800465f
 8004650:	08004659 	.word	0x08004659
 8004654:	08004671 	.word	0x08004671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e030      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d025      	beq.n	80046b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466e:	e022      	b.n	80046b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004678:	d11f      	bne.n	80046ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800467e:	e01c      	b.n	80046ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d903      	bls.n	800468e <DMA_CheckFifoParam+0xb6>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d003      	beq.n	8004694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800468c:	e018      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
      break;
 8004692:	e015      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e00b      	b.n	80046be <DMA_CheckFifoParam+0xe6>
      break;
 80046a6:	bf00      	nop
 80046a8:	e00a      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046aa:	bf00      	nop
 80046ac:	e008      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ae:	bf00      	nop
 80046b0:	e006      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046b2:	bf00      	nop
 80046b4:	e004      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
 80046b8:	e002      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
    }
  } 
  
  return status; 
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop

080046d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	@ 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e165      	b.n	80049b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046ec:	2201      	movs	r2, #1
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	f040 8154 	bne.w	80049b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b01      	cmp	r3, #1
 8004714:	d005      	beq.n	8004722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471e:	2b02      	cmp	r3, #2
 8004720:	d130      	bne.n	8004784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004758:	2201      	movs	r2, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 0201 	and.w	r2, r3, #1
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b03      	cmp	r3, #3
 800478e:	d017      	beq.n	80047c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2203      	movs	r2, #3
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d123      	bne.n	8004814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	08da      	lsrs	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3208      	adds	r2, #8
 80047d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	220f      	movs	r2, #15
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	08da      	lsrs	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3208      	adds	r2, #8
 800480e:	69b9      	ldr	r1, [r7, #24]
 8004810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	2203      	movs	r2, #3
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 0203 	and.w	r2, r3, #3
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80ae 	beq.w	80049b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	4b5d      	ldr	r3, [pc, #372]	@ (80049d0 <HAL_GPIO_Init+0x300>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	4a5c      	ldr	r2, [pc, #368]	@ (80049d0 <HAL_GPIO_Init+0x300>)
 8004860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004864:	6453      	str	r3, [r2, #68]	@ 0x44
 8004866:	4b5a      	ldr	r3, [pc, #360]	@ (80049d0 <HAL_GPIO_Init+0x300>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004872:	4a58      	ldr	r2, [pc, #352]	@ (80049d4 <HAL_GPIO_Init+0x304>)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	220f      	movs	r2, #15
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4f      	ldr	r2, [pc, #316]	@ (80049d8 <HAL_GPIO_Init+0x308>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d025      	beq.n	80048ea <HAL_GPIO_Init+0x21a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4e      	ldr	r2, [pc, #312]	@ (80049dc <HAL_GPIO_Init+0x30c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <HAL_GPIO_Init+0x216>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4d      	ldr	r2, [pc, #308]	@ (80049e0 <HAL_GPIO_Init+0x310>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d019      	beq.n	80048e2 <HAL_GPIO_Init+0x212>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4c      	ldr	r2, [pc, #304]	@ (80049e4 <HAL_GPIO_Init+0x314>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_GPIO_Init+0x20e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4b      	ldr	r2, [pc, #300]	@ (80049e8 <HAL_GPIO_Init+0x318>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00d      	beq.n	80048da <HAL_GPIO_Init+0x20a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4a      	ldr	r2, [pc, #296]	@ (80049ec <HAL_GPIO_Init+0x31c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <HAL_GPIO_Init+0x206>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a49      	ldr	r2, [pc, #292]	@ (80049f0 <HAL_GPIO_Init+0x320>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_GPIO_Init+0x202>
 80048ce:	2306      	movs	r3, #6
 80048d0:	e00c      	b.n	80048ec <HAL_GPIO_Init+0x21c>
 80048d2:	2307      	movs	r3, #7
 80048d4:	e00a      	b.n	80048ec <HAL_GPIO_Init+0x21c>
 80048d6:	2305      	movs	r3, #5
 80048d8:	e008      	b.n	80048ec <HAL_GPIO_Init+0x21c>
 80048da:	2304      	movs	r3, #4
 80048dc:	e006      	b.n	80048ec <HAL_GPIO_Init+0x21c>
 80048de:	2303      	movs	r3, #3
 80048e0:	e004      	b.n	80048ec <HAL_GPIO_Init+0x21c>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e002      	b.n	80048ec <HAL_GPIO_Init+0x21c>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_GPIO_Init+0x21c>
 80048ea:	2300      	movs	r3, #0
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	f002 0203 	and.w	r2, r2, #3
 80048f2:	0092      	lsls	r2, r2, #2
 80048f4:	4093      	lsls	r3, r2
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048fc:	4935      	ldr	r1, [pc, #212]	@ (80049d4 <HAL_GPIO_Init+0x304>)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	3302      	adds	r3, #2
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800490a:	4b3a      	ldr	r3, [pc, #232]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800492e:	4a31      	ldr	r2, [pc, #196]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004934:	4b2f      	ldr	r3, [pc, #188]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004958:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800495e:	4b25      	ldr	r3, [pc, #148]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004982:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004988:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049ac:	4a11      	ldr	r2, [pc, #68]	@ (80049f4 <HAL_GPIO_Init+0x324>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3301      	adds	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	f67f ae96 	bls.w	80046ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	3724      	adds	r7, #36	@ 0x24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40013800 	.word	0x40013800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	40020400 	.word	0x40020400
 80049e0:	40020800 	.word	0x40020800
 80049e4:	40020c00 	.word	0x40020c00
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40021400 	.word	0x40021400
 80049f0:	40021800 	.word	0x40021800
 80049f4:	40013c00 	.word	0x40013c00

080049f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e0c7      	b.n	8004ba4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a14:	2201      	movs	r2, #1
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	f040 80b7 	bne.w	8004b9e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a30:	4a62      	ldr	r2, [pc, #392]	@ (8004bbc <HAL_GPIO_DeInit+0x1c4>)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	3302      	adds	r3, #2
 8004a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	220f      	movs	r2, #15
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a5a      	ldr	r2, [pc, #360]	@ (8004bc0 <HAL_GPIO_DeInit+0x1c8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d025      	beq.n	8004aa6 <HAL_GPIO_DeInit+0xae>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a59      	ldr	r2, [pc, #356]	@ (8004bc4 <HAL_GPIO_DeInit+0x1cc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01f      	beq.n	8004aa2 <HAL_GPIO_DeInit+0xaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a58      	ldr	r2, [pc, #352]	@ (8004bc8 <HAL_GPIO_DeInit+0x1d0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d019      	beq.n	8004a9e <HAL_GPIO_DeInit+0xa6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a57      	ldr	r2, [pc, #348]	@ (8004bcc <HAL_GPIO_DeInit+0x1d4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_GPIO_DeInit+0xa2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a56      	ldr	r2, [pc, #344]	@ (8004bd0 <HAL_GPIO_DeInit+0x1d8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00d      	beq.n	8004a96 <HAL_GPIO_DeInit+0x9e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a55      	ldr	r2, [pc, #340]	@ (8004bd4 <HAL_GPIO_DeInit+0x1dc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <HAL_GPIO_DeInit+0x9a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a54      	ldr	r2, [pc, #336]	@ (8004bd8 <HAL_GPIO_DeInit+0x1e0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_GPIO_DeInit+0x96>
 8004a8a:	2306      	movs	r3, #6
 8004a8c:	e00c      	b.n	8004aa8 <HAL_GPIO_DeInit+0xb0>
 8004a8e:	2307      	movs	r3, #7
 8004a90:	e00a      	b.n	8004aa8 <HAL_GPIO_DeInit+0xb0>
 8004a92:	2305      	movs	r3, #5
 8004a94:	e008      	b.n	8004aa8 <HAL_GPIO_DeInit+0xb0>
 8004a96:	2304      	movs	r3, #4
 8004a98:	e006      	b.n	8004aa8 <HAL_GPIO_DeInit+0xb0>
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e004      	b.n	8004aa8 <HAL_GPIO_DeInit+0xb0>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e002      	b.n	8004aa8 <HAL_GPIO_DeInit+0xb0>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_GPIO_DeInit+0xb0>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	f002 0203 	and.w	r2, r2, #3
 8004aae:	0092      	lsls	r2, r2, #2
 8004ab0:	4093      	lsls	r3, r2
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d132      	bne.n	8004b1e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ab8:	4b48      	ldr	r3, [pc, #288]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	4946      	ldr	r1, [pc, #280]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ac6:	4b45      	ldr	r3, [pc, #276]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	4943      	ldr	r1, [pc, #268]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ad4:	4b41      	ldr	r3, [pc, #260]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	43db      	mvns	r3, r3
 8004adc:	493f      	ldr	r1, [pc, #252]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	493c      	ldr	r1, [pc, #240]	@ (8004bdc <HAL_GPIO_DeInit+0x1e4>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	220f      	movs	r2, #15
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b00:	4a2e      	ldr	r2, [pc, #184]	@ (8004bbc <HAL_GPIO_DeInit+0x1c4>)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	089b      	lsrs	r3, r3, #2
 8004b06:	3302      	adds	r3, #2
 8004b08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	482a      	ldr	r0, [pc, #168]	@ (8004bbc <HAL_GPIO_DeInit+0x1c4>)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	400a      	ands	r2, r1
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	2103      	movs	r1, #3
 8004b28:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	401a      	ands	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	08da      	lsrs	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3208      	adds	r2, #8
 8004b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	220f      	movs	r2, #15
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	08d2      	lsrs	r2, r2, #3
 8004b54:	4019      	ands	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3208      	adds	r2, #8
 8004b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2103      	movs	r1, #3
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	401a      	ands	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	2103      	movs	r1, #3
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	401a      	ands	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	f67f af34 	bls.w	8004a14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40013800 	.word	0x40013800
 8004bc0:	40020000 	.word	0x40020000
 8004bc4:	40020400 	.word	0x40020400
 8004bc8:	40020800 	.word	0x40020800
 8004bcc:	40020c00 	.word	0x40020c00
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40021400 	.word	0x40021400
 8004bd8:	40021800 	.word	0x40021800
 8004bdc:	40013c00 	.word	0x40013c00

08004be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
 8004bec:	4613      	mov	r3, r2
 8004bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bf0:	787b      	ldrb	r3, [r7, #1]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bfc:	e003      	b.n	8004c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	041a      	lsls	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	619a      	str	r2, [r3, #24]
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c1e:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c2a:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f806 	bl	8004c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40013c00 	.word	0x40013c00

08004c44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4b20      	ldr	r3, [pc, #128]	@ (8004cec <HAL_PWREx_EnableOverDrive+0x90>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cec <HAL_PWREx_EnableOverDrive+0x90>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c76:	4b1d      	ldr	r3, [pc, #116]	@ (8004cec <HAL_PWREx_EnableOverDrive+0x90>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c82:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c88:	f7fe f8f0 	bl	8002e6c <HAL_GetTick>
 8004c8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c8e:	e009      	b.n	8004ca4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c90:	f7fe f8ec 	bl	8002e6c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c9e:	d901      	bls.n	8004ca4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e01f      	b.n	8004ce4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ca4:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb0:	d1ee      	bne.n	8004c90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cb2:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cb8:	f7fe f8d8 	bl	8002e6c <HAL_GetTick>
 8004cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cbe:	e009      	b.n	8004cd4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cc0:	f7fe f8d4 	bl	8002e6c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cce:	d901      	bls.n	8004cd4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e007      	b.n	8004ce4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cd4:	4b07      	ldr	r3, [pc, #28]	@ (8004cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce0:	d1ee      	bne.n	8004cc0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	420e0040 	.word	0x420e0040
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	420e0044 	.word	0x420e0044

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0cc      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b68      	ldr	r3, [pc, #416]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d90c      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b65      	ldr	r3, [pc, #404]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b63      	ldr	r3, [pc, #396]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0b8      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d50:	4b59      	ldr	r3, [pc, #356]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a58      	ldr	r2, [pc, #352]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d68:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d74:	4b50      	ldr	r3, [pc, #320]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	494d      	ldr	r1, [pc, #308]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d044      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d119      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e06f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dca:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e067      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dda:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 0203 	bic.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4934      	ldr	r1, [pc, #208]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dec:	f7fe f83e 	bl	8002e6c <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f7fe f83a 	bl	8002e6c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e04f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 020c 	and.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1eb      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b25      	ldr	r3, [pc, #148]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20c      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b22      	ldr	r3, [pc, #136]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b20      	ldr	r3, [pc, #128]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e032      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e50:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4916      	ldr	r1, [pc, #88]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	490e      	ldr	r1, [pc, #56]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e82:	f000 f821 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004e86:	4602      	mov	r2, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	490a      	ldr	r1, [pc, #40]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	5ccb      	ldrb	r3, [r1, r3]
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fd ff9e 	bl	8002de4 <HAL_InitTick>

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023c00 	.word	0x40023c00
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	08007504 	.word	0x08007504
 8004ec0:	20000014 	.word	0x20000014
 8004ec4:	20000018 	.word	0x20000018

08004ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b0ae      	sub	sp, #184	@ 0xb8
 8004ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eee:	4bcb      	ldr	r3, [pc, #812]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b0c      	cmp	r3, #12
 8004ef8:	f200 8206 	bhi.w	8005308 <HAL_RCC_GetSysClockFreq+0x440>
 8004efc:	a201      	add	r2, pc, #4	@ (adr r2, 8004f04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f39 	.word	0x08004f39
 8004f08:	08005309 	.word	0x08005309
 8004f0c:	08005309 	.word	0x08005309
 8004f10:	08005309 	.word	0x08005309
 8004f14:	08004f41 	.word	0x08004f41
 8004f18:	08005309 	.word	0x08005309
 8004f1c:	08005309 	.word	0x08005309
 8004f20:	08005309 	.word	0x08005309
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08005309 	.word	0x08005309
 8004f2c:	08005309 	.word	0x08005309
 8004f30:	08005309 	.word	0x08005309
 8004f34:	08005139 	.word	0x08005139
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f38:	4bb9      	ldr	r3, [pc, #740]	@ (8005220 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004f3e:	e1e7      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f40:	4bb8      	ldr	r3, [pc, #736]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f46:	e1e3      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f48:	4bb4      	ldr	r3, [pc, #720]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f54:	4bb1      	ldr	r3, [pc, #708]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d071      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f60:	4bae      	ldr	r3, [pc, #696]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	099b      	lsrs	r3, r3, #6
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f86:	4622      	mov	r2, r4
 8004f88:	462b      	mov	r3, r5
 8004f8a:	f04f 0000 	mov.w	r0, #0
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	0159      	lsls	r1, r3, #5
 8004f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f98:	0150      	lsls	r0, r2, #5
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	1a51      	subs	r1, r2, r1
 8004fa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004fb8:	4649      	mov	r1, r9
 8004fba:	018b      	lsls	r3, r1, #6
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	018a      	lsls	r2, r1, #6
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	1a51      	subs	r1, r2, r1
 8004fca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fcc:	4649      	mov	r1, r9
 8004fce:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	00cb      	lsls	r3, r1, #3
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fea:	4641      	mov	r1, r8
 8004fec:	00ca      	lsls	r2, r1, #3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	460a      	mov	r2, r1
 8004ffe:	eb42 0303 	adc.w	r3, r2, r3
 8005002:	637b      	str	r3, [r7, #52]	@ 0x34
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005010:	4629      	mov	r1, r5
 8005012:	024b      	lsls	r3, r1, #9
 8005014:	4621      	mov	r1, r4
 8005016:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800501a:	4621      	mov	r1, r4
 800501c:	024a      	lsls	r2, r1, #9
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800502c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005030:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005034:	f7fb fbee 	bl	8000814 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4613      	mov	r3, r2
 800503e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005042:	e067      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005044:	4b75      	ldr	r3, [pc, #468]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	099b      	lsrs	r3, r3, #6
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005050:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005054:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800505e:	2300      	movs	r3, #0
 8005060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005062:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005066:	4622      	mov	r2, r4
 8005068:	462b      	mov	r3, r5
 800506a:	f04f 0000 	mov.w	r0, #0
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	0159      	lsls	r1, r3, #5
 8005074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005078:	0150      	lsls	r0, r2, #5
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4621      	mov	r1, r4
 8005080:	1a51      	subs	r1, r2, r1
 8005082:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005084:	4629      	mov	r1, r5
 8005086:	eb63 0301 	sbc.w	r3, r3, r1
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005098:	4649      	mov	r1, r9
 800509a:	018b      	lsls	r3, r1, #6
 800509c:	4641      	mov	r1, r8
 800509e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050a2:	4641      	mov	r1, r8
 80050a4:	018a      	lsls	r2, r1, #6
 80050a6:	4641      	mov	r1, r8
 80050a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ac:	4649      	mov	r1, r9
 80050ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c6:	4692      	mov	sl, r2
 80050c8:	469b      	mov	fp, r3
 80050ca:	4623      	mov	r3, r4
 80050cc:	eb1a 0303 	adds.w	r3, sl, r3
 80050d0:	623b      	str	r3, [r7, #32]
 80050d2:	462b      	mov	r3, r5
 80050d4:	eb4b 0303 	adc.w	r3, fp, r3
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80050e6:	4629      	mov	r1, r5
 80050e8:	028b      	lsls	r3, r1, #10
 80050ea:	4621      	mov	r1, r4
 80050ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f0:	4621      	mov	r1, r4
 80050f2:	028a      	lsls	r2, r1, #10
 80050f4:	4610      	mov	r0, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050fc:	2200      	movs	r2, #0
 80050fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005100:	677a      	str	r2, [r7, #116]	@ 0x74
 8005102:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005106:	f7fb fb85 	bl	8000814 <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4613      	mov	r3, r2
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005114:	4b41      	ldr	r3, [pc, #260]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	3301      	adds	r3, #1
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8005126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800512a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005136:	e0eb      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005138:	4b38      	ldr	r3, [pc, #224]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005144:	4b35      	ldr	r3, [pc, #212]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d06b      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005150:	4b32      	ldr	r3, [pc, #200]	@ (800521c <HAL_RCC_GetSysClockFreq+0x354>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	099b      	lsrs	r3, r3, #6
 8005156:	2200      	movs	r2, #0
 8005158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800515a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800515c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	663b      	str	r3, [r7, #96]	@ 0x60
 8005164:	2300      	movs	r3, #0
 8005166:	667b      	str	r3, [r7, #100]	@ 0x64
 8005168:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800516c:	4622      	mov	r2, r4
 800516e:	462b      	mov	r3, r5
 8005170:	f04f 0000 	mov.w	r0, #0
 8005174:	f04f 0100 	mov.w	r1, #0
 8005178:	0159      	lsls	r1, r3, #5
 800517a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800517e:	0150      	lsls	r0, r2, #5
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4621      	mov	r1, r4
 8005186:	1a51      	subs	r1, r2, r1
 8005188:	61b9      	str	r1, [r7, #24]
 800518a:	4629      	mov	r1, r5
 800518c:	eb63 0301 	sbc.w	r3, r3, r1
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800519e:	4659      	mov	r1, fp
 80051a0:	018b      	lsls	r3, r1, #6
 80051a2:	4651      	mov	r1, sl
 80051a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051a8:	4651      	mov	r1, sl
 80051aa:	018a      	lsls	r2, r1, #6
 80051ac:	4651      	mov	r1, sl
 80051ae:	ebb2 0801 	subs.w	r8, r2, r1
 80051b2:	4659      	mov	r1, fp
 80051b4:	eb63 0901 	sbc.w	r9, r3, r1
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051cc:	4690      	mov	r8, r2
 80051ce:	4699      	mov	r9, r3
 80051d0:	4623      	mov	r3, r4
 80051d2:	eb18 0303 	adds.w	r3, r8, r3
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	462b      	mov	r3, r5
 80051da:	eb49 0303 	adc.w	r3, r9, r3
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80051ec:	4629      	mov	r1, r5
 80051ee:	024b      	lsls	r3, r1, #9
 80051f0:	4621      	mov	r1, r4
 80051f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051f6:	4621      	mov	r1, r4
 80051f8:	024a      	lsls	r2, r1, #9
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005202:	2200      	movs	r2, #0
 8005204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005206:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005208:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800520c:	f7fb fb02 	bl	8000814 <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4613      	mov	r3, r2
 8005216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800521a:	e065      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x420>
 800521c:	40023800 	.word	0x40023800
 8005220:	00f42400 	.word	0x00f42400
 8005224:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005228:	4b3d      	ldr	r3, [pc, #244]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x458>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	099b      	lsrs	r3, r3, #6
 800522e:	2200      	movs	r2, #0
 8005230:	4618      	mov	r0, r3
 8005232:	4611      	mov	r1, r2
 8005234:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005238:	653b      	str	r3, [r7, #80]	@ 0x50
 800523a:	2300      	movs	r3, #0
 800523c:	657b      	str	r3, [r7, #84]	@ 0x54
 800523e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005242:	4642      	mov	r2, r8
 8005244:	464b      	mov	r3, r9
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	0159      	lsls	r1, r3, #5
 8005250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005254:	0150      	lsls	r0, r2, #5
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4641      	mov	r1, r8
 800525c:	1a51      	subs	r1, r2, r1
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	4649      	mov	r1, r9
 8005262:	eb63 0301 	sbc.w	r3, r3, r1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005274:	4659      	mov	r1, fp
 8005276:	018b      	lsls	r3, r1, #6
 8005278:	4651      	mov	r1, sl
 800527a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800527e:	4651      	mov	r1, sl
 8005280:	018a      	lsls	r2, r1, #6
 8005282:	4651      	mov	r1, sl
 8005284:	1a54      	subs	r4, r2, r1
 8005286:	4659      	mov	r1, fp
 8005288:	eb63 0501 	sbc.w	r5, r3, r1
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	00eb      	lsls	r3, r5, #3
 8005296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800529a:	00e2      	lsls	r2, r4, #3
 800529c:	4614      	mov	r4, r2
 800529e:	461d      	mov	r5, r3
 80052a0:	4643      	mov	r3, r8
 80052a2:	18e3      	adds	r3, r4, r3
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	464b      	mov	r3, r9
 80052a8:	eb45 0303 	adc.w	r3, r5, r3
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ba:	4629      	mov	r1, r5
 80052bc:	028b      	lsls	r3, r1, #10
 80052be:	4621      	mov	r1, r4
 80052c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052c4:	4621      	mov	r1, r4
 80052c6:	028a      	lsls	r2, r1, #10
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052d0:	2200      	movs	r2, #0
 80052d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80052d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052da:	f7fb fa9b 	bl	8000814 <__aeabi_uldivmod>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4613      	mov	r3, r2
 80052e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80052e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x458>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	0f1b      	lsrs	r3, r3, #28
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80052f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005306:	e003      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005308:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x45c>)
 800530a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800530e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005310:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005314:	4618      	mov	r0, r3
 8005316:	37b8      	adds	r7, #184	@ 0xb8
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	00f42400 	.word	0x00f42400

08005328 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e28d      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8083 	beq.w	800544e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005348:	4b94      	ldr	r3, [pc, #592]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b04      	cmp	r3, #4
 8005352:	d019      	beq.n	8005388 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005354:	4b91      	ldr	r3, [pc, #580]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800535c:	2b08      	cmp	r3, #8
 800535e:	d106      	bne.n	800536e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005360:	4b8e      	ldr	r3, [pc, #568]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800536c:	d00c      	beq.n	8005388 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800536e:	4b8b      	ldr	r3, [pc, #556]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005376:	2b0c      	cmp	r3, #12
 8005378:	d112      	bne.n	80053a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537a:	4b88      	ldr	r3, [pc, #544]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005386:	d10b      	bne.n	80053a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4b84      	ldr	r3, [pc, #528]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d05b      	beq.n	800544c <HAL_RCC_OscConfig+0x124>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d157      	bne.n	800544c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e25a      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCC_OscConfig+0x90>
 80053aa:	4b7c      	ldr	r3, [pc, #496]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7b      	ldr	r2, [pc, #492]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e01d      	b.n	80053f4 <HAL_RCC_OscConfig+0xcc>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0xb4>
 80053c2:	4b76      	ldr	r3, [pc, #472]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a75      	ldr	r2, [pc, #468]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b73      	ldr	r3, [pc, #460]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a72      	ldr	r2, [pc, #456]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0xcc>
 80053dc:	4b6f      	ldr	r3, [pc, #444]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a6e      	ldr	r2, [pc, #440]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4b6c      	ldr	r3, [pc, #432]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6b      	ldr	r2, [pc, #428]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80053ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d013      	beq.n	8005424 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fd fd36 	bl	8002e6c <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005404:	f7fd fd32 	bl	8002e6c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	@ 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e21f      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b61      	ldr	r3, [pc, #388]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0xdc>
 8005422:	e014      	b.n	800544e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fd fd22 	bl	8002e6c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800542c:	f7fd fd1e 	bl	8002e6c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b64      	cmp	r3, #100	@ 0x64
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e20b      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543e:	4b57      	ldr	r3, [pc, #348]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x104>
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d06f      	beq.n	800553a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800545a:	4b50      	ldr	r3, [pc, #320]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b00      	cmp	r3, #0
 8005464:	d017      	beq.n	8005496 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005466:	4b4d      	ldr	r3, [pc, #308]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800546e:	2b08      	cmp	r3, #8
 8005470:	d105      	bne.n	800547e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005472:	4b4a      	ldr	r3, [pc, #296]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800547e:	4b47      	ldr	r3, [pc, #284]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005486:	2b0c      	cmp	r3, #12
 8005488:	d11c      	bne.n	80054c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548a:	4b44      	ldr	r3, [pc, #272]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d116      	bne.n	80054c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005496:	4b41      	ldr	r3, [pc, #260]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_RCC_OscConfig+0x186>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e1d3      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ae:	4b3b      	ldr	r3, [pc, #236]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4937      	ldr	r1, [pc, #220]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c2:	e03a      	b.n	800553a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054cc:	4b34      	ldr	r3, [pc, #208]	@ (80055a0 <HAL_RCC_OscConfig+0x278>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d2:	f7fd fccb 	bl	8002e6c <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054da:	f7fd fcc7 	bl	8002e6c <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e1b4      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	4b2b      	ldr	r3, [pc, #172]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f8:	4b28      	ldr	r3, [pc, #160]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4925      	ldr	r1, [pc, #148]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]
 800550c:	e015      	b.n	800553a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800550e:	4b24      	ldr	r3, [pc, #144]	@ (80055a0 <HAL_RCC_OscConfig+0x278>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fd fcaa 	bl	8002e6c <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551c:	f7fd fca6 	bl	8002e6c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e193      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	4b1b      	ldr	r3, [pc, #108]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d036      	beq.n	80055b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554e:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <HAL_RCC_OscConfig+0x27c>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005554:	f7fd fc8a 	bl	8002e6c <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800555c:	f7fd fc86 	bl	8002e6c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e173      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <HAL_RCC_OscConfig+0x274>)
 8005570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x234>
 800557a:	e01b      	b.n	80055b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557c:	4b09      	ldr	r3, [pc, #36]	@ (80055a4 <HAL_RCC_OscConfig+0x27c>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005582:	f7fd fc73 	bl	8002e6c <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005588:	e00e      	b.n	80055a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558a:	f7fd fc6f 	bl	8002e6c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d907      	bls.n	80055a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e15c      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470000 	.word	0x42470000
 80055a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a8:	4b8a      	ldr	r3, [pc, #552]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80055aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1ea      	bne.n	800558a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8097 	beq.w	80056f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c6:	4b83      	ldr	r3, [pc, #524]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	4b7f      	ldr	r3, [pc, #508]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	4a7e      	ldr	r2, [pc, #504]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80055e2:	4b7c      	ldr	r3, [pc, #496]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b79      	ldr	r3, [pc, #484]	@ (80057d8 <HAL_RCC_OscConfig+0x4b0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d118      	bne.n	8005630 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fe:	4b76      	ldr	r3, [pc, #472]	@ (80057d8 <HAL_RCC_OscConfig+0x4b0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a75      	ldr	r2, [pc, #468]	@ (80057d8 <HAL_RCC_OscConfig+0x4b0>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560a:	f7fd fc2f 	bl	8002e6c <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005612:	f7fd fc2b 	bl	8002e6c <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e118      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005624:	4b6c      	ldr	r3, [pc, #432]	@ (80057d8 <HAL_RCC_OscConfig+0x4b0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d106      	bne.n	8005646 <HAL_RCC_OscConfig+0x31e>
 8005638:	4b66      	ldr	r3, [pc, #408]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563c:	4a65      	ldr	r2, [pc, #404]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	6713      	str	r3, [r2, #112]	@ 0x70
 8005644:	e01c      	b.n	8005680 <HAL_RCC_OscConfig+0x358>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b05      	cmp	r3, #5
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0x340>
 800564e:	4b61      	ldr	r3, [pc, #388]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	4a60      	ldr	r2, [pc, #384]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 8005654:	f043 0304 	orr.w	r3, r3, #4
 8005658:	6713      	str	r3, [r2, #112]	@ 0x70
 800565a:	4b5e      	ldr	r3, [pc, #376]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565e:	4a5d      	ldr	r2, [pc, #372]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	6713      	str	r3, [r2, #112]	@ 0x70
 8005666:	e00b      	b.n	8005680 <HAL_RCC_OscConfig+0x358>
 8005668:	4b5a      	ldr	r3, [pc, #360]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566c:	4a59      	ldr	r2, [pc, #356]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	6713      	str	r3, [r2, #112]	@ 0x70
 8005674:	4b57      	ldr	r3, [pc, #348]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	4a56      	ldr	r2, [pc, #344]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 800567a:	f023 0304 	bic.w	r3, r3, #4
 800567e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fd fbf0 	bl	8002e6c <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568e:	e00a      	b.n	80056a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fd fbec 	bl	8002e6c <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0d7      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a6:	4b4b      	ldr	r3, [pc, #300]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0ee      	beq.n	8005690 <HAL_RCC_OscConfig+0x368>
 80056b2:	e014      	b.n	80056de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fd fbda 	bl	8002e6c <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fd fbd6 	bl	8002e6c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0c1      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d2:	4b40      	ldr	r3, [pc, #256]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ee      	bne.n	80056bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d105      	bne.n	80056f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e4:	4b3b      	ldr	r3, [pc, #236]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	4a3a      	ldr	r2, [pc, #232]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80056ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80ad 	beq.w	8005854 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056fa:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b08      	cmp	r3, #8
 8005704:	d060      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d145      	bne.n	800579a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570e:	4b33      	ldr	r3, [pc, #204]	@ (80057dc <HAL_RCC_OscConfig+0x4b4>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fd fbaa 	bl	8002e6c <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800571c:	f7fd fba6 	bl	8002e6c <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e093      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	4b29      	ldr	r3, [pc, #164]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	019b      	lsls	r3, r3, #6
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	071b      	lsls	r3, r3, #28
 8005766:	491b      	ldr	r1, [pc, #108]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800576c:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <HAL_RCC_OscConfig+0x4b4>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fd fb7b 	bl	8002e6c <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577a:	f7fd fb77 	bl	8002e6c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e064      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578c:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x452>
 8005798:	e05c      	b.n	8005854 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579a:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <HAL_RCC_OscConfig+0x4b4>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fd fb64 	bl	8002e6c <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fd fb60 	bl	8002e6c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e04d      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <HAL_RCC_OscConfig+0x4ac>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x480>
 80057c6:	e045      	b.n	8005854 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e040      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40007000 	.word	0x40007000
 80057dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005860 <HAL_RCC_OscConfig+0x538>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d030      	beq.n	8005850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d129      	bne.n	8005850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d122      	bne.n	8005850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	4293      	cmp	r3, r2
 800581a:	d119      	bne.n	8005850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	3b01      	subs	r3, #1
 800582a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d10f      	bne.n	8005850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d107      	bne.n	8005850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40023800 	.word	0x40023800

08005864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e07b      	b.n	800596e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005886:	d009      	beq.n	800589c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	61da      	str	r2, [r3, #28]
 800588e:	e005      	b.n	800589c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc fffa 	bl	80028b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005920:	ea42 0103 	orr.w	r1, r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	f003 0104 	and.w	r1, r3, #4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	f003 0210 	and.w	r2, r3, #16
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800595c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e01a      	b.n	80059be <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fd f859 	bl	8002a58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_SPI_TransmitReceive_IT+0x20>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e075      	b.n	8005ad4 <HAL_SPI_TransmitReceive_IT+0x10c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059f6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059fe:	7dbb      	ldrb	r3, [r7, #22]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d00d      	beq.n	8005a20 <HAL_SPI_TransmitReceive_IT+0x58>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a0a:	d106      	bne.n	8005a1a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <HAL_SPI_TransmitReceive_IT+0x52>
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d002      	beq.n	8005a20 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a1e:	e054      	b.n	8005aca <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005a2c:	887b      	ldrh	r3, [r7, #2]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a36:	e048      	b.n	8005aca <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d003      	beq.n	8005a4c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2205      	movs	r2, #5
 8005a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	887a      	ldrh	r2, [r7, #2]
 8005a62:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d006      	beq.n	8005a8c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a17      	ldr	r2, [pc, #92]	@ (8005ae0 <HAL_SPI_TransmitReceive_IT+0x118>)
 8005a82:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a17      	ldr	r2, [pc, #92]	@ (8005ae4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005a88:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a8a:	e005      	b.n	8005a98 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ae8 <HAL_SPI_TransmitReceive_IT+0x120>)
 8005a90:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a15      	ldr	r2, [pc, #84]	@ (8005aec <HAL_SPI_TransmitReceive_IT+0x124>)
 8005a96:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab2:	2b40      	cmp	r3, #64	@ 0x40
 8005ab4:	d008      	beq.n	8005ac8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e000      	b.n	8005aca <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005ac8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	08005fc9 	.word	0x08005fc9
 8005ae4:	08006029 	.word	0x08006029
 8005ae8:	08005f05 	.word	0x08005f05
 8005aec:	08005f69 	.word	0x08005f69

08005af0 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005afc:	4b6e      	ldr	r3, [pc, #440]	@ (8005cb8 <HAL_SPI_Abort+0x1c8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a6e      	ldr	r2, [pc, #440]	@ (8005cbc <HAL_SPI_Abort+0x1cc>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	0a5b      	lsrs	r3, r3, #9
 8005b08:	2264      	movs	r2, #100	@ 0x64
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0220 	bic.w	r2, r2, #32
 8005b22:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2e:	2b80      	cmp	r3, #128	@ 0x80
 8005b30:	d117      	bne.n	8005b62 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a62      	ldr	r2, [pc, #392]	@ (8005cc0 <HAL_SPI_Abort+0x1d0>)
 8005b36:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005b4a:	e008      	b.n	8005b5e <HAL_SPI_Abort+0x6e>
      }
      count--;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b07      	cmp	r3, #7
 8005b5c:	d1ec      	bne.n	8005b38 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6c:	2b40      	cmp	r3, #64	@ 0x40
 8005b6e:	d117      	bne.n	8005ba0 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a54      	ldr	r2, [pc, #336]	@ (8005cc4 <HAL_SPI_Abort+0x1d4>)
 8005b74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005b88:	e008      	b.n	8005b9c <HAL_SPI_Abort+0xac>
      }
      count--;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	d1ec      	bne.n	8005b76 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d12e      	bne.n	8005c0c <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02a      	beq.n	8005c0c <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bba:	2200      	movs	r2, #0
 8005bbc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fab6 	bl	8004134 <HAL_DMA_Abort>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2240      	movs	r2, #64	@ 0x40
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0202 	bic.w	r2, r2, #2
 8005be2:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	655a      	str	r2, [r3, #84]	@ 0x54
          break;
 8005bf6:	e009      	b.n	8005c0c <HAL_SPI_Abort+0x11c>
        }
        count--;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0eb      	beq.n	8005be4 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d122      	bne.n	8005c60 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01e      	beq.n	8005c60 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c26:	2200      	movs	r2, #0
 8005c28:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fa80 	bl	8004134 <HAL_DMA_Abort>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2240      	movs	r2, #64	@ 0x40
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c4e:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d102      	bne.n	8005c7a <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e002      	b.n	8005c80 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return errorcode;
 8005cac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000014 	.word	0x20000014
 8005cbc:	057619f1 	.word	0x057619f1
 8005cc0:	08006395 	.word	0x08006395
 8005cc4:	08006305 	.word	0x08006305

08005cc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10e      	bne.n	8005d08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
    return;
 8005d06:	e0ce      	b.n	8005ea6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_SPI_IRQHandler+0x5e>
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
    return;
 8005d24:	e0bf      	b.n	8005ea6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <HAL_SPI_IRQHandler+0x7e>
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d105      	bne.n	8005d46 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80b0 	beq.w	8005ea6 <HAL_SPI_IRQHandler+0x1de>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80aa 	beq.w	8005ea6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d023      	beq.n	8005da4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d011      	beq.n	8005d8c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6c:	f043 0204 	orr.w	r2, r3, #4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	e00b      	b.n	8005da4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	693b      	ldr	r3, [r7, #16]
        return;
 8005da2:	e080      	b.n	8005ea6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d014      	beq.n	8005dd8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de6:	f043 0208 	orr.w	r2, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d04f      	beq.n	8005ea4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e12:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d104      	bne.n	8005e30 <HAL_SPI_IRQHandler+0x168>
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d034      	beq.n	8005e9a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0203 	bic.w	r2, r2, #3
 8005e3e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d011      	beq.n	8005e6c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4c:	4a17      	ldr	r2, [pc, #92]	@ (8005eac <HAL_SPI_IRQHandler+0x1e4>)
 8005e4e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe f9dd 	bl	8004214 <HAL_DMA_Abort_IT>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d016      	beq.n	8005ea2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e78:	4a0c      	ldr	r2, [pc, #48]	@ (8005eac <HAL_SPI_IRQHandler+0x1e4>)
 8005e7a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fe f9c7 	bl	8004214 <HAL_DMA_Abort_IT>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005e98:	e003      	b.n	8005ea2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fb f816 	bl	8000ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ea0:	e000      	b.n	8005ea4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005ea2:	bf00      	nop
    return;
 8005ea4:	bf00      	nop
  }
}
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08005edd 	.word	0x08005edd

08005eb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7fa ffe8 	bl	8000ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f103 020c 	add.w	r2, r3, #12
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10f      	bne.n	8005f60 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f4e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f95e 	bl	800621c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10f      	bne.n	8005fc0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f92e 	bl	800621c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe2:	1c9a      	adds	r2, r3, #2
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10f      	bne.n	8006020 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800600e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8fe 	bl	800621c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006040:	1c9a      	adds	r2, r3, #2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800606c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f8cf 	bl	800621c <SPI_CloseRxTx_ISR>
    }
  }
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006098:	f7fc fee8 	bl	8002e6c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a8:	f7fc fee0 	bl	8002e6c <HAL_GetTick>
 80060ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ae:	4b39      	ldr	r3, [pc, #228]	@ (8006194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	015b      	lsls	r3, r3, #5
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060be:	e054      	b.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d050      	beq.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c8:	f7fc fed0 	bl	8002e6c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d902      	bls.n	80060de <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13d      	bne.n	800615a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f6:	d111      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006100:	d004      	beq.n	800610c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610a:	d107      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800611a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d10f      	bne.n	8006146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e017      	b.n	800618a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3b01      	subs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d19b      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000014 	.word	0x20000014

08006198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006214 <SPI_EndRxTxTransaction+0x7c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006218 <SPI_EndRxTxTransaction+0x80>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	0d5b      	lsrs	r3, r3, #21
 80061b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061c2:	d112      	bne.n	80061ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2180      	movs	r1, #128	@ 0x80
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff ff5a 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00f      	b.n	800620a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006200:	2b80      	cmp	r3, #128	@ 0x80
 8006202:	d0f2      	beq.n	80061ea <SPI_EndRxTxTransaction+0x52>
 8006204:	e000      	b.n	8006208 <SPI_EndRxTxTransaction+0x70>
        break;
 8006206:	bf00      	nop
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000014 	.word	0x20000014
 8006218:	165e9f81 	.word	0x165e9f81

0800621c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006224:	4b35      	ldr	r3, [pc, #212]	@ (80062fc <SPI_CloseRxTx_ISR+0xe0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a35      	ldr	r2, [pc, #212]	@ (8006300 <SPI_CloseRxTx_ISR+0xe4>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	0a5b      	lsrs	r3, r3, #9
 8006230:	2264      	movs	r2, #100	@ 0x64
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006238:	f7fc fe18 	bl	8002e6c <HAL_GetTick>
 800623c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0220 	bic.w	r2, r2, #32
 800624c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006260:	e009      	b.n	8006276 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	3b01      	subs	r3, #1
 8006266:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0eb      	beq.n	800624e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	2164      	movs	r1, #100	@ 0x64
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff ff8c 	bl	8006198 <SPI_EndRxTxTransaction>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d115      	bne.n	80062e4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d107      	bne.n	80062d4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fdef 	bl	8005eb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80062d2:	e00e      	b.n	80062f2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7fa fd67 	bl	8000db0 <HAL_SPI_TxRxCpltCallback>
}
 80062e2:	e006      	b.n	80062f2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fa fded 	bl	8000ecc <HAL_SPI_ErrorCallback>
}
 80062f2:	bf00      	nop
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000014 	.word	0x20000014
 8006300:	057619f1 	.word	0x057619f1

08006304 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006310:	4b1e      	ldr	r3, [pc, #120]	@ (800638c <SPI_AbortRx_ISR+0x88>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1e      	ldr	r2, [pc, #120]	@ (8006390 <SPI_AbortRx_ISR+0x8c>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	0a5b      	lsrs	r3, r3, #9
 800631c:	2264      	movs	r2, #100	@ 0x64
 800631e:	fb02 f303 	mul.w	r3, r2, r3
 8006322:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006336:	e009      	b.n	800634c <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	3b01      	subs	r3, #1
 800633c:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0eb      	beq.n	8006324 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800635a:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800636a:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006374:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2207      	movs	r2, #7
 800637a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000014 	.word	0x20000014
 8006390:	057619f1 	.word	0x057619f1

08006394 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063aa:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ba:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2207      	movs	r2, #7
 80063c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e041      	b.n	8006466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fc fb5e 	bl	8002ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f000 f95e 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d001      	beq.n	8006488 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e046      	b.n	8006516 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a23      	ldr	r2, [pc, #140]	@ (8006524 <HAL_TIM_Base_Start+0xb4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d022      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a2:	d01d      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006528 <HAL_TIM_Base_Start+0xb8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d018      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	@ (800652c <HAL_TIM_Base_Start+0xbc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006530 <HAL_TIM_Base_Start+0xc0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006534 <HAL_TIM_Base_Start+0xc4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a19      	ldr	r2, [pc, #100]	@ (8006538 <HAL_TIM_Base_Start+0xc8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_TIM_Base_Start+0x70>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	@ (800653c <HAL_TIM_Base_Start+0xcc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d111      	bne.n	8006504 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b06      	cmp	r3, #6
 80064f0:	d010      	beq.n	8006514 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006502:	e007      	b.n	8006514 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40010000 	.word	0x40010000
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800
 8006530:	40000c00 	.word	0x40000c00
 8006534:	40010400 	.word	0x40010400
 8006538:	40014000 	.word	0x40014000
 800653c:	40001800 	.word	0x40001800

08006540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIM_ConfigClockSource+0x1c>
 8006558:	2302      	movs	r3, #2
 800655a:	e0b4      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x186>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800657a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006594:	d03e      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0xd4>
 8006596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800659a:	f200 8087 	bhi.w	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a2:	f000 8086 	beq.w	80066b2 <HAL_TIM_ConfigClockSource+0x172>
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065aa:	d87f      	bhi.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 80065ac:	2b70      	cmp	r3, #112	@ 0x70
 80065ae:	d01a      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0xa6>
 80065b0:	2b70      	cmp	r3, #112	@ 0x70
 80065b2:	d87b      	bhi.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 80065b4:	2b60      	cmp	r3, #96	@ 0x60
 80065b6:	d050      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x11a>
 80065b8:	2b60      	cmp	r3, #96	@ 0x60
 80065ba:	d877      	bhi.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 80065bc:	2b50      	cmp	r3, #80	@ 0x50
 80065be:	d03c      	beq.n	800663a <HAL_TIM_ConfigClockSource+0xfa>
 80065c0:	2b50      	cmp	r3, #80	@ 0x50
 80065c2:	d873      	bhi.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	2b40      	cmp	r3, #64	@ 0x40
 80065c6:	d058      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x13a>
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	d86f      	bhi.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b30      	cmp	r3, #48	@ 0x30
 80065ce:	d064      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x15a>
 80065d0:	2b30      	cmp	r3, #48	@ 0x30
 80065d2:	d86b      	bhi.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d060      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x15a>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d867      	bhi.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d05c      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x15a>
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d05a      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x15a>
 80065e4:	e062      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6899      	ldr	r1, [r3, #8]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f000 f985 	bl	8006904 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	609a      	str	r2, [r3, #8]
      break;
 8006612:	e04f      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6899      	ldr	r1, [r3, #8]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f000 f96e 	bl	8006904 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006636:	609a      	str	r2, [r3, #8]
      break;
 8006638:	e03c      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	461a      	mov	r2, r3
 8006648:	f000 f8e2 	bl	8006810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2150      	movs	r1, #80	@ 0x50
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f93b 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006658:	e02c      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	461a      	mov	r2, r3
 8006668:	f000 f901 	bl	800686e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2160      	movs	r1, #96	@ 0x60
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f92b 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006678:	e01c      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	461a      	mov	r2, r3
 8006688:	f000 f8c2 	bl	8006810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2140      	movs	r1, #64	@ 0x40
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f91b 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006698:	e00c      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f000 f912 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 80066aa:	e003      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	73fb      	strb	r3, [r7, #15]
      break;
 80066b0:	e000      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a40      	ldr	r2, [pc, #256]	@ (80067e4 <TIM_Base_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ee:	d00f      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a3d      	ldr	r2, [pc, #244]	@ (80067e8 <TIM_Base_SetConfig+0x118>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00b      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a3c      	ldr	r2, [pc, #240]	@ (80067ec <TIM_Base_SetConfig+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3b      	ldr	r2, [pc, #236]	@ (80067f0 <TIM_Base_SetConfig+0x120>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3a      	ldr	r2, [pc, #232]	@ (80067f4 <TIM_Base_SetConfig+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d108      	bne.n	8006722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2f      	ldr	r2, [pc, #188]	@ (80067e4 <TIM_Base_SetConfig+0x114>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006730:	d027      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2c      	ldr	r2, [pc, #176]	@ (80067e8 <TIM_Base_SetConfig+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d023      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2b      	ldr	r2, [pc, #172]	@ (80067ec <TIM_Base_SetConfig+0x11c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2a      	ldr	r2, [pc, #168]	@ (80067f0 <TIM_Base_SetConfig+0x120>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a29      	ldr	r2, [pc, #164]	@ (80067f4 <TIM_Base_SetConfig+0x124>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d017      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a28      	ldr	r2, [pc, #160]	@ (80067f8 <TIM_Base_SetConfig+0x128>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a27      	ldr	r2, [pc, #156]	@ (80067fc <TIM_Base_SetConfig+0x12c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a26      	ldr	r2, [pc, #152]	@ (8006800 <TIM_Base_SetConfig+0x130>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a25      	ldr	r2, [pc, #148]	@ (8006804 <TIM_Base_SetConfig+0x134>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a24      	ldr	r2, [pc, #144]	@ (8006808 <TIM_Base_SetConfig+0x138>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a23      	ldr	r2, [pc, #140]	@ (800680c <TIM_Base_SetConfig+0x13c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0a      	ldr	r2, [pc, #40]	@ (80067e4 <TIM_Base_SetConfig+0x114>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0c      	ldr	r2, [pc, #48]	@ (80067f4 <TIM_Base_SetConfig+0x124>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	40001800 	.word	0x40001800
 8006808:	40001c00 	.word	0x40001c00
 800680c:	40002000 	.word	0x40002000

08006810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800683a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 030a 	bic.w	r3, r3, #10
 800684c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0210 	bic.w	r2, r3, #16
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f043 0307 	orr.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	609a      	str	r2, [r3, #8]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800691e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	431a      	orrs	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006958:	2302      	movs	r3, #2
 800695a:	e05a      	b.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a21      	ldr	r2, [pc, #132]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a8:	d01d      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a18      	ldr	r2, [pc, #96]	@ (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a17      	ldr	r2, [pc, #92]	@ (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a15      	ldr	r2, [pc, #84]	@ (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d10c      	bne.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40010000 	.word	0x40010000
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40010400 	.word	0x40010400
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40001800 	.word	0x40001800

08006a3c <std>:
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	4604      	mov	r4, r0
 8006a42:	e9c0 3300 	strd	r3, r3, [r0]
 8006a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a4a:	6083      	str	r3, [r0, #8]
 8006a4c:	8181      	strh	r1, [r0, #12]
 8006a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a50:	81c2      	strh	r2, [r0, #14]
 8006a52:	6183      	str	r3, [r0, #24]
 8006a54:	4619      	mov	r1, r3
 8006a56:	2208      	movs	r2, #8
 8006a58:	305c      	adds	r0, #92	@ 0x5c
 8006a5a:	f000 f9e7 	bl	8006e2c <memset>
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x58>)
 8006a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <std+0x5c>)
 8006a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <std+0x60>)
 8006a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <std+0x64>)
 8006a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa4 <std+0x68>)
 8006a70:	6224      	str	r4, [r4, #32]
 8006a72:	429c      	cmp	r4, r3
 8006a74:	d006      	beq.n	8006a84 <std+0x48>
 8006a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a7a:	4294      	cmp	r4, r2
 8006a7c:	d002      	beq.n	8006a84 <std+0x48>
 8006a7e:	33d0      	adds	r3, #208	@ 0xd0
 8006a80:	429c      	cmp	r4, r3
 8006a82:	d105      	bne.n	8006a90 <std+0x54>
 8006a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a8c:	f000 ba46 	b.w	8006f1c <__retarget_lock_init_recursive>
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	bf00      	nop
 8006a94:	08006c7d 	.word	0x08006c7d
 8006a98:	08006c9f 	.word	0x08006c9f
 8006a9c:	08006cd7 	.word	0x08006cd7
 8006aa0:	08006cfb 	.word	0x08006cfb
 8006aa4:	20000574 	.word	0x20000574

08006aa8 <stdio_exit_handler>:
 8006aa8:	4a02      	ldr	r2, [pc, #8]	@ (8006ab4 <stdio_exit_handler+0xc>)
 8006aaa:	4903      	ldr	r1, [pc, #12]	@ (8006ab8 <stdio_exit_handler+0x10>)
 8006aac:	4803      	ldr	r0, [pc, #12]	@ (8006abc <stdio_exit_handler+0x14>)
 8006aae:	f000 b869 	b.w	8006b84 <_fwalk_sglue>
 8006ab2:	bf00      	nop
 8006ab4:	20000020 	.word	0x20000020
 8006ab8:	0800721d 	.word	0x0800721d
 8006abc:	20000030 	.word	0x20000030

08006ac0 <cleanup_stdio>:
 8006ac0:	6841      	ldr	r1, [r0, #4]
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8006af4 <cleanup_stdio+0x34>)
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	d001      	beq.n	8006ad0 <cleanup_stdio+0x10>
 8006acc:	f000 fba6 	bl	800721c <_fflush_r>
 8006ad0:	68a1      	ldr	r1, [r4, #8]
 8006ad2:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <cleanup_stdio+0x38>)
 8006ad4:	4299      	cmp	r1, r3
 8006ad6:	d002      	beq.n	8006ade <cleanup_stdio+0x1e>
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fb9f 	bl	800721c <_fflush_r>
 8006ade:	68e1      	ldr	r1, [r4, #12]
 8006ae0:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <cleanup_stdio+0x3c>)
 8006ae2:	4299      	cmp	r1, r3
 8006ae4:	d004      	beq.n	8006af0 <cleanup_stdio+0x30>
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aec:	f000 bb96 	b.w	800721c <_fflush_r>
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	bf00      	nop
 8006af4:	20000574 	.word	0x20000574
 8006af8:	200005dc 	.word	0x200005dc
 8006afc:	20000644 	.word	0x20000644

08006b00 <global_stdio_init.part.0>:
 8006b00:	b510      	push	{r4, lr}
 8006b02:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <global_stdio_init.part.0+0x30>)
 8006b04:	4c0b      	ldr	r4, [pc, #44]	@ (8006b34 <global_stdio_init.part.0+0x34>)
 8006b06:	4a0c      	ldr	r2, [pc, #48]	@ (8006b38 <global_stdio_init.part.0+0x38>)
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2104      	movs	r1, #4
 8006b10:	f7ff ff94 	bl	8006a3c <std>
 8006b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b18:	2201      	movs	r2, #1
 8006b1a:	2109      	movs	r1, #9
 8006b1c:	f7ff ff8e 	bl	8006a3c <std>
 8006b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b24:	2202      	movs	r2, #2
 8006b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b2a:	2112      	movs	r1, #18
 8006b2c:	f7ff bf86 	b.w	8006a3c <std>
 8006b30:	200006ac 	.word	0x200006ac
 8006b34:	20000574 	.word	0x20000574
 8006b38:	08006aa9 	.word	0x08006aa9

08006b3c <__sfp_lock_acquire>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__sfp_lock_acquire+0x8>)
 8006b3e:	f000 b9ee 	b.w	8006f1e <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	200006b5 	.word	0x200006b5

08006b48 <__sfp_lock_release>:
 8006b48:	4801      	ldr	r0, [pc, #4]	@ (8006b50 <__sfp_lock_release+0x8>)
 8006b4a:	f000 b9e9 	b.w	8006f20 <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	200006b5 	.word	0x200006b5

08006b54 <__sinit>:
 8006b54:	b510      	push	{r4, lr}
 8006b56:	4604      	mov	r4, r0
 8006b58:	f7ff fff0 	bl	8006b3c <__sfp_lock_acquire>
 8006b5c:	6a23      	ldr	r3, [r4, #32]
 8006b5e:	b11b      	cbz	r3, 8006b68 <__sinit+0x14>
 8006b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b64:	f7ff bff0 	b.w	8006b48 <__sfp_lock_release>
 8006b68:	4b04      	ldr	r3, [pc, #16]	@ (8006b7c <__sinit+0x28>)
 8006b6a:	6223      	str	r3, [r4, #32]
 8006b6c:	4b04      	ldr	r3, [pc, #16]	@ (8006b80 <__sinit+0x2c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f5      	bne.n	8006b60 <__sinit+0xc>
 8006b74:	f7ff ffc4 	bl	8006b00 <global_stdio_init.part.0>
 8006b78:	e7f2      	b.n	8006b60 <__sinit+0xc>
 8006b7a:	bf00      	nop
 8006b7c:	08006ac1 	.word	0x08006ac1
 8006b80:	200006ac 	.word	0x200006ac

08006b84 <_fwalk_sglue>:
 8006b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b88:	4607      	mov	r7, r0
 8006b8a:	4688      	mov	r8, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	2600      	movs	r6, #0
 8006b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b94:	f1b9 0901 	subs.w	r9, r9, #1
 8006b98:	d505      	bpl.n	8006ba6 <_fwalk_sglue+0x22>
 8006b9a:	6824      	ldr	r4, [r4, #0]
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	d1f7      	bne.n	8006b90 <_fwalk_sglue+0xc>
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	89ab      	ldrh	r3, [r5, #12]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d907      	bls.n	8006bbc <_fwalk_sglue+0x38>
 8006bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	d003      	beq.n	8006bbc <_fwalk_sglue+0x38>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	47c0      	blx	r8
 8006bba:	4306      	orrs	r6, r0
 8006bbc:	3568      	adds	r5, #104	@ 0x68
 8006bbe:	e7e9      	b.n	8006b94 <_fwalk_sglue+0x10>

08006bc0 <_puts_r>:
 8006bc0:	6a03      	ldr	r3, [r0, #32]
 8006bc2:	b570      	push	{r4, r5, r6, lr}
 8006bc4:	6884      	ldr	r4, [r0, #8]
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	460e      	mov	r6, r1
 8006bca:	b90b      	cbnz	r3, 8006bd0 <_puts_r+0x10>
 8006bcc:	f7ff ffc2 	bl	8006b54 <__sinit>
 8006bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d405      	bmi.n	8006be2 <_puts_r+0x22>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	0598      	lsls	r0, r3, #22
 8006bda:	d402      	bmi.n	8006be2 <_puts_r+0x22>
 8006bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bde:	f000 f99e 	bl	8006f1e <__retarget_lock_acquire_recursive>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	0719      	lsls	r1, r3, #28
 8006be6:	d502      	bpl.n	8006bee <_puts_r+0x2e>
 8006be8:	6923      	ldr	r3, [r4, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d135      	bne.n	8006c5a <_puts_r+0x9a>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f8c5 	bl	8006d80 <__swsetup_r>
 8006bf6:	b380      	cbz	r0, 8006c5a <_puts_r+0x9a>
 8006bf8:	f04f 35ff 	mov.w	r5, #4294967295
 8006bfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bfe:	07da      	lsls	r2, r3, #31
 8006c00:	d405      	bmi.n	8006c0e <_puts_r+0x4e>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_puts_r+0x4e>
 8006c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c0a:	f000 f989 	bl	8006f20 <__retarget_lock_release_recursive>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	bd70      	pop	{r4, r5, r6, pc}
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da04      	bge.n	8006c20 <_puts_r+0x60>
 8006c16:	69a2      	ldr	r2, [r4, #24]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	dc17      	bgt.n	8006c4c <_puts_r+0x8c>
 8006c1c:	290a      	cmp	r1, #10
 8006c1e:	d015      	beq.n	8006c4c <_puts_r+0x8c>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	6022      	str	r2, [r4, #0]
 8006c26:	7019      	strb	r1, [r3, #0]
 8006c28:	68a3      	ldr	r3, [r4, #8]
 8006c2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	60a3      	str	r3, [r4, #8]
 8006c32:	2900      	cmp	r1, #0
 8006c34:	d1ed      	bne.n	8006c12 <_puts_r+0x52>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	da11      	bge.n	8006c5e <_puts_r+0x9e>
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	210a      	movs	r1, #10
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f85f 	bl	8006d02 <__swbuf_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d0d7      	beq.n	8006bf8 <_puts_r+0x38>
 8006c48:	250a      	movs	r5, #10
 8006c4a:	e7d7      	b.n	8006bfc <_puts_r+0x3c>
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 f857 	bl	8006d02 <__swbuf_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d1e7      	bne.n	8006c28 <_puts_r+0x68>
 8006c58:	e7ce      	b.n	8006bf8 <_puts_r+0x38>
 8006c5a:	3e01      	subs	r6, #1
 8006c5c:	e7e4      	b.n	8006c28 <_puts_r+0x68>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	6022      	str	r2, [r4, #0]
 8006c64:	220a      	movs	r2, #10
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e7ee      	b.n	8006c48 <_puts_r+0x88>
	...

08006c6c <puts>:
 8006c6c:	4b02      	ldr	r3, [pc, #8]	@ (8006c78 <puts+0xc>)
 8006c6e:	4601      	mov	r1, r0
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	f7ff bfa5 	b.w	8006bc0 <_puts_r>
 8006c76:	bf00      	nop
 8006c78:	2000002c 	.word	0x2000002c

08006c7c <__sread>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	f000 f8fc 	bl	8006e80 <_read_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	bfab      	itete	ge
 8006c8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c90:	181b      	addge	r3, r3, r0
 8006c92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c96:	bfac      	ite	ge
 8006c98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c9a:	81a3      	strhlt	r3, [r4, #12]
 8006c9c:	bd10      	pop	{r4, pc}

08006c9e <__swrite>:
 8006c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	461f      	mov	r7, r3
 8006ca4:	898b      	ldrh	r3, [r1, #12]
 8006ca6:	05db      	lsls	r3, r3, #23
 8006ca8:	4605      	mov	r5, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	4616      	mov	r6, r2
 8006cae:	d505      	bpl.n	8006cbc <__swrite+0x1e>
 8006cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f000 f8d0 	bl	8006e5c <_lseek_r>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	4632      	mov	r2, r6
 8006cca:	463b      	mov	r3, r7
 8006ccc:	4628      	mov	r0, r5
 8006cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	f000 b8e7 	b.w	8006ea4 <_write_r>

08006cd6 <__sseek>:
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	460c      	mov	r4, r1
 8006cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cde:	f000 f8bd 	bl	8006e5c <_lseek_r>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	bf15      	itete	ne
 8006ce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cf2:	81a3      	strheq	r3, [r4, #12]
 8006cf4:	bf18      	it	ne
 8006cf6:	81a3      	strhne	r3, [r4, #12]
 8006cf8:	bd10      	pop	{r4, pc}

08006cfa <__sclose>:
 8006cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfe:	f000 b89d 	b.w	8006e3c <_close_r>

08006d02 <__swbuf_r>:
 8006d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d04:	460e      	mov	r6, r1
 8006d06:	4614      	mov	r4, r2
 8006d08:	4605      	mov	r5, r0
 8006d0a:	b118      	cbz	r0, 8006d14 <__swbuf_r+0x12>
 8006d0c:	6a03      	ldr	r3, [r0, #32]
 8006d0e:	b90b      	cbnz	r3, 8006d14 <__swbuf_r+0x12>
 8006d10:	f7ff ff20 	bl	8006b54 <__sinit>
 8006d14:	69a3      	ldr	r3, [r4, #24]
 8006d16:	60a3      	str	r3, [r4, #8]
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	071a      	lsls	r2, r3, #28
 8006d1c:	d501      	bpl.n	8006d22 <__swbuf_r+0x20>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	b943      	cbnz	r3, 8006d34 <__swbuf_r+0x32>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 f82b 	bl	8006d80 <__swsetup_r>
 8006d2a:	b118      	cbz	r0, 8006d34 <__swbuf_r+0x32>
 8006d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d30:	4638      	mov	r0, r7
 8006d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	6922      	ldr	r2, [r4, #16]
 8006d38:	1a98      	subs	r0, r3, r2
 8006d3a:	6963      	ldr	r3, [r4, #20]
 8006d3c:	b2f6      	uxtb	r6, r6
 8006d3e:	4283      	cmp	r3, r0
 8006d40:	4637      	mov	r7, r6
 8006d42:	dc05      	bgt.n	8006d50 <__swbuf_r+0x4e>
 8006d44:	4621      	mov	r1, r4
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 fa68 	bl	800721c <_fflush_r>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d1ed      	bne.n	8006d2c <__swbuf_r+0x2a>
 8006d50:	68a3      	ldr	r3, [r4, #8]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	6022      	str	r2, [r4, #0]
 8006d5c:	701e      	strb	r6, [r3, #0]
 8006d5e:	6962      	ldr	r2, [r4, #20]
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d004      	beq.n	8006d70 <__swbuf_r+0x6e>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	07db      	lsls	r3, r3, #31
 8006d6a:	d5e1      	bpl.n	8006d30 <__swbuf_r+0x2e>
 8006d6c:	2e0a      	cmp	r6, #10
 8006d6e:	d1df      	bne.n	8006d30 <__swbuf_r+0x2e>
 8006d70:	4621      	mov	r1, r4
 8006d72:	4628      	mov	r0, r5
 8006d74:	f000 fa52 	bl	800721c <_fflush_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d0d9      	beq.n	8006d30 <__swbuf_r+0x2e>
 8006d7c:	e7d6      	b.n	8006d2c <__swbuf_r+0x2a>
	...

08006d80 <__swsetup_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4b29      	ldr	r3, [pc, #164]	@ (8006e28 <__swsetup_r+0xa8>)
 8006d84:	4605      	mov	r5, r0
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	460c      	mov	r4, r1
 8006d8a:	b118      	cbz	r0, 8006d94 <__swsetup_r+0x14>
 8006d8c:	6a03      	ldr	r3, [r0, #32]
 8006d8e:	b90b      	cbnz	r3, 8006d94 <__swsetup_r+0x14>
 8006d90:	f7ff fee0 	bl	8006b54 <__sinit>
 8006d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d98:	0719      	lsls	r1, r3, #28
 8006d9a:	d422      	bmi.n	8006de2 <__swsetup_r+0x62>
 8006d9c:	06da      	lsls	r2, r3, #27
 8006d9e:	d407      	bmi.n	8006db0 <__swsetup_r+0x30>
 8006da0:	2209      	movs	r2, #9
 8006da2:	602a      	str	r2, [r5, #0]
 8006da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	e033      	b.n	8006e18 <__swsetup_r+0x98>
 8006db0:	0758      	lsls	r0, r3, #29
 8006db2:	d512      	bpl.n	8006dda <__swsetup_r+0x5a>
 8006db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006db6:	b141      	cbz	r1, 8006dca <__swsetup_r+0x4a>
 8006db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	d002      	beq.n	8006dc6 <__swsetup_r+0x46>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 f8af 	bl	8006f24 <_free_r>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f043 0308 	orr.w	r3, r3, #8
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	b94b      	cbnz	r3, 8006dfa <__swsetup_r+0x7a>
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df0:	d003      	beq.n	8006dfa <__swsetup_r+0x7a>
 8006df2:	4621      	mov	r1, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 fa5f 	bl	80072b8 <__smakebuf_r>
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	f013 0201 	ands.w	r2, r3, #1
 8006e02:	d00a      	beq.n	8006e1a <__swsetup_r+0x9a>
 8006e04:	2200      	movs	r2, #0
 8006e06:	60a2      	str	r2, [r4, #8]
 8006e08:	6962      	ldr	r2, [r4, #20]
 8006e0a:	4252      	negs	r2, r2
 8006e0c:	61a2      	str	r2, [r4, #24]
 8006e0e:	6922      	ldr	r2, [r4, #16]
 8006e10:	b942      	cbnz	r2, 8006e24 <__swsetup_r+0xa4>
 8006e12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e16:	d1c5      	bne.n	8006da4 <__swsetup_r+0x24>
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	0799      	lsls	r1, r3, #30
 8006e1c:	bf58      	it	pl
 8006e1e:	6962      	ldrpl	r2, [r4, #20]
 8006e20:	60a2      	str	r2, [r4, #8]
 8006e22:	e7f4      	b.n	8006e0e <__swsetup_r+0x8e>
 8006e24:	2000      	movs	r0, #0
 8006e26:	e7f7      	b.n	8006e18 <__swsetup_r+0x98>
 8006e28:	2000002c 	.word	0x2000002c

08006e2c <memset>:
 8006e2c:	4402      	add	r2, r0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d100      	bne.n	8006e36 <memset+0xa>
 8006e34:	4770      	bx	lr
 8006e36:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3a:	e7f9      	b.n	8006e30 <memset+0x4>

08006e3c <_close_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d06      	ldr	r5, [pc, #24]	@ (8006e58 <_close_r+0x1c>)
 8006e40:	2300      	movs	r3, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f7fb ff03 	bl	8002c52 <_close>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_close_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_close_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	200006b0 	.word	0x200006b0

08006e5c <_lseek_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d07      	ldr	r5, [pc, #28]	@ (8006e7c <_lseek_r+0x20>)
 8006e60:	4604      	mov	r4, r0
 8006e62:	4608      	mov	r0, r1
 8006e64:	4611      	mov	r1, r2
 8006e66:	2200      	movs	r2, #0
 8006e68:	602a      	str	r2, [r5, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f7fb ff18 	bl	8002ca0 <_lseek>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_lseek_r+0x1e>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_lseek_r+0x1e>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	200006b0 	.word	0x200006b0

08006e80 <_read_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d07      	ldr	r5, [pc, #28]	@ (8006ea0 <_read_r+0x20>)
 8006e84:	4604      	mov	r4, r0
 8006e86:	4608      	mov	r0, r1
 8006e88:	4611      	mov	r1, r2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	602a      	str	r2, [r5, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f7fb fec2 	bl	8002c18 <_read>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_read_r+0x1e>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_read_r+0x1e>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	200006b0 	.word	0x200006b0

08006ea4 <_write_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d07      	ldr	r5, [pc, #28]	@ (8006ec4 <_write_r+0x20>)
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	4608      	mov	r0, r1
 8006eac:	4611      	mov	r1, r2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	602a      	str	r2, [r5, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f7fb f8f0 	bl	8002098 <_write>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_write_r+0x1e>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_write_r+0x1e>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	200006b0 	.word	0x200006b0

08006ec8 <__errno>:
 8006ec8:	4b01      	ldr	r3, [pc, #4]	@ (8006ed0 <__errno+0x8>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	2000002c 	.word	0x2000002c

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f0c <__libc_init_array+0x38>)
 8006ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f10 <__libc_init_array+0x3c>)
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8006f14 <__libc_init_array+0x40>)
 8006ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8006f18 <__libc_init_array+0x44>)
 8006ee8:	f000 faf0 	bl	80074cc <_init>
 8006eec:	1b64      	subs	r4, r4, r5
 8006eee:	10a4      	asrs	r4, r4, #2
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efc:	4798      	blx	r3
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f06:	4798      	blx	r3
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	08007524 	.word	0x08007524
 8006f10:	08007524 	.word	0x08007524
 8006f14:	08007524 	.word	0x08007524
 8006f18:	08007528 	.word	0x08007528

08006f1c <__retarget_lock_init_recursive>:
 8006f1c:	4770      	bx	lr

08006f1e <__retarget_lock_acquire_recursive>:
 8006f1e:	4770      	bx	lr

08006f20 <__retarget_lock_release_recursive>:
 8006f20:	4770      	bx	lr
	...

08006f24 <_free_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4605      	mov	r5, r0
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	d041      	beq.n	8006fb0 <_free_r+0x8c>
 8006f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f30:	1f0c      	subs	r4, r1, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bfb8      	it	lt
 8006f36:	18e4      	addlt	r4, r4, r3
 8006f38:	f000 f8e0 	bl	80070fc <__malloc_lock>
 8006f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb4 <_free_r+0x90>)
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	b933      	cbnz	r3, 8006f50 <_free_r+0x2c>
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	6014      	str	r4, [r2, #0]
 8006f46:	4628      	mov	r0, r5
 8006f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f4c:	f000 b8dc 	b.w	8007108 <__malloc_unlock>
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	d908      	bls.n	8006f66 <_free_r+0x42>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	1821      	adds	r1, r4, r0
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	bf01      	itttt	eq
 8006f5c:	6819      	ldreq	r1, [r3, #0]
 8006f5e:	685b      	ldreq	r3, [r3, #4]
 8006f60:	1809      	addeq	r1, r1, r0
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	e7ed      	b.n	8006f42 <_free_r+0x1e>
 8006f66:	461a      	mov	r2, r3
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	b10b      	cbz	r3, 8006f70 <_free_r+0x4c>
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	d9fa      	bls.n	8006f66 <_free_r+0x42>
 8006f70:	6811      	ldr	r1, [r2, #0]
 8006f72:	1850      	adds	r0, r2, r1
 8006f74:	42a0      	cmp	r0, r4
 8006f76:	d10b      	bne.n	8006f90 <_free_r+0x6c>
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	4401      	add	r1, r0
 8006f7c:	1850      	adds	r0, r2, r1
 8006f7e:	4283      	cmp	r3, r0
 8006f80:	6011      	str	r1, [r2, #0]
 8006f82:	d1e0      	bne.n	8006f46 <_free_r+0x22>
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	6053      	str	r3, [r2, #4]
 8006f8a:	4408      	add	r0, r1
 8006f8c:	6010      	str	r0, [r2, #0]
 8006f8e:	e7da      	b.n	8006f46 <_free_r+0x22>
 8006f90:	d902      	bls.n	8006f98 <_free_r+0x74>
 8006f92:	230c      	movs	r3, #12
 8006f94:	602b      	str	r3, [r5, #0]
 8006f96:	e7d6      	b.n	8006f46 <_free_r+0x22>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	1821      	adds	r1, r4, r0
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf04      	itt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	bf04      	itt	eq
 8006fa8:	1809      	addeq	r1, r1, r0
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	6054      	str	r4, [r2, #4]
 8006fae:	e7ca      	b.n	8006f46 <_free_r+0x22>
 8006fb0:	bd38      	pop	{r3, r4, r5, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200006bc 	.word	0x200006bc

08006fb8 <sbrk_aligned>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	4e0f      	ldr	r6, [pc, #60]	@ (8006ff8 <sbrk_aligned+0x40>)
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	6831      	ldr	r1, [r6, #0]
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	b911      	cbnz	r1, 8006fca <sbrk_aligned+0x12>
 8006fc4:	f000 f9d6 	bl	8007374 <_sbrk_r>
 8006fc8:	6030      	str	r0, [r6, #0]
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f9d1 	bl	8007374 <_sbrk_r>
 8006fd2:	1c43      	adds	r3, r0, #1
 8006fd4:	d103      	bne.n	8006fde <sbrk_aligned+0x26>
 8006fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8006fda:	4620      	mov	r0, r4
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d0f8      	beq.n	8006fda <sbrk_aligned+0x22>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 f9c2 	bl	8007374 <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d1f2      	bne.n	8006fda <sbrk_aligned+0x22>
 8006ff4:	e7ef      	b.n	8006fd6 <sbrk_aligned+0x1e>
 8006ff6:	bf00      	nop
 8006ff8:	200006b8 	.word	0x200006b8

08006ffc <_malloc_r>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	1ccd      	adds	r5, r1, #3
 8007002:	f025 0503 	bic.w	r5, r5, #3
 8007006:	3508      	adds	r5, #8
 8007008:	2d0c      	cmp	r5, #12
 800700a:	bf38      	it	cc
 800700c:	250c      	movcc	r5, #12
 800700e:	2d00      	cmp	r5, #0
 8007010:	4606      	mov	r6, r0
 8007012:	db01      	blt.n	8007018 <_malloc_r+0x1c>
 8007014:	42a9      	cmp	r1, r5
 8007016:	d904      	bls.n	8007022 <_malloc_r+0x26>
 8007018:	230c      	movs	r3, #12
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	2000      	movs	r0, #0
 800701e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070f8 <_malloc_r+0xfc>
 8007026:	f000 f869 	bl	80070fc <__malloc_lock>
 800702a:	f8d8 3000 	ldr.w	r3, [r8]
 800702e:	461c      	mov	r4, r3
 8007030:	bb44      	cbnz	r4, 8007084 <_malloc_r+0x88>
 8007032:	4629      	mov	r1, r5
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff ffbf 	bl	8006fb8 <sbrk_aligned>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	4604      	mov	r4, r0
 800703e:	d158      	bne.n	80070f2 <_malloc_r+0xf6>
 8007040:	f8d8 4000 	ldr.w	r4, [r8]
 8007044:	4627      	mov	r7, r4
 8007046:	2f00      	cmp	r7, #0
 8007048:	d143      	bne.n	80070d2 <_malloc_r+0xd6>
 800704a:	2c00      	cmp	r4, #0
 800704c:	d04b      	beq.n	80070e6 <_malloc_r+0xea>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	4639      	mov	r1, r7
 8007052:	4630      	mov	r0, r6
 8007054:	eb04 0903 	add.w	r9, r4, r3
 8007058:	f000 f98c 	bl	8007374 <_sbrk_r>
 800705c:	4581      	cmp	r9, r0
 800705e:	d142      	bne.n	80070e6 <_malloc_r+0xea>
 8007060:	6821      	ldr	r1, [r4, #0]
 8007062:	1a6d      	subs	r5, r5, r1
 8007064:	4629      	mov	r1, r5
 8007066:	4630      	mov	r0, r6
 8007068:	f7ff ffa6 	bl	8006fb8 <sbrk_aligned>
 800706c:	3001      	adds	r0, #1
 800706e:	d03a      	beq.n	80070e6 <_malloc_r+0xea>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	442b      	add	r3, r5
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	f8d8 3000 	ldr.w	r3, [r8]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	bb62      	cbnz	r2, 80070d8 <_malloc_r+0xdc>
 800707e:	f8c8 7000 	str.w	r7, [r8]
 8007082:	e00f      	b.n	80070a4 <_malloc_r+0xa8>
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	1b52      	subs	r2, r2, r5
 8007088:	d420      	bmi.n	80070cc <_malloc_r+0xd0>
 800708a:	2a0b      	cmp	r2, #11
 800708c:	d917      	bls.n	80070be <_malloc_r+0xc2>
 800708e:	1961      	adds	r1, r4, r5
 8007090:	42a3      	cmp	r3, r4
 8007092:	6025      	str	r5, [r4, #0]
 8007094:	bf18      	it	ne
 8007096:	6059      	strne	r1, [r3, #4]
 8007098:	6863      	ldr	r3, [r4, #4]
 800709a:	bf08      	it	eq
 800709c:	f8c8 1000 	streq.w	r1, [r8]
 80070a0:	5162      	str	r2, [r4, r5]
 80070a2:	604b      	str	r3, [r1, #4]
 80070a4:	4630      	mov	r0, r6
 80070a6:	f000 f82f 	bl	8007108 <__malloc_unlock>
 80070aa:	f104 000b 	add.w	r0, r4, #11
 80070ae:	1d23      	adds	r3, r4, #4
 80070b0:	f020 0007 	bic.w	r0, r0, #7
 80070b4:	1ac2      	subs	r2, r0, r3
 80070b6:	bf1c      	itt	ne
 80070b8:	1a1b      	subne	r3, r3, r0
 80070ba:	50a3      	strne	r3, [r4, r2]
 80070bc:	e7af      	b.n	800701e <_malloc_r+0x22>
 80070be:	6862      	ldr	r2, [r4, #4]
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	bf0c      	ite	eq
 80070c4:	f8c8 2000 	streq.w	r2, [r8]
 80070c8:	605a      	strne	r2, [r3, #4]
 80070ca:	e7eb      	b.n	80070a4 <_malloc_r+0xa8>
 80070cc:	4623      	mov	r3, r4
 80070ce:	6864      	ldr	r4, [r4, #4]
 80070d0:	e7ae      	b.n	8007030 <_malloc_r+0x34>
 80070d2:	463c      	mov	r4, r7
 80070d4:	687f      	ldr	r7, [r7, #4]
 80070d6:	e7b6      	b.n	8007046 <_malloc_r+0x4a>
 80070d8:	461a      	mov	r2, r3
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d1fb      	bne.n	80070d8 <_malloc_r+0xdc>
 80070e0:	2300      	movs	r3, #0
 80070e2:	6053      	str	r3, [r2, #4]
 80070e4:	e7de      	b.n	80070a4 <_malloc_r+0xa8>
 80070e6:	230c      	movs	r3, #12
 80070e8:	6033      	str	r3, [r6, #0]
 80070ea:	4630      	mov	r0, r6
 80070ec:	f000 f80c 	bl	8007108 <__malloc_unlock>
 80070f0:	e794      	b.n	800701c <_malloc_r+0x20>
 80070f2:	6005      	str	r5, [r0, #0]
 80070f4:	e7d6      	b.n	80070a4 <_malloc_r+0xa8>
 80070f6:	bf00      	nop
 80070f8:	200006bc 	.word	0x200006bc

080070fc <__malloc_lock>:
 80070fc:	4801      	ldr	r0, [pc, #4]	@ (8007104 <__malloc_lock+0x8>)
 80070fe:	f7ff bf0e 	b.w	8006f1e <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	200006b4 	.word	0x200006b4

08007108 <__malloc_unlock>:
 8007108:	4801      	ldr	r0, [pc, #4]	@ (8007110 <__malloc_unlock+0x8>)
 800710a:	f7ff bf09 	b.w	8006f20 <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	200006b4 	.word	0x200006b4

08007114 <__sflush_r>:
 8007114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	0716      	lsls	r6, r2, #28
 800711e:	4605      	mov	r5, r0
 8007120:	460c      	mov	r4, r1
 8007122:	d454      	bmi.n	80071ce <__sflush_r+0xba>
 8007124:	684b      	ldr	r3, [r1, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	dc02      	bgt.n	8007130 <__sflush_r+0x1c>
 800712a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd48      	ble.n	80071c2 <__sflush_r+0xae>
 8007130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007132:	2e00      	cmp	r6, #0
 8007134:	d045      	beq.n	80071c2 <__sflush_r+0xae>
 8007136:	2300      	movs	r3, #0
 8007138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800713c:	682f      	ldr	r7, [r5, #0]
 800713e:	6a21      	ldr	r1, [r4, #32]
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	d030      	beq.n	80071a6 <__sflush_r+0x92>
 8007144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	0759      	lsls	r1, r3, #29
 800714a:	d505      	bpl.n	8007158 <__sflush_r+0x44>
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007152:	b10b      	cbz	r3, 8007158 <__sflush_r+0x44>
 8007154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	2300      	movs	r3, #0
 800715a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800715c:	6a21      	ldr	r1, [r4, #32]
 800715e:	4628      	mov	r0, r5
 8007160:	47b0      	blx	r6
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	d106      	bne.n	8007176 <__sflush_r+0x62>
 8007168:	6829      	ldr	r1, [r5, #0]
 800716a:	291d      	cmp	r1, #29
 800716c:	d82b      	bhi.n	80071c6 <__sflush_r+0xb2>
 800716e:	4a2a      	ldr	r2, [pc, #168]	@ (8007218 <__sflush_r+0x104>)
 8007170:	410a      	asrs	r2, r1
 8007172:	07d6      	lsls	r6, r2, #31
 8007174:	d427      	bmi.n	80071c6 <__sflush_r+0xb2>
 8007176:	2200      	movs	r2, #0
 8007178:	6062      	str	r2, [r4, #4]
 800717a:	04d9      	lsls	r1, r3, #19
 800717c:	6922      	ldr	r2, [r4, #16]
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	d504      	bpl.n	800718c <__sflush_r+0x78>
 8007182:	1c42      	adds	r2, r0, #1
 8007184:	d101      	bne.n	800718a <__sflush_r+0x76>
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	b903      	cbnz	r3, 800718c <__sflush_r+0x78>
 800718a:	6560      	str	r0, [r4, #84]	@ 0x54
 800718c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800718e:	602f      	str	r7, [r5, #0]
 8007190:	b1b9      	cbz	r1, 80071c2 <__sflush_r+0xae>
 8007192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007196:	4299      	cmp	r1, r3
 8007198:	d002      	beq.n	80071a0 <__sflush_r+0x8c>
 800719a:	4628      	mov	r0, r5
 800719c:	f7ff fec2 	bl	8006f24 <_free_r>
 80071a0:	2300      	movs	r3, #0
 80071a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80071a4:	e00d      	b.n	80071c2 <__sflush_r+0xae>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b0      	blx	r6
 80071ac:	4602      	mov	r2, r0
 80071ae:	1c50      	adds	r0, r2, #1
 80071b0:	d1c9      	bne.n	8007146 <__sflush_r+0x32>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0c6      	beq.n	8007146 <__sflush_r+0x32>
 80071b8:	2b1d      	cmp	r3, #29
 80071ba:	d001      	beq.n	80071c0 <__sflush_r+0xac>
 80071bc:	2b16      	cmp	r3, #22
 80071be:	d11e      	bne.n	80071fe <__sflush_r+0xea>
 80071c0:	602f      	str	r7, [r5, #0]
 80071c2:	2000      	movs	r0, #0
 80071c4:	e022      	b.n	800720c <__sflush_r+0xf8>
 80071c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ca:	b21b      	sxth	r3, r3
 80071cc:	e01b      	b.n	8007206 <__sflush_r+0xf2>
 80071ce:	690f      	ldr	r7, [r1, #16]
 80071d0:	2f00      	cmp	r7, #0
 80071d2:	d0f6      	beq.n	80071c2 <__sflush_r+0xae>
 80071d4:	0793      	lsls	r3, r2, #30
 80071d6:	680e      	ldr	r6, [r1, #0]
 80071d8:	bf08      	it	eq
 80071da:	694b      	ldreq	r3, [r1, #20]
 80071dc:	600f      	str	r7, [r1, #0]
 80071de:	bf18      	it	ne
 80071e0:	2300      	movne	r3, #0
 80071e2:	eba6 0807 	sub.w	r8, r6, r7
 80071e6:	608b      	str	r3, [r1, #8]
 80071e8:	f1b8 0f00 	cmp.w	r8, #0
 80071ec:	dde9      	ble.n	80071c2 <__sflush_r+0xae>
 80071ee:	6a21      	ldr	r1, [r4, #32]
 80071f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80071f2:	4643      	mov	r3, r8
 80071f4:	463a      	mov	r2, r7
 80071f6:	4628      	mov	r0, r5
 80071f8:	47b0      	blx	r6
 80071fa:	2800      	cmp	r0, #0
 80071fc:	dc08      	bgt.n	8007210 <__sflush_r+0xfc>
 80071fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	f04f 30ff 	mov.w	r0, #4294967295
 800720c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007210:	4407      	add	r7, r0
 8007212:	eba8 0800 	sub.w	r8, r8, r0
 8007216:	e7e7      	b.n	80071e8 <__sflush_r+0xd4>
 8007218:	dfbffffe 	.word	0xdfbffffe

0800721c <_fflush_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	690b      	ldr	r3, [r1, #16]
 8007220:	4605      	mov	r5, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b913      	cbnz	r3, 800722c <_fflush_r+0x10>
 8007226:	2500      	movs	r5, #0
 8007228:	4628      	mov	r0, r5
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	b118      	cbz	r0, 8007236 <_fflush_r+0x1a>
 800722e:	6a03      	ldr	r3, [r0, #32]
 8007230:	b90b      	cbnz	r3, 8007236 <_fflush_r+0x1a>
 8007232:	f7ff fc8f 	bl	8006b54 <__sinit>
 8007236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f3      	beq.n	8007226 <_fflush_r+0xa>
 800723e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007240:	07d0      	lsls	r0, r2, #31
 8007242:	d404      	bmi.n	800724e <_fflush_r+0x32>
 8007244:	0599      	lsls	r1, r3, #22
 8007246:	d402      	bmi.n	800724e <_fflush_r+0x32>
 8007248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800724a:	f7ff fe68 	bl	8006f1e <__retarget_lock_acquire_recursive>
 800724e:	4628      	mov	r0, r5
 8007250:	4621      	mov	r1, r4
 8007252:	f7ff ff5f 	bl	8007114 <__sflush_r>
 8007256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007258:	07da      	lsls	r2, r3, #31
 800725a:	4605      	mov	r5, r0
 800725c:	d4e4      	bmi.n	8007228 <_fflush_r+0xc>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	059b      	lsls	r3, r3, #22
 8007262:	d4e1      	bmi.n	8007228 <_fflush_r+0xc>
 8007264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007266:	f7ff fe5b 	bl	8006f20 <__retarget_lock_release_recursive>
 800726a:	e7dd      	b.n	8007228 <_fflush_r+0xc>

0800726c <__swhatbuf_r>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	460c      	mov	r4, r1
 8007270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007274:	2900      	cmp	r1, #0
 8007276:	b096      	sub	sp, #88	@ 0x58
 8007278:	4615      	mov	r5, r2
 800727a:	461e      	mov	r6, r3
 800727c:	da0d      	bge.n	800729a <__swhatbuf_r+0x2e>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007284:	f04f 0100 	mov.w	r1, #0
 8007288:	bf14      	ite	ne
 800728a:	2340      	movne	r3, #64	@ 0x40
 800728c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007290:	2000      	movs	r0, #0
 8007292:	6031      	str	r1, [r6, #0]
 8007294:	602b      	str	r3, [r5, #0]
 8007296:	b016      	add	sp, #88	@ 0x58
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	466a      	mov	r2, sp
 800729c:	f000 f848 	bl	8007330 <_fstat_r>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	dbec      	blt.n	800727e <__swhatbuf_r+0x12>
 80072a4:	9901      	ldr	r1, [sp, #4]
 80072a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072ae:	4259      	negs	r1, r3
 80072b0:	4159      	adcs	r1, r3
 80072b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072b6:	e7eb      	b.n	8007290 <__swhatbuf_r+0x24>

080072b8 <__smakebuf_r>:
 80072b8:	898b      	ldrh	r3, [r1, #12]
 80072ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072bc:	079d      	lsls	r5, r3, #30
 80072be:	4606      	mov	r6, r0
 80072c0:	460c      	mov	r4, r1
 80072c2:	d507      	bpl.n	80072d4 <__smakebuf_r+0x1c>
 80072c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	2301      	movs	r3, #1
 80072ce:	6163      	str	r3, [r4, #20]
 80072d0:	b003      	add	sp, #12
 80072d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d4:	ab01      	add	r3, sp, #4
 80072d6:	466a      	mov	r2, sp
 80072d8:	f7ff ffc8 	bl	800726c <__swhatbuf_r>
 80072dc:	9f00      	ldr	r7, [sp, #0]
 80072de:	4605      	mov	r5, r0
 80072e0:	4639      	mov	r1, r7
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7ff fe8a 	bl	8006ffc <_malloc_r>
 80072e8:	b948      	cbnz	r0, 80072fe <__smakebuf_r+0x46>
 80072ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ee:	059a      	lsls	r2, r3, #22
 80072f0:	d4ee      	bmi.n	80072d0 <__smakebuf_r+0x18>
 80072f2:	f023 0303 	bic.w	r3, r3, #3
 80072f6:	f043 0302 	orr.w	r3, r3, #2
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	e7e2      	b.n	80072c4 <__smakebuf_r+0xc>
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	6020      	str	r0, [r4, #0]
 8007302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800730e:	b15b      	cbz	r3, 8007328 <__smakebuf_r+0x70>
 8007310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007314:	4630      	mov	r0, r6
 8007316:	f000 f81d 	bl	8007354 <_isatty_r>
 800731a:	b128      	cbz	r0, 8007328 <__smakebuf_r+0x70>
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f023 0303 	bic.w	r3, r3, #3
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	81a3      	strh	r3, [r4, #12]
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	431d      	orrs	r5, r3
 800732c:	81a5      	strh	r5, [r4, #12]
 800732e:	e7cf      	b.n	80072d0 <__smakebuf_r+0x18>

08007330 <_fstat_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4d07      	ldr	r5, [pc, #28]	@ (8007350 <_fstat_r+0x20>)
 8007334:	2300      	movs	r3, #0
 8007336:	4604      	mov	r4, r0
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	f7fb fc94 	bl	8002c6a <_fstat>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	d102      	bne.n	800734c <_fstat_r+0x1c>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	b103      	cbz	r3, 800734c <_fstat_r+0x1c>
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	bd38      	pop	{r3, r4, r5, pc}
 800734e:	bf00      	nop
 8007350:	200006b0 	.word	0x200006b0

08007354 <_isatty_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d06      	ldr	r5, [pc, #24]	@ (8007370 <_isatty_r+0x1c>)
 8007358:	2300      	movs	r3, #0
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7fb fc93 	bl	8002c8a <_isatty>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_isatty_r+0x1a>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_isatty_r+0x1a>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	200006b0 	.word	0x200006b0

08007374 <_sbrk_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	@ (8007390 <_sbrk_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7fb fc9c 	bl	8002cbc <_sbrk>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_sbrk_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_sbrk_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	200006b0 	.word	0x200006b0

08007394 <fmaxf>:
 8007394:	b508      	push	{r3, lr}
 8007396:	ed2d 8b02 	vpush	{d8}
 800739a:	eeb0 8a40 	vmov.f32	s16, s0
 800739e:	eef0 8a60 	vmov.f32	s17, s1
 80073a2:	f000 f831 	bl	8007408 <__fpclassifyf>
 80073a6:	b930      	cbnz	r0, 80073b6 <fmaxf+0x22>
 80073a8:	eeb0 8a68 	vmov.f32	s16, s17
 80073ac:	eeb0 0a48 	vmov.f32	s0, s16
 80073b0:	ecbd 8b02 	vpop	{d8}
 80073b4:	bd08      	pop	{r3, pc}
 80073b6:	eeb0 0a68 	vmov.f32	s0, s17
 80073ba:	f000 f825 	bl	8007408 <__fpclassifyf>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d0f4      	beq.n	80073ac <fmaxf+0x18>
 80073c2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80073c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ca:	dded      	ble.n	80073a8 <fmaxf+0x14>
 80073cc:	e7ee      	b.n	80073ac <fmaxf+0x18>

080073ce <fminf>:
 80073ce:	b508      	push	{r3, lr}
 80073d0:	ed2d 8b02 	vpush	{d8}
 80073d4:	eeb0 8a40 	vmov.f32	s16, s0
 80073d8:	eef0 8a60 	vmov.f32	s17, s1
 80073dc:	f000 f814 	bl	8007408 <__fpclassifyf>
 80073e0:	b930      	cbnz	r0, 80073f0 <fminf+0x22>
 80073e2:	eeb0 8a68 	vmov.f32	s16, s17
 80073e6:	eeb0 0a48 	vmov.f32	s0, s16
 80073ea:	ecbd 8b02 	vpop	{d8}
 80073ee:	bd08      	pop	{r3, pc}
 80073f0:	eeb0 0a68 	vmov.f32	s0, s17
 80073f4:	f000 f808 	bl	8007408 <__fpclassifyf>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d0f4      	beq.n	80073e6 <fminf+0x18>
 80073fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007404:	d5ed      	bpl.n	80073e2 <fminf+0x14>
 8007406:	e7ee      	b.n	80073e6 <fminf+0x18>

08007408 <__fpclassifyf>:
 8007408:	ee10 3a10 	vmov	r3, s0
 800740c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8007410:	d00d      	beq.n	800742e <__fpclassifyf+0x26>
 8007412:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8007416:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800741a:	d30a      	bcc.n	8007432 <__fpclassifyf+0x2a>
 800741c:	4b07      	ldr	r3, [pc, #28]	@ (800743c <__fpclassifyf+0x34>)
 800741e:	1e42      	subs	r2, r0, #1
 8007420:	429a      	cmp	r2, r3
 8007422:	d908      	bls.n	8007436 <__fpclassifyf+0x2e>
 8007424:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8007428:	4258      	negs	r0, r3
 800742a:	4158      	adcs	r0, r3
 800742c:	4770      	bx	lr
 800742e:	2002      	movs	r0, #2
 8007430:	4770      	bx	lr
 8007432:	2004      	movs	r0, #4
 8007434:	4770      	bx	lr
 8007436:	2003      	movs	r0, #3
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	007ffffe 	.word	0x007ffffe

08007440 <round>:
 8007440:	ec51 0b10 	vmov	r0, r1, d0
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800744a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800744e:	2a13      	cmp	r2, #19
 8007450:	460b      	mov	r3, r1
 8007452:	4605      	mov	r5, r0
 8007454:	dc1b      	bgt.n	800748e <round+0x4e>
 8007456:	2a00      	cmp	r2, #0
 8007458:	da0b      	bge.n	8007472 <round+0x32>
 800745a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800745e:	3201      	adds	r2, #1
 8007460:	bf04      	itt	eq
 8007462:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8007466:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800746a:	2200      	movs	r2, #0
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	e015      	b.n	800749e <round+0x5e>
 8007472:	4c15      	ldr	r4, [pc, #84]	@ (80074c8 <round+0x88>)
 8007474:	4114      	asrs	r4, r2
 8007476:	ea04 0601 	and.w	r6, r4, r1
 800747a:	4306      	orrs	r6, r0
 800747c:	d00f      	beq.n	800749e <round+0x5e>
 800747e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007482:	fa41 f202 	asr.w	r2, r1, r2
 8007486:	4413      	add	r3, r2
 8007488:	ea23 0304 	bic.w	r3, r3, r4
 800748c:	e7ed      	b.n	800746a <round+0x2a>
 800748e:	2a33      	cmp	r2, #51	@ 0x33
 8007490:	dd08      	ble.n	80074a4 <round+0x64>
 8007492:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007496:	d102      	bne.n	800749e <round+0x5e>
 8007498:	4602      	mov	r2, r0
 800749a:	f7f8 ffe5 	bl	8000468 <__adddf3>
 800749e:	ec41 0b10 	vmov	d0, r0, r1
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80074a8:	f04f 34ff 	mov.w	r4, #4294967295
 80074ac:	40f4      	lsrs	r4, r6
 80074ae:	4204      	tst	r4, r0
 80074b0:	d0f5      	beq.n	800749e <round+0x5e>
 80074b2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80074b6:	2201      	movs	r2, #1
 80074b8:	408a      	lsls	r2, r1
 80074ba:	1952      	adds	r2, r2, r5
 80074bc:	bf28      	it	cs
 80074be:	3301      	addcs	r3, #1
 80074c0:	ea22 0204 	bic.w	r2, r2, r4
 80074c4:	e7d2      	b.n	800746c <round+0x2c>
 80074c6:	bf00      	nop
 80074c8:	000fffff 	.word	0x000fffff

080074cc <_init>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	bf00      	nop
 80074d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d2:	bc08      	pop	{r3}
 80074d4:	469e      	mov	lr, r3
 80074d6:	4770      	bx	lr

080074d8 <_fini>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr
