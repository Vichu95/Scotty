
CAN_MOTORFIRMWARE_like_MIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000646c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006630  08006630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b4  080066b4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066bc  080066bc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080066c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000088  0800674c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800674c  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010959  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002674  00000000  00000000  00030a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00033088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002361d  00000000  00000000  00034f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b73  00000000  00000000  0005851d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d502a  00000000  00000000  0006a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f0ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  0013f10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000088 	.word	0x20000088
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006618 	.word	0x08006618

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	08006618 	.word	0x08006618

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Keypad4x4_ChangeColomn>:
		}
	}
}
//Function(3): Change colomn number
static void Keypad4x4_ChangeColomn(uint8_t colNum_0_to_3)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	if(colNum_0_to_3==0)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d134      	bne.n	8000582 <Keypad4x4_ChangeColomn+0x7a>
	{
		//Set selected colomn
		KeypadStruct.OUT0_Port->OTYPER &= ~(1UL << OutPositions[0]);
 8000518:	4b70      	ldr	r3, [pc, #448]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	6859      	ldr	r1, [r3, #4]
 800051e:	4b70      	ldr	r3, [pc, #448]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	2301      	movs	r3, #1
 8000526:	4093      	lsls	r3, r2
 8000528:	43da      	mvns	r2, r3
 800052a:	4b6c      	ldr	r3, [pc, #432]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800052c:	691b      	ldr	r3, [r3, #16]
 800052e:	400a      	ands	r2, r1
 8000530:	605a      	str	r2, [r3, #4]
		
		//Make other colomns floating
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000532:	4b6a      	ldr	r3, [pc, #424]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	6859      	ldr	r1, [r3, #4]
 8000538:	4b69      	ldr	r3, [pc, #420]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 800053a:	785b      	ldrb	r3, [r3, #1]
 800053c:	461a      	mov	r2, r3
 800053e:	2301      	movs	r3, #1
 8000540:	fa03 f202 	lsl.w	r2, r3, r2
 8000544:	4b65      	ldr	r3, [pc, #404]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	430a      	orrs	r2, r1
 800054a:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 800054c:	4b63      	ldr	r3, [pc, #396]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	6859      	ldr	r1, [r3, #4]
 8000552:	4b63      	ldr	r3, [pc, #396]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	461a      	mov	r2, r3
 8000558:	2301      	movs	r3, #1
 800055a:	fa03 f202 	lsl.w	r2, r3, r2
 800055e:	4b5f      	ldr	r3, [pc, #380]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	430a      	orrs	r2, r1
 8000564:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000566:	4b5d      	ldr	r3, [pc, #372]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	6859      	ldr	r1, [r3, #4]
 800056c:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 800056e:	78db      	ldrb	r3, [r3, #3]
 8000570:	461a      	mov	r2, r3
 8000572:	2301      	movs	r3, #1
 8000574:	fa03 f202 	lsl.w	r2, r3, r2
 8000578:	4b58      	ldr	r3, [pc, #352]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	430a      	orrs	r2, r1
 800057e:	605a      	str	r2, [r3, #4]
		//Make other colomns floating
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
	}
}
 8000580:	e0a6      	b.n	80006d0 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==1)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d134      	bne.n	80005f2 <Keypad4x4_ChangeColomn+0xea>
		KeypadStruct.OUT1_Port->OTYPER &= ~(1UL << OutPositions[1]);
 8000588:	4b54      	ldr	r3, [pc, #336]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	6859      	ldr	r1, [r3, #4]
 800058e:	4b54      	ldr	r3, [pc, #336]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	461a      	mov	r2, r3
 8000594:	2301      	movs	r3, #1
 8000596:	4093      	lsls	r3, r2
 8000598:	43da      	mvns	r2, r3
 800059a:	4b50      	ldr	r3, [pc, #320]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	400a      	ands	r2, r1
 80005a0:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 80005a2:	4b4e      	ldr	r3, [pc, #312]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	4b4d      	ldr	r3, [pc, #308]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	2301      	movs	r3, #1
 80005b0:	fa03 f202 	lsl.w	r2, r3, r2
 80005b4:	4b49      	ldr	r3, [pc, #292]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 80005bc:	4b47      	ldr	r3, [pc, #284]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	6859      	ldr	r1, [r3, #4]
 80005c2:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	461a      	mov	r2, r3
 80005c8:	2301      	movs	r3, #1
 80005ca:	fa03 f202 	lsl.w	r2, r3, r2
 80005ce:	4b43      	ldr	r3, [pc, #268]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	430a      	orrs	r2, r1
 80005d4:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	6859      	ldr	r1, [r3, #4]
 80005dc:	4b40      	ldr	r3, [pc, #256]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 80005de:	78db      	ldrb	r3, [r3, #3]
 80005e0:	461a      	mov	r2, r3
 80005e2:	2301      	movs	r3, #1
 80005e4:	fa03 f202 	lsl.w	r2, r3, r2
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	430a      	orrs	r2, r1
 80005ee:	605a      	str	r2, [r3, #4]
}
 80005f0:	e06e      	b.n	80006d0 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==2)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d134      	bne.n	8000662 <Keypad4x4_ChangeColomn+0x15a>
		KeypadStruct.OUT2_Port->OTYPER &= ~(1UL << OutPositions[2]);
 80005f8:	4b38      	ldr	r3, [pc, #224]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	6859      	ldr	r1, [r3, #4]
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 8000600:	789b      	ldrb	r3, [r3, #2]
 8000602:	461a      	mov	r2, r3
 8000604:	2301      	movs	r3, #1
 8000606:	4093      	lsls	r3, r2
 8000608:	43da      	mvns	r2, r3
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	400a      	ands	r2, r1
 8000610:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	6859      	ldr	r1, [r3, #4]
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	2301      	movs	r3, #1
 8000620:	fa03 f202 	lsl.w	r2, r3, r2
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	430a      	orrs	r2, r1
 800062a:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	6859      	ldr	r1, [r3, #4]
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	461a      	mov	r2, r3
 8000638:	2301      	movs	r3, #1
 800063a:	fa03 f202 	lsl.w	r2, r3, r2
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	430a      	orrs	r2, r1
 8000644:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	6859      	ldr	r1, [r3, #4]
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	461a      	mov	r2, r3
 8000652:	2301      	movs	r3, #1
 8000654:	fa03 f202 	lsl.w	r2, r3, r2
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	430a      	orrs	r2, r1
 800065e:	605a      	str	r2, [r3, #4]
}
 8000660:	e036      	b.n	80006d0 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==3)
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d133      	bne.n	80006d0 <Keypad4x4_ChangeColomn+0x1c8>
		KeypadStruct.OUT3_Port->OTYPER &= ~(1UL << OutPositions[3]);
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	6859      	ldr	r1, [r3, #4]
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 8000670:	78db      	ldrb	r3, [r3, #3]
 8000672:	461a      	mov	r2, r3
 8000674:	2301      	movs	r3, #1
 8000676:	4093      	lsls	r3, r2
 8000678:	43da      	mvns	r2, r3
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	400a      	ands	r2, r1
 8000680:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	6859      	ldr	r1, [r3, #4]
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	2301      	movs	r3, #1
 8000690:	fa03 f202 	lsl.w	r2, r3, r2
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	430a      	orrs	r2, r1
 800069a:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	6859      	ldr	r1, [r3, #4]
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2301      	movs	r3, #1
 80006aa:	fa03 f202 	lsl.w	r2, r3, r2
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	6859      	ldr	r1, [r3, #4]
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <Keypad4x4_ChangeColomn+0x1d8>)
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	461a      	mov	r2, r3
 80006c2:	2301      	movs	r3, #1
 80006c4:	fa03 f202 	lsl.w	r2, r3, r2
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <Keypad4x4_ChangeColomn+0x1d4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	430a      	orrs	r2, r1
 80006ce:	605a      	str	r2, [r3, #4]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000a4 	.word	0x200000a4
 80006e0:	200000d4 	.word	0x200000d4

080006e4 <Keypad4x4_ReadKeypad>:

//Function(4): Read active keypad button
void Keypad4x4_ReadKeypad(bool keys[16])
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	//Step(1): Make Col0 High and check the rows
	Keypad4x4_ChangeColomn(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff0b 	bl	8000508 <Keypad4x4_ChangeColomn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 80006f2:	4b95      	ldr	r3, [pc, #596]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a94      	ldr	r2, [pc, #592]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80006f8:	8c12      	ldrh	r2, [r2, #32]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fc23 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	bf14      	ite	ne
 8000708:	2301      	movne	r3, #1
 800070a:	2300      	moveq	r3, #0
 800070c:	b2da      	uxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8000712:	4b8d      	ldr	r3, [pc, #564]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4a8c      	ldr	r2, [pc, #560]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000718:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fc13 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3304      	adds	r3, #4
 800072a:	2a00      	cmp	r2, #0
 800072c:	bf14      	ite	ne
 800072e:	2201      	movne	r2, #1
 8000730:	2200      	moveq	r2, #0
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8000736:	4b84      	ldr	r3, [pc, #528]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	4a83      	ldr	r2, [pc, #524]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 800073c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fc01 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3308      	adds	r3, #8
 800074e:	2a00      	cmp	r2, #0
 8000750:	bf14      	ite	ne
 8000752:	2201      	movne	r2, #1
 8000754:	2200      	moveq	r2, #0
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4a7a      	ldr	r2, [pc, #488]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000760:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f003 fbef 	bl	8003f48 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	330c      	adds	r3, #12
 8000772:	2a00      	cmp	r2, #0
 8000774:	bf14      	ite	ne
 8000776:	2201      	movne	r2, #1
 8000778:	2200      	moveq	r2, #0
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	701a      	strb	r2, [r3, #0]
	
	//Step(2): Make Col1 High and check the rows
	Keypad4x4_ChangeColomn(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fec2 	bl	8000508 <Keypad4x4_ChangeColomn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8000784:	4b70      	ldr	r3, [pc, #448]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a6f      	ldr	r2, [pc, #444]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 800078a:	8c12      	ldrh	r2, [r2, #32]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fbda 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	2a00      	cmp	r2, #0
 800079e:	bf14      	ite	ne
 80007a0:	2201      	movne	r2, #1
 80007a2:	2200      	moveq	r2, #0
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 80007a8:	4b67      	ldr	r3, [pc, #412]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4a66      	ldr	r2, [pc, #408]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80007ae:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fbc8 	bl	8003f48 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3305      	adds	r3, #5
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	bf14      	ite	ne
 80007c4:	2201      	movne	r2, #1
 80007c6:	2200      	moveq	r2, #0
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 80007cc:	4b5e      	ldr	r3, [pc, #376]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	4a5d      	ldr	r2, [pc, #372]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80007d2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 fbb6 	bl	8003f48 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3309      	adds	r3, #9
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	bf14      	ite	ne
 80007e8:	2201      	movne	r2, #1
 80007ea:	2200      	moveq	r2, #0
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 80007f0:	4b55      	ldr	r3, [pc, #340]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	4a54      	ldr	r2, [pc, #336]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80007f6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fba4 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	330d      	adds	r3, #13
 8000808:	2a00      	cmp	r2, #0
 800080a:	bf14      	ite	ne
 800080c:	2201      	movne	r2, #1
 800080e:	2200      	moveq	r2, #0
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	701a      	strb	r2, [r3, #0]
	
	//Step(3): Make Col2 High and check the rows
	Keypad4x4_ChangeColomn(2);
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fe77 	bl	8000508 <Keypad4x4_ChangeColomn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800081a:	4b4b      	ldr	r3, [pc, #300]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a4a      	ldr	r2, [pc, #296]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000820:	8c12      	ldrh	r2, [r2, #32]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fb8f 	bl	8003f48 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3302      	adds	r3, #2
 8000832:	2a00      	cmp	r2, #0
 8000834:	bf14      	ite	ne
 8000836:	2201      	movne	r2, #1
 8000838:	2200      	moveq	r2, #0
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 800083e:	4b42      	ldr	r3, [pc, #264]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	4a41      	ldr	r2, [pc, #260]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000844:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fb7d 	bl	8003f48 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3306      	adds	r3, #6
 8000856:	2a00      	cmp	r2, #0
 8000858:	bf14      	ite	ne
 800085a:	2201      	movne	r2, #1
 800085c:	2200      	moveq	r2, #0
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8000862:	4b39      	ldr	r3, [pc, #228]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4a38      	ldr	r2, [pc, #224]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000868:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fb6b 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	330a      	adds	r3, #10
 800087a:	2a00      	cmp	r2, #0
 800087c:	bf14      	ite	ne
 800087e:	2201      	movne	r2, #1
 8000880:	2200      	moveq	r2, #0
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 800088c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fb59 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	330e      	adds	r3, #14
 800089e:	2a00      	cmp	r2, #0
 80008a0:	bf14      	ite	ne
 80008a2:	2201      	movne	r2, #1
 80008a4:	2200      	moveq	r2, #0
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	701a      	strb	r2, [r3, #0]
	
	//Step(4): Make Col3 High and check the rows
	Keypad4x4_ChangeColomn(3);
 80008aa:	2003      	movs	r0, #3
 80008ac:	f7ff fe2c 	bl	8000508 <Keypad4x4_ChangeColomn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a24      	ldr	r2, [pc, #144]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80008b6:	8c12      	ldrh	r2, [r2, #32]
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fb44 	bl	8003f48 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3303      	adds	r3, #3
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2201      	movne	r2, #1
 80008ce:	2200      	moveq	r2, #0
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80008da:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fb32 	bl	8003f48 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3307      	adds	r3, #7
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	bf14      	ite	ne
 80008f0:	2201      	movne	r2, #1
 80008f2:	2200      	moveq	r2, #0
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4a12      	ldr	r2, [pc, #72]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 80008fe:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fb20 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	330b      	adds	r3, #11
 8000910:	2a00      	cmp	r2, #0
 8000912:	bf14      	ite	ne
 8000914:	2201      	movne	r2, #1
 8000916:	2200      	moveq	r2, #0
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4a09      	ldr	r2, [pc, #36]	; (8000948 <Keypad4x4_ReadKeypad+0x264>)
 8000922:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fb0e 	bl	8003f48 <HAL_GPIO_ReadPin>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	330f      	adds	r3, #15
 8000934:	2a00      	cmp	r2, #0
 8000936:	bf14      	ite	ne
 8000938:	2201      	movne	r2, #1
 800093a:	2200      	moveq	r2, #0
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
}	
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000a4 	.word	0x200000a4

0800094c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000954:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000958:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d013      	beq.n	800098c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000964:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000968:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800096c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00b      	beq.n	800098c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000974:	e000      	b.n	8000978 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000976:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000978:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f9      	beq.n	8000976 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000982:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <HAL_CAN_RxFifo0MsgPendingCallback>:
HAL_StatusTypeDef spierror;



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f002 f9bd 	bl	8002d2a <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d102      	bne.n	80009be <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck=0;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
	}
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000590 	.word	0x20000590
 80009cc:	2000056c 	.word	0x2000056c
 80009d0:	20000010 	.word	0x20000010

080009d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f002 f9a1 	bl	8002d2a <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d102      	bne.n	80009f6 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		datacheck=1;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
	}
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000590 	.word	0x20000590
 8000a04:	2000056c 	.word	0x2000056c
 8000a08:	20000010 	.word	0x20000010

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f001 fe1e 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f8d0 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 fae4 	bl	8000fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1c:	f000 faba 	bl	8000f94 <MX_DMA_Init>
  MX_CAN1_Init();
 8000a20:	f000 f93c 	bl	8000c9c <MX_CAN1_Init>
  MX_TIM1_Init();
 8000a24:	f000 fa16 	bl	8000e54 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000a28:	f000 f9e0 	bl	8000dec <MX_SPI1_Init>
  MX_CAN2_Init();
 8000a2c:	f000 f98a 	bl	8000d44 <MX_CAN2_Init>
  MX_TIM8_Init();
 8000a30:	f000 fa60 	bl	8000ef4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000a34:	484c      	ldr	r0, [pc, #304]	; (8000b68 <main+0x15c>)
 8000a36:	f002 f859 	bl	8002aec <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000a3a:	484c      	ldr	r0, [pc, #304]	; (8000b6c <main+0x160>)
 8000a3c:	f002 f856 	bl	8002aec <HAL_CAN_Start>
  HAL_TIM_Base_Start(&htim1);
 8000a40:	484b      	ldr	r0, [pc, #300]	; (8000b70 <main+0x164>)
 8000a42:	f004 fd81 	bl	8005548 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8000a46:	484b      	ldr	r0, [pc, #300]	; (8000b74 <main+0x168>)
 8000a48:	f004 fd7e 	bl	8005548 <HAL_TIM_Base_Start>


  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4846      	ldr	r0, [pc, #280]	; (8000b68 <main+0x15c>)
 8000a50:	f002 fa7d 	bl	8002f4e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000a54:	2110      	movs	r1, #16
 8000a56:	4845      	ldr	r0, [pc, #276]	; (8000b6c <main+0x160>)
 8000a58:	f002 fa79 	bl	8002f4e <HAL_CAN_ActivateNotification>


  TxHeader.DLC = 8;  // data length
 8000a5c:	4b46      	ldr	r3, [pc, #280]	; (8000b78 <main+0x16c>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000a62:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <main+0x16c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000a68:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <main+0x16c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]


  //Keypad
  myKeypadStruct.IN0_Port=GPIOC;
 8000a6e:	4b43      	ldr	r3, [pc, #268]	; (8000b7c <main+0x170>)
 8000a70:	4a43      	ldr	r2, [pc, #268]	; (8000b80 <main+0x174>)
 8000a72:	601a      	str	r2, [r3, #0]
  myKeypadStruct.IN1_Port=GPIOC;
 8000a74:	4b41      	ldr	r3, [pc, #260]	; (8000b7c <main+0x170>)
 8000a76:	4a42      	ldr	r2, [pc, #264]	; (8000b80 <main+0x174>)
 8000a78:	605a      	str	r2, [r3, #4]
  myKeypadStruct.IN2_Port=GPIOC;
 8000a7a:	4b40      	ldr	r3, [pc, #256]	; (8000b7c <main+0x170>)
 8000a7c:	4a40      	ldr	r2, [pc, #256]	; (8000b80 <main+0x174>)
 8000a7e:	609a      	str	r2, [r3, #8]
  myKeypadStruct.IN3_Port=GPIOC;
 8000a80:	4b3e      	ldr	r3, [pc, #248]	; (8000b7c <main+0x170>)
 8000a82:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <main+0x174>)
 8000a84:	60da      	str	r2, [r3, #12]

  myKeypadStruct.OUT0_Port=GPIOB;
 8000a86:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <main+0x170>)
 8000a88:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <main+0x178>)
 8000a8a:	611a      	str	r2, [r3, #16]
  myKeypadStruct.OUT1_Port=GPIOB;
 8000a8c:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <main+0x170>)
 8000a8e:	4a3d      	ldr	r2, [pc, #244]	; (8000b84 <main+0x178>)
 8000a90:	615a      	str	r2, [r3, #20]
  myKeypadStruct.OUT2_Port=GPIOB;
 8000a92:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <main+0x170>)
 8000a94:	4a3b      	ldr	r2, [pc, #236]	; (8000b84 <main+0x178>)
 8000a96:	619a      	str	r2, [r3, #24]
  myKeypadStruct.OUT3_Port=GPIOB;
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <main+0x170>)
 8000a9a:	4a3a      	ldr	r2, [pc, #232]	; (8000b84 <main+0x178>)
 8000a9c:	61da      	str	r2, [r3, #28]

  //PINS

  myKeypadStruct.IN0pin=GPIO_PIN_6;
 8000a9e:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <main+0x170>)
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	841a      	strh	r2, [r3, #32]
  myKeypadStruct.IN1pin=GPIO_PIN_7;
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <main+0x170>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	845a      	strh	r2, [r3, #34]	; 0x22
  myKeypadStruct.IN2pin=GPIO_PIN_8;
 8000aaa:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <main+0x170>)
 8000aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab0:	849a      	strh	r2, [r3, #36]	; 0x24
  myKeypadStruct.IN3pin=GPIO_PIN_9;
 8000ab2:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <main+0x170>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab8:	84da      	strh	r2, [r3, #38]	; 0x26

  myKeypadStruct.OUT0pin=GPIO_PIN_12;
 8000aba:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <main+0x170>)
 8000abc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac0:	851a      	strh	r2, [r3, #40]	; 0x28
  myKeypadStruct.OUT1pin=GPIO_PIN_13;
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <main+0x170>)
 8000ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
  myKeypadStruct.OUT2pin=GPIO_PIN_14;
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <main+0x170>)
 8000acc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad0:	859a      	strh	r2, [r3, #44]	; 0x2c
  myKeypadStruct.OUT3pin=GPIO_PIN_15;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <main+0x170>)
 8000ad4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ad8:	85da      	strh	r2, [r3, #46]	; 0x2e


  printf("start\n");
 8000ada:	482b      	ldr	r0, [pc, #172]	; (8000b88 <main+0x17c>)
 8000adc:	f005 f8ba 	bl	8005c54 <puts>
  HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8000ae0:	2342      	movs	r3, #66	; 0x42
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <main+0x180>)
 8000ae4:	492a      	ldr	r1, [pc, #168]	; (8000b90 <main+0x184>)
 8000ae6:	482b      	ldr	r0, [pc, #172]	; (8000b94 <main+0x188>)
 8000ae8:	f004 f912 	bl	8004d10 <HAL_SPI_TransmitReceive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	__HAL_TIM_SET_COUNTER(&htim8,0);
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <main+0x168>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
	 	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15) == 0 && count==2 && spi_enabled==0){
 8000af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af8:	4827      	ldr	r0, [pc, #156]	; (8000b98 <main+0x18c>)
 8000afa:	f003 fa25 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d112      	bne.n	8000b2a <main+0x11e>
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <main+0x190>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d10e      	bne.n	8000b2a <main+0x11e>
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <main+0x194>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10a      	bne.n	8000b2a <main+0x11e>
	//if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15) == 0 ){
		spi_test=1;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <main+0x198>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
		//spi_send_receive();
		//can_control();
		//can_send_receive();
		count=1;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <main+0x190>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
	    //count=1;
		time2=__HAL_TIM_GET_COUNTER(&htim8);
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <main+0x168>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b26:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <main+0x19c>)
 8000b28:	6013      	str	r3, [r2, #0]

	}

	if(count==1){
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <main+0x190>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10b      	bne.n	8000b4a <main+0x13e>
		can_control();
 8000b32:	f000 ff5b 	bl	80019ec <can_control>
		can_send_receive();
 8000b36:	f000 feaf 	bl	8001898 <can_send_receive>
		count=2;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <main+0x190>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	601a      	str	r2, [r3, #0]
		time=__HAL_TIM_GET_COUNTER(&htim8);
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <main+0x168>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b46:	4a19      	ldr	r2, [pc, #100]	; (8000bac <main+0x1a0>)
 8000b48:	6013      	str	r3, [r2, #0]
	}

	Error_spi=HAL_SPI_GetError(&hspi1);
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <main+0x188>)
 8000b4c:	f004 fa8c 	bl	8005068 <HAL_SPI_GetError>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <main+0x1a4>)
 8000b54:	6013      	str	r3, [r2, #0]
	State_spi=HAL_SPI_GetState(&hspi1);
 8000b56:	480f      	ldr	r0, [pc, #60]	; (8000b94 <main+0x188>)
 8000b58:	f004 fa78 	bl	800504c <HAL_SPI_GetState>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <main+0x1a8>)
 8000b62:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim8,0);
 8000b64:	e7c2      	b.n	8000aec <main+0xe0>
 8000b66:	bf00      	nop
 8000b68:	200000d8 	.word	0x200000d8
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	20000240 	.word	0x20000240
 8000b74:	20000288 	.word	0x20000288
 8000b78:	20000554 	.word	0x20000554
 8000b7c:	200005c0 	.word	0x200005c0
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	08006630 	.word	0x08006630
 8000b8c:	20000354 	.word	0x20000354
 8000b90:	200002d0 	.word	0x200002d0
 8000b94:	20000128 	.word	0x20000128
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	20000014 	.word	0x20000014
 8000ba0:	200005a0 	.word	0x200005a0
 8000ba4:	200005f0 	.word	0x200005f0
 8000ba8:	200005ac 	.word	0x200005ac
 8000bac:	200005a8 	.word	0x200005a8
 8000bb0:	200005f4 	.word	0x200005f4
 8000bb4:	200005fc 	.word	0x200005fc

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2234      	movs	r2, #52	; 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 ffce 	bl	8005b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <SystemClock_Config+0xdc>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <SystemClock_Config+0xdc>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <SystemClock_Config+0xdc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <SystemClock_Config+0xe0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <SystemClock_Config+0xe0>)
 8000c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <SystemClock_Config+0xe0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c2c:	23b4      	movs	r3, #180	; 0xb4
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fd3d 	bl	80046c0 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c4c:	f001 f9d8 	bl	8002000 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c50:	f003 f9d0 	bl	8003ff4 <HAL_PWREx_EnableOverDrive>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c5a:	f001 f9d1 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2302      	movs	r3, #2
 8000c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2105      	movs	r1, #5
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fa09 	bl	8004094 <HAL_RCC_ClockConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c88:	f001 f9ba 	bl	8002000 <Error_Handler>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3750      	adds	r7, #80	; 0x50
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000

08000c9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <MX_CAN1_Init+0xa4>)
 8000ca6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000caa:	2209      	movs	r2, #9
 8000cac:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cc0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cc8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cee:	4813      	ldr	r0, [pc, #76]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000cf0:	f001 fd20 	bl	8002734 <HAL_CAN_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000cfa:	f001 f981 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones 18
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0xFFFF;
 8000d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d16:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0xFFFC;
 8000d18:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000d1c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can) 20
 8000d26:	230e      	movs	r3, #14
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_CAN1_Init+0xa0>)
 8000d30:	f001 fdfc 	bl	800292c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000d8 	.word	0x200000d8
 8000d40:	40006400 	.word	0x40006400

08000d44 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <MX_CAN2_Init+0xa4>)
 8000d4e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d52:	2209      	movs	r2, #9
 8000d54:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d68:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d70:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000d98:	f001 fccc 	bl	8002734 <HAL_CAN_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000da2:	f001 f92d 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig2;

  canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  canfilterconfig2.FilterBank = 15;  // which filter bank to use from the assigned ones
 8000daa:	230f      	movs	r3, #15
 8000dac:	617b      	str	r3, [r7, #20]
  canfilterconfig2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
  canfilterconfig2.FilterIdHigh = 0x0000;
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
  canfilterconfig2.FilterIdLow = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  canfilterconfig2.FilterMaskIdHigh = 0xFFFF;
 8000dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbe:	60bb      	str	r3, [r7, #8]
  canfilterconfig2.FilterMaskIdLow = 0xFFFC;
 8000dc0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000dc4:	60fb      	str	r3, [r7, #12]
  canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61fb      	str	r3, [r7, #28]
  canfilterconfig2.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000dce:	230e      	movs	r3, #14
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2);
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_CAN2_Init+0xa0>)
 8000dd8:	f001 fda8 	bl	800292c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000100 	.word	0x20000100
 8000de8:	40006800 	.word	0x40006800

08000dec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <MX_SPI1_Init+0x64>)
 8000df4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e32:	220a      	movs	r2, #10
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_SPI1_Init+0x60>)
 8000e38:	f003 fee0 	bl	8004bfc <HAL_SPI_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000e42:	f001 f8dd 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000128 	.word	0x20000128
 8000e50:	40013000 	.word	0x40013000

08000e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e72:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <MX_TIM1_Init+0x9c>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e78:	22b4      	movs	r2, #180	; 0xb4
 8000e7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <MX_TIM1_Init+0x98>)
 8000e9e:	f004 fb03 	bl	80054a8 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ea8:	f001 f8aa 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_TIM1_Init+0x98>)
 8000eba:	f004 fbad 	bl	8005618 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ec4:	f001 f89c 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_TIM1_Init+0x98>)
 8000ed6:	f004 fda1 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ee0:	f001 f88e 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000240 	.word	0x20000240
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <MX_TIM8_Init+0x9c>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f18:	22b4      	movs	r2, #180	; 0xb4
 8000f1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f3c:	4813      	ldr	r0, [pc, #76]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f3e:	f004 fab3 	bl	80054a8 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000f48:	f001 f85a 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f5a:	f004 fb5d 	bl	8005618 <HAL_TIM_ConfigClockSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000f64:	f001 f84c 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_TIM8_Init+0x98>)
 8000f76:	f004 fd51 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000f80:	f001 f83e 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000288 	.word	0x20000288
 8000f90:	40010400 	.word	0x40010400

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2038      	movs	r0, #56	; 0x38
 8000fbc:	f002 faed 	bl	800359a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fc0:	2038      	movs	r0, #56	; 0x38
 8000fc2:	f002 fb06 	bl	80035d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	203b      	movs	r0, #59	; 0x3b
 8000fcc:	f002 fae5 	bl	800359a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fd0:	203b      	movs	r0, #59	; 0x3b
 8000fd2:	f002 fafe 	bl	80035d2 <HAL_NVIC_EnableIRQ>

}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <MX_GPIO_Init+0x134>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a45      	ldr	r2, [pc, #276]	; (8001118 <MX_GPIO_Init+0x134>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b43      	ldr	r3, [pc, #268]	; (8001118 <MX_GPIO_Init+0x134>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <MX_GPIO_Init+0x134>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a3e      	ldr	r2, [pc, #248]	; (8001118 <MX_GPIO_Init+0x134>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b3c      	ldr	r3, [pc, #240]	; (8001118 <MX_GPIO_Init+0x134>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_GPIO_Init+0x134>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a37      	ldr	r2, [pc, #220]	; (8001118 <MX_GPIO_Init+0x134>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <MX_GPIO_Init+0x134>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <MX_GPIO_Init+0x134>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a30      	ldr	r2, [pc, #192]	; (8001118 <MX_GPIO_Init+0x134>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <MX_GPIO_Init+0x134>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001070:	482a      	ldr	r0, [pc, #168]	; (800111c <MX_GPIO_Init+0x138>)
 8001072:	f002 ff81 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4824      	ldr	r0, [pc, #144]	; (8001120 <MX_GPIO_Init+0x13c>)
 800108e:	f002 fdc7 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001092:	2303      	movs	r3, #3
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	481d      	ldr	r0, [pc, #116]	; (800111c <MX_GPIO_Init+0x138>)
 80010a6:	f002 fdbb 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <MX_GPIO_Init+0x138>)
 80010c4:	f002 fdac 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <MX_GPIO_Init+0x13c>)
 80010de:	f002 fd9f 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <MX_GPIO_Init+0x140>)
 80010fa:	f002 fd91 	bl	8003c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2028      	movs	r0, #40	; 0x28
 8001104:	f002 fa49 	bl	800359a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001108:	2028      	movs	r0, #40	; 0x28
 800110a:	f002 fa62 	bl	80035d2 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020000 	.word	0x40020000

08001128 <_write>:
/* USER CODE BEGIN 4 */

//Printfunction

int _write(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e009      	b.n	800114e <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fc02 	bl	800094c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbf1      	blt.n	800113a <_write+0x12>
	}
	return len;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <motor_mode>:


///////////////////////////modes/////////////////////////////////

//Start motor
void motor_mode(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	601a      	str	r2, [r3, #0]
    Data[0] = 0xFF;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	22ff      	movs	r2, #255	; 0xff
 8001178:	701a      	strb	r2, [r3, #0]
    Data[1] = 0xFF;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3301      	adds	r3, #1
 800117e:	22ff      	movs	r2, #255	; 0xff
 8001180:	701a      	strb	r2, [r3, #0]
    Data[2] = 0xFF;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3302      	adds	r3, #2
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	701a      	strb	r2, [r3, #0]
    Data[3] = 0xFF;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3303      	adds	r3, #3
 800118e:	22ff      	movs	r2, #255	; 0xff
 8001190:	701a      	strb	r2, [r3, #0]
    Data[4] = 0xFF;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3304      	adds	r3, #4
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	701a      	strb	r2, [r3, #0]
    Data[5] = 0xFF;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3305      	adds	r3, #5
 800119e:	22ff      	movs	r2, #255	; 0xff
 80011a0:	701a      	strb	r2, [r3, #0]
    Data[6] = 0xFF;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3306      	adds	r3, #6
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	701a      	strb	r2, [r3, #0]
    Data[7] = 0xFC;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3307      	adds	r3, #7
 80011ae:	22fc      	movs	r2, #252	; 0xfc
 80011b0:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <motor_mode+0x78>)
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4909      	ldr	r1, [pc, #36]	; (80011dc <motor_mode+0x7c>)
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <motor_mode+0x80>)
 80011ba:	f001 fcdb 	bl	8002b74 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <motor_mode+0x78>)
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4906      	ldr	r1, [pc, #24]	; (80011dc <motor_mode+0x7c>)
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <motor_mode+0x84>)
 80011c6:	f001 fcd5 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 80011ca:	20c8      	movs	r0, #200	; 0xc8
 80011cc:	f000 fe5c 	bl	8001e88 <delay_us>
	//wait(100);
    }
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000598 	.word	0x20000598
 80011dc:	20000554 	.word	0x20000554
 80011e0:	200000d8 	.word	0x200000d8
 80011e4:	20000100 	.word	0x20000100

080011e8 <exit_mode>:

//stop motor
void exit_mode(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	601a      	str	r2, [r3, #0]
    Data[0] = 0xFF;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	701a      	strb	r2, [r3, #0]
    Data[1] = 0xFF;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3301      	adds	r3, #1
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	701a      	strb	r2, [r3, #0]
    Data[2] = 0xFF;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3302      	adds	r3, #2
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	701a      	strb	r2, [r3, #0]
    Data[3] = 0xFF;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3303      	adds	r3, #3
 8001216:	22ff      	movs	r2, #255	; 0xff
 8001218:	701a      	strb	r2, [r3, #0]
    Data[4] = 0xFF;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	701a      	strb	r2, [r3, #0]
    Data[5] = 0xFF;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3305      	adds	r3, #5
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	701a      	strb	r2, [r3, #0]
    Data[6] = 0xFF;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3306      	adds	r3, #6
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	701a      	strb	r2, [r3, #0]
    Data[7] = 0xFD;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3307      	adds	r3, #7
 8001236:	22fd      	movs	r2, #253	; 0xfd
 8001238:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <exit_mode+0x78>)
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4909      	ldr	r1, [pc, #36]	; (8001264 <exit_mode+0x7c>)
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <exit_mode+0x80>)
 8001242:	f001 fc97 	bl	8002b74 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <exit_mode+0x78>)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4906      	ldr	r1, [pc, #24]	; (8001264 <exit_mode+0x7c>)
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <exit_mode+0x84>)
 800124e:	f001 fc91 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 8001252:	20c8      	movs	r0, #200	; 0xc8
 8001254:	f000 fe18 	bl	8001e88 <delay_us>
	//wait(100);
    }
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000598 	.word	0x20000598
 8001264:	20000554 	.word	0x20000554
 8001268:	200000d8 	.word	0x200000d8
 800126c:	20000100 	.word	0x20000100

08001270 <zero>:

//set motorposition to zero
void zero(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	601a      	str	r2, [r3, #0]
    Data[0] = 0xFF;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	22ff      	movs	r2, #255	; 0xff
 8001288:	701a      	strb	r2, [r3, #0]
    Data[1] = 0xFF;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3301      	adds	r3, #1
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	701a      	strb	r2, [r3, #0]
    Data[2] = 0xFF;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3302      	adds	r3, #2
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	701a      	strb	r2, [r3, #0]
    Data[3] = 0xFF;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3303      	adds	r3, #3
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	701a      	strb	r2, [r3, #0]
    Data[4] = 0xFF;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	22ff      	movs	r2, #255	; 0xff
 80012a8:	701a      	strb	r2, [r3, #0]
    Data[5] = 0xFF;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3305      	adds	r3, #5
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	701a      	strb	r2, [r3, #0]
    Data[6] = 0xFF;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3306      	adds	r3, #6
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	701a      	strb	r2, [r3, #0]
    Data[7] = 0xFE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3307      	adds	r3, #7
 80012be:	22fe      	movs	r2, #254	; 0xfe
 80012c0:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <zero+0x78>)
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <zero+0x7c>)
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <zero+0x80>)
 80012ca:	f001 fc53 	bl	8002b74 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <zero+0x78>)
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4906      	ldr	r1, [pc, #24]	; (80012ec <zero+0x7c>)
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <zero+0x84>)
 80012d6:	f001 fc4d 	bl	8002b74 <HAL_CAN_AddTxMessage>
    	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
    }
    if(CAN==1){
    	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
    }*/
    delay_us(200);
 80012da:	20c8      	movs	r0, #200	; 0xc8
 80012dc:	f000 fdd4 	bl	8001e88 <delay_us>
	//wait(100);
    }
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000598 	.word	0x20000598
 80012ec:	20000554 	.word	0x20000554
 80012f0:	200000d8 	.word	0x200000d8
 80012f4:	20000100 	.word	0x20000100

080012f8 <pack_message>:

/////////////////////////pack and unpack//////////////////////////

void pack_message(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	73fb      	strb	r3, [r7, #15]

		state.flags[0] = 0;
 8001306:	4bb4      	ldr	r3, [pc, #720]	; (80015d8 <pack_message+0x2e0>)
 8001308:	2200      	movs	r2, #0
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
		state.flags[1] = 0;
 800130c:	4bb2      	ldr	r3, [pc, #712]	; (80015d8 <pack_message+0x2e0>)
 800130e:	2200      	movs	r2, #0
 8001310:	635a      	str	r2, [r3, #52]	; 0x34

		if(ID==1){
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d151      	bne.n	80013bc <pack_message+0xc4>
			state.flags[CAN] |= softstop_joint(&control.ab_p[CAN],state.ab_p[CAN],1.5, -1.5);
 8001318:	4bb0      	ldr	r3, [pc, #704]	; (80015dc <pack_message+0x2e4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4ab0      	ldr	r2, [pc, #704]	; (80015e0 <pack_message+0x2e8>)
 8001320:	441a      	add	r2, r3
 8001322:	4bae      	ldr	r3, [pc, #696]	; (80015dc <pack_message+0x2e4>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	49ac      	ldr	r1, [pc, #688]	; (80015d8 <pack_message+0x2e0>)
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eebf 1a08 	vmov.f32	s2, #248	; 0xbfc00000 -1.5
 8001334:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	4610      	mov	r0, r2
 800133e:	f000 fd2f 	bl	8001da0 <softstop_joint>
 8001342:	4601      	mov	r1, r0
 8001344:	4ba5      	ldr	r3, [pc, #660]	; (80015dc <pack_message+0x2e4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4aa3      	ldr	r2, [pc, #652]	; (80015d8 <pack_message+0x2e0>)
 800134a:	330c      	adds	r3, #12
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	4aa2      	ldr	r2, [pc, #648]	; (80015dc <pack_message+0x2e4>)
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	4610      	mov	r0, r2
 8001356:	ea43 0201 	orr.w	r2, r3, r1
 800135a:	499f      	ldr	r1, [pc, #636]	; (80015d8 <pack_message+0x2e0>)
 800135c:	f100 030c 	add.w	r3, r0, #12
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = control.ab_p[CAN];
 8001364:	4b9d      	ldr	r3, [pc, #628]	; (80015dc <pack_message+0x2e4>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4a9d      	ldr	r2, [pc, #628]	; (80015e0 <pack_message+0x2e8>)
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a9c      	ldr	r2, [pc, #624]	; (80015e4 <pack_message+0x2ec>)
 8001372:	6013      	str	r3, [r2, #0]
			v_in = control.ab_v[CAN];
 8001374:	4b99      	ldr	r3, [pc, #612]	; (80015dc <pack_message+0x2e4>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4a99      	ldr	r2, [pc, #612]	; (80015e0 <pack_message+0x2e8>)
 800137a:	3306      	adds	r3, #6
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a99      	ldr	r2, [pc, #612]	; (80015e8 <pack_message+0x2f0>)
 8001384:	6013      	str	r3, [r2, #0]
			kp_in = control.ab_kp[CAN];   //stifness
 8001386:	4b95      	ldr	r3, [pc, #596]	; (80015dc <pack_message+0x2e4>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4a95      	ldr	r2, [pc, #596]	; (80015e0 <pack_message+0x2e8>)
 800138c:	330c      	adds	r3, #12
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a95      	ldr	r2, [pc, #596]	; (80015ec <pack_message+0x2f4>)
 8001396:	6013      	str	r3, [r2, #0]
			kd_in = control.ab_kd[CAN];     //damper
 8001398:	4b90      	ldr	r3, [pc, #576]	; (80015dc <pack_message+0x2e4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4a90      	ldr	r2, [pc, #576]	; (80015e0 <pack_message+0x2e8>)
 800139e:	3312      	adds	r3, #18
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a92      	ldr	r2, [pc, #584]	; (80015f0 <pack_message+0x2f8>)
 80013a8:	6013      	str	r3, [r2, #0]
			t_in = control.ab_t[CAN];
 80013aa:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <pack_message+0x2e4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4a8c      	ldr	r2, [pc, #560]	; (80015e0 <pack_message+0x2e8>)
 80013b0:	3318      	adds	r3, #24
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a8e      	ldr	r2, [pc, #568]	; (80015f4 <pack_message+0x2fc>)
 80013ba:	6013      	str	r3, [r2, #0]
	    	}
		if(ID==2){
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d155      	bne.n	800146e <pack_message+0x176>
			state.flags[CAN] |= softstop_joint(&control.hip_p[CAN],state.hip_p[CAN],2.5, -2.5)<<1;
 80013c2:	4b86      	ldr	r3, [pc, #536]	; (80015dc <pack_message+0x2e4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3302      	adds	r3, #2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4a85      	ldr	r2, [pc, #532]	; (80015e0 <pack_message+0x2e8>)
 80013cc:	441a      	add	r2, r3
 80013ce:	4b83      	ldr	r3, [pc, #524]	; (80015dc <pack_message+0x2e4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4981      	ldr	r1, [pc, #516]	; (80015d8 <pack_message+0x2e0>)
 80013d4:	3302      	adds	r3, #2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eeb8 1a04 	vmov.f32	s2, #132	; 0xc0200000 -2.5
 80013e2:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	4610      	mov	r0, r2
 80013ec:	f000 fcd8 	bl	8001da0 <softstop_joint>
 80013f0:	4603      	mov	r3, r0
 80013f2:	0059      	lsls	r1, r3, #1
 80013f4:	4b79      	ldr	r3, [pc, #484]	; (80015dc <pack_message+0x2e4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <pack_message+0x2e0>)
 80013fa:	330c      	adds	r3, #12
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	4a76      	ldr	r2, [pc, #472]	; (80015dc <pack_message+0x2e4>)
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	4610      	mov	r0, r2
 8001406:	ea43 0201 	orr.w	r2, r3, r1
 800140a:	4973      	ldr	r1, [pc, #460]	; (80015d8 <pack_message+0x2e0>)
 800140c:	f100 030c 	add.w	r3, r0, #12
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = control.hip_p[CAN];
 8001414:	4b71      	ldr	r3, [pc, #452]	; (80015dc <pack_message+0x2e4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4a71      	ldr	r2, [pc, #452]	; (80015e0 <pack_message+0x2e8>)
 800141a:	3302      	adds	r3, #2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a70      	ldr	r2, [pc, #448]	; (80015e4 <pack_message+0x2ec>)
 8001424:	6013      	str	r3, [r2, #0]
			v_in = control.hip_v[CAN];
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <pack_message+0x2e4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4a6d      	ldr	r2, [pc, #436]	; (80015e0 <pack_message+0x2e8>)
 800142c:	3308      	adds	r3, #8
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <pack_message+0x2f0>)
 8001436:	6013      	str	r3, [r2, #0]
			kp_in = control.hip_kp[CAN];   //stifness
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <pack_message+0x2e4>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4a68      	ldr	r2, [pc, #416]	; (80015e0 <pack_message+0x2e8>)
 800143e:	330e      	adds	r3, #14
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a69      	ldr	r2, [pc, #420]	; (80015ec <pack_message+0x2f4>)
 8001448:	6013      	str	r3, [r2, #0]
			kd_in = control.hip_kd[CAN];     //damper
 800144a:	4b64      	ldr	r3, [pc, #400]	; (80015dc <pack_message+0x2e4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4a64      	ldr	r2, [pc, #400]	; (80015e0 <pack_message+0x2e8>)
 8001450:	3314      	adds	r3, #20
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <pack_message+0x2f8>)
 800145a:	6013      	str	r3, [r2, #0]
			t_in = control.hip_t[CAN];
 800145c:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <pack_message+0x2e4>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4a5f      	ldr	r2, [pc, #380]	; (80015e0 <pack_message+0x2e8>)
 8001462:	331a      	adds	r3, #26
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a62      	ldr	r2, [pc, #392]	; (80015f4 <pack_message+0x2fc>)
 800146c:	6013      	str	r3, [r2, #0]
	    	}
		if(ID==3){
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d155      	bne.n	8001520 <pack_message+0x228>
			state.flags[CAN] |= softstop_joint(&control.knee_p[CAN], state.knee_p[CAN],7.3, -0.2)<<2;
 8001474:	4b59      	ldr	r3, [pc, #356]	; (80015dc <pack_message+0x2e4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3304      	adds	r3, #4
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <pack_message+0x2e8>)
 800147e:	441a      	add	r2, r3
 8001480:	4b56      	ldr	r3, [pc, #344]	; (80015dc <pack_message+0x2e4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4954      	ldr	r1, [pc, #336]	; (80015d8 <pack_message+0x2e0>)
 8001486:	3304      	adds	r3, #4
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80015f8 <pack_message+0x300>
 8001494:	eddf 0a59 	vldr	s1, [pc, #356]	; 80015fc <pack_message+0x304>
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	4610      	mov	r0, r2
 800149e:	f000 fc7f 	bl	8001da0 <softstop_joint>
 80014a2:	4603      	mov	r3, r0
 80014a4:	0099      	lsls	r1, r3, #2
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <pack_message+0x2e4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <pack_message+0x2e0>)
 80014ac:	330c      	adds	r3, #12
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <pack_message+0x2e4>)
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	4610      	mov	r0, r2
 80014b8:	ea43 0201 	orr.w	r2, r3, r1
 80014bc:	4946      	ldr	r1, [pc, #280]	; (80015d8 <pack_message+0x2e0>)
 80014be:	f100 030c 	add.w	r3, r0, #12
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = control.knee_p[CAN];
 80014c6:	4b45      	ldr	r3, [pc, #276]	; (80015dc <pack_message+0x2e4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4a45      	ldr	r2, [pc, #276]	; (80015e0 <pack_message+0x2e8>)
 80014cc:	3304      	adds	r3, #4
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <pack_message+0x2ec>)
 80014d6:	6013      	str	r3, [r2, #0]
			v_in = control.knee_v[CAN];
 80014d8:	4b40      	ldr	r3, [pc, #256]	; (80015dc <pack_message+0x2e4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4a40      	ldr	r2, [pc, #256]	; (80015e0 <pack_message+0x2e8>)
 80014de:	330a      	adds	r3, #10
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a40      	ldr	r2, [pc, #256]	; (80015e8 <pack_message+0x2f0>)
 80014e8:	6013      	str	r3, [r2, #0]
			kp_in = control.knee_kp[CAN];   //stifness
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <pack_message+0x2e4>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4a3c      	ldr	r2, [pc, #240]	; (80015e0 <pack_message+0x2e8>)
 80014f0:	3310      	adds	r3, #16
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3c      	ldr	r2, [pc, #240]	; (80015ec <pack_message+0x2f4>)
 80014fa:	6013      	str	r3, [r2, #0]
			kd_in = control.knee_kd[CAN];     //damper
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <pack_message+0x2e4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4a37      	ldr	r2, [pc, #220]	; (80015e0 <pack_message+0x2e8>)
 8001502:	3316      	adds	r3, #22
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a39      	ldr	r2, [pc, #228]	; (80015f0 <pack_message+0x2f8>)
 800150c:	6013      	str	r3, [r2, #0]
			t_in = control.knee_t[CAN];
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <pack_message+0x2e4>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <pack_message+0x2e8>)
 8001514:	331c      	adds	r3, #28
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a35      	ldr	r2, [pc, #212]	; (80015f4 <pack_message+0x2fc>)
 800151e:	6013      	str	r3, [r2, #0]
	    	}

	Header->StdId = ID;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	601a      	str	r2, [r3, #0]

    /// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, p_in), P_MAX);
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <pack_message+0x2ec>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	eef0 0a67 	vmov.f32	s1, s15
 8001530:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001534:	f005 f81e 	bl	8006574 <fmaxf>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	f005 f831 	bl	80065aa <fminf>
 8001548:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float v_des = fminf(fmaxf(V_MIN, v_in), V_MAX);
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <pack_message+0x2f0>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eef0 0a67 	vmov.f32	s1, s15
 8001556:	eebb 0a0a 	vmov.f32	s0, #186	; 0xc1d00000 -26.0
 800155a:	f005 f80b 	bl	8006574 <fmaxf>
 800155e:	eef0 7a40 	vmov.f32	s15, s0
 8001562:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	f005 f81e 	bl	80065aa <fminf>
 800156e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float kp = fminf(fmaxf(KP_MIN, kp_in), KP_MAX);
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <pack_message+0x2f4>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eef0 0a67 	vmov.f32	s1, s15
 800157c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001604 <pack_message+0x30c>
 8001580:	f004 fff8 	bl	8006574 <fmaxf>
 8001584:	eef0 7a40 	vmov.f32	s15, s0
 8001588:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001600 <pack_message+0x308>
 800158c:	eeb0 0a67 	vmov.f32	s0, s15
 8001590:	f005 f80b 	bl	80065aa <fminf>
 8001594:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float kd = fminf(fmaxf(KD_MIN, kd_in), KD_MAX);
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <pack_message+0x2f8>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	eef0 0a67 	vmov.f32	s1, s15
 80015a2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001604 <pack_message+0x30c>
 80015a6:	f004 ffe5 	bl	8006574 <fmaxf>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	f004 fff8 	bl	80065aa <fminf>
 80015ba:	ed87 0a08 	vstr	s0, [r7, #32]
	float t_ff = fminf(fmaxf(T_MIN, t_in), T_MAX);
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <pack_message+0x2fc>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	eef0 0a67 	vmov.f32	s1, s15
 80015c8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800160c <pack_message+0x314>
 80015cc:	f004 ffd2 	bl	8006574 <fmaxf>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	e01c      	b.n	8001610 <pack_message+0x318>
 80015d6:	bf00      	nop
 80015d8:	200004e0 	.word	0x200004e0
 80015dc:	20000550 	.word	0x20000550
 80015e0:	2000045c 	.word	0x2000045c
 80015e4:	20000538 	.word	0x20000538
 80015e8:	2000053c 	.word	0x2000053c
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004
 80015f4:	20000540 	.word	0x20000540
 80015f8:	be4ccccd 	.word	0xbe4ccccd
 80015fc:	40e9999a 	.word	0x40e9999a
 8001600:	43fa0000 	.word	0x43fa0000
 8001604:	00000000 	.word	0x00000000
 8001608:	42400000 	.word	0x42400000
 800160c:	c2400000 	.word	0xc2400000
 8001610:	ed5f 0a03 	vldr	s1, [pc, #-12]	; 8001608 <pack_message+0x310>
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	f004 ffc7 	bl	80065aa <fminf>
 800161c:	ed87 0a07 	vstr	s0, [r7, #28]

    /// convert floats to unsigned ints ///
    uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001620:	2010      	movs	r0, #16
 8001622:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8001626:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 800162a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800162e:	f000 fb51 	bl	8001cd4 <float_to_uint>
 8001632:	4603      	mov	r3, r0
 8001634:	837b      	strh	r3, [r7, #26]
    uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8001636:	200c      	movs	r0, #12
 8001638:	eeb3 1a0a 	vmov.f32	s2, #58	; 0x41d00000  26.0
 800163c:	eefb 0a0a 	vmov.f32	s1, #186	; 0xc1d00000 -26.0
 8001640:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001644:	f000 fb46 	bl	8001cd4 <float_to_uint>
 8001648:	4603      	mov	r3, r0
 800164a:	833b      	strh	r3, [r7, #24]
    uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 800164c:	200c      	movs	r0, #12
 800164e:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 8001600 <pack_message+0x308>
 8001652:	ed5f 0a14 	vldr	s1, [pc, #-80]	; 8001604 <pack_message+0x30c>
 8001656:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800165a:	f000 fb3b 	bl	8001cd4 <float_to_uint>
 800165e:	4603      	mov	r3, r0
 8001660:	82fb      	strh	r3, [r7, #22]
    uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001662:	200c      	movs	r0, #12
 8001664:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001668:	ed5f 0a1a 	vldr	s1, [pc, #-104]	; 8001604 <pack_message+0x30c>
 800166c:	ed97 0a08 	vldr	s0, [r7, #32]
 8001670:	f000 fb30 	bl	8001cd4 <float_to_uint>
 8001674:	4603      	mov	r3, r0
 8001676:	82bb      	strh	r3, [r7, #20]
    uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8001678:	200c      	movs	r0, #12
 800167a:	ed1f 1a1d 	vldr	s2, [pc, #-116]	; 8001608 <pack_message+0x310>
 800167e:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 800160c <pack_message+0x314>
 8001682:	ed97 0a07 	vldr	s0, [r7, #28]
 8001686:	f000 fb25 	bl	8001cd4 <float_to_uint>
 800168a:	4603      	mov	r3, r0
 800168c:	827b      	strh	r3, [r7, #18]

    /// pack ints into the can buffer ///
    Data[0] = p_int>>8;
 800168e:	8b7b      	ldrh	r3, [r7, #26]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	701a      	strb	r2, [r3, #0]
    Data[1] = p_int&0xFF;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	8b7a      	ldrh	r2, [r7, #26]
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
    Data[2] = v_int>>4;
 80016a4:	8b3b      	ldrh	r3, [r7, #24]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3302      	adds	r3, #2
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
    Data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80016b2:	8b3b      	ldrh	r3, [r7, #24]
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	8afb      	ldrh	r3, [r7, #22]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3303      	adds	r3, #3
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]
    Data[4] = kp_int&0xFF;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3304      	adds	r3, #4
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
    Data[5] = kd_int>>4;
 80016d6:	8abb      	ldrh	r3, [r7, #20]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3305      	adds	r3, #5
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
    Data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80016e4:	8abb      	ldrh	r3, [r7, #20]
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	8a7b      	ldrh	r3, [r7, #18]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3306      	adds	r3, #6
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
    Data[7] = t_int&0xff;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3307      	adds	r3, #7
 8001702:	8a7a      	ldrh	r2, [r7, #18]
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
    }
 8001708:	bf00      	nop
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <unpack_replay>:


void unpack_replay(uint8_t*Data){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	/// unpack ints from can buffer ///

	uint16_t id = Data[0];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	81fb      	strh	r3, [r7, #14]
	uint16_t p_int = (Data[1]<<8)|Data[2];
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3302      	adds	r3, #2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21b      	sxth	r3, r3
 8001734:	81bb      	strh	r3, [r7, #12]
	uint16_t v_int = (Data[3]<<4)|(Data[4]>>4);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3303      	adds	r3, #3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	b21a      	sxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3304      	adds	r3, #4
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	b2db      	uxtb	r3, r3
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	817b      	strh	r3, [r7, #10]
	uint16_t i_int = ((Data[4]&0xF)<<8)|Data[5];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3304      	adds	r3, #4
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	b21b      	sxth	r3, r3
 800175c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001760:	b21a      	sxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3305      	adds	r3, #5
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b21b      	sxth	r3, r3
 800176a:	4313      	orrs	r3, r2
 800176c:	b21b      	sxth	r3, r3
 800176e:	813b      	strh	r3, [r7, #8]
	/// convert uints to floats ///
	p_out = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001770:	89bb      	ldrh	r3, [r7, #12]
 8001772:	2110      	movs	r1, #16
 8001774:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001778:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fadc 	bl	8001d3a <uint_to_float>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <unpack_replay+0x16c>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
	v_out = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800178c:	897b      	ldrh	r3, [r7, #10]
 800178e:	210c      	movs	r1, #12
 8001790:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8001794:	eebb 0a0a 	vmov.f32	s0, #186	; 0xc1d00000 -26.0
 8001798:	4618      	mov	r0, r3
 800179a:	f000 face 	bl	8001d3a <uint_to_float>
 800179e:	eef0 7a40 	vmov.f32	s15, s0
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <unpack_replay+0x170>)
 80017a4:	edc3 7a00 	vstr	s15, [r3]
	t_out = uint_to_float(i_int, T_MAX, T_MAX, 12);
 80017a8:	893b      	ldrh	r3, [r7, #8]
 80017aa:	210c      	movs	r1, #12
 80017ac:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001884 <unpack_replay+0x174>
 80017b0:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8001884 <unpack_replay+0x174>
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fac0 	bl	8001d3a <uint_to_float>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	4b32      	ldr	r3, [pc, #200]	; (8001888 <unpack_replay+0x178>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]

	if(id==1){
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d118      	bne.n	80017fc <unpack_replay+0xec>
		state.ab_p[datacheck]=p_out;
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <unpack_replay+0x17c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2b      	ldr	r2, [pc, #172]	; (800187c <unpack_replay+0x16c>)
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	492f      	ldr	r1, [pc, #188]	; (8001890 <unpack_replay+0x180>)
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	601a      	str	r2, [r3, #0]
		state.ab_v[datacheck]=v_out;
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <unpack_replay+0x17c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a28      	ldr	r2, [pc, #160]	; (8001880 <unpack_replay+0x170>)
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	492b      	ldr	r1, [pc, #172]	; (8001890 <unpack_replay+0x180>)
 80017e4:	3306      	adds	r3, #6
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	601a      	str	r2, [r3, #0]
		//state.ab_t[datacheck]=t_out;
		torque.ab_t[datacheck]=t_out;
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <unpack_replay+0x17c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a25      	ldr	r2, [pc, #148]	; (8001888 <unpack_replay+0x178>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	4927      	ldr	r1, [pc, #156]	; (8001894 <unpack_replay+0x184>)
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	601a      	str	r2, [r3, #0]
	}
	if(id==2){
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d11a      	bne.n	8001838 <unpack_replay+0x128>
		state.hip_p[datacheck]=p_out;
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <unpack_replay+0x17c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <unpack_replay+0x16c>)
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	4921      	ldr	r1, [pc, #132]	; (8001890 <unpack_replay+0x180>)
 800180c:	3302      	adds	r3, #2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	601a      	str	r2, [r3, #0]
		state.hip_v[datacheck]=v_out;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <unpack_replay+0x17c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <unpack_replay+0x170>)
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	491c      	ldr	r1, [pc, #112]	; (8001890 <unpack_replay+0x180>)
 800181e:	3308      	adds	r3, #8
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	601a      	str	r2, [r3, #0]
		//state.hip_t[datacheck]=t_out;
		torque.hip_t[datacheck]=t_out;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <unpack_replay+0x17c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <unpack_replay+0x178>)
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	4919      	ldr	r1, [pc, #100]	; (8001894 <unpack_replay+0x184>)
 8001830:	3302      	adds	r3, #2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	601a      	str	r2, [r3, #0]
	}
	if(id==3){
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d11a      	bne.n	8001874 <unpack_replay+0x164>
		state.knee_p[datacheck]=p_out;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <unpack_replay+0x17c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <unpack_replay+0x16c>)
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4912      	ldr	r1, [pc, #72]	; (8001890 <unpack_replay+0x180>)
 8001848:	3304      	adds	r3, #4
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	601a      	str	r2, [r3, #0]
		state.knee_v[datacheck]=v_out;
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <unpack_replay+0x17c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <unpack_replay+0x170>)
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	490d      	ldr	r1, [pc, #52]	; (8001890 <unpack_replay+0x180>)
 800185a:	330a      	adds	r3, #10
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	601a      	str	r2, [r3, #0]
		//state.knee_t[datacheck]=t_out;
		torque.knee_t[datacheck]=t_out;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <unpack_replay+0x17c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <unpack_replay+0x178>)
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	490a      	ldr	r1, [pc, #40]	; (8001894 <unpack_replay+0x184>)
 800186c:	3304      	adds	r3, #4
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	601a      	str	r2, [r3, #0]
    }
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000544 	.word	0x20000544
 8001880:	20000548 	.word	0x20000548
 8001884:	42400000 	.word	0x42400000
 8001888:	2000054c 	.word	0x2000054c
 800188c:	20000010 	.word	0x20000010
 8001890:	200004e0 	.word	0x200004e0
 8001894:	2000051c 	.word	0x2000051c

08001898 <can_send_receive>:
/////////////////////////////////math/////////////////////////////////////////
void can_send_receive(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0


	CAN=0;
 800189c:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <can_send_receive+0x128>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
	pack_message(Ab_CAN, &TxHeader, TxData);
 80018a2:	4b48      	ldr	r3, [pc, #288]	; (80019c4 <can_send_receive+0x12c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <can_send_receive+0x130>)
 80018a8:	4948      	ldr	r1, [pc, #288]	; (80019cc <can_send_receive+0x134>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fd24 	bl	80012f8 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <can_send_receive+0x138>)
 80018b2:	4a45      	ldr	r2, [pc, #276]	; (80019c8 <can_send_receive+0x130>)
 80018b4:	4945      	ldr	r1, [pc, #276]	; (80019cc <can_send_receive+0x134>)
 80018b6:	4847      	ldr	r0, [pc, #284]	; (80019d4 <can_send_receive+0x13c>)
 80018b8:	f001 f95c 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 80018bc:	20c8      	movs	r0, #200	; 0xc8
 80018be:	f000 fae3 	bl	8001e88 <delay_us>
	//wait(100);
	if (datacheck==0){
 80018c2:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <can_send_receive+0x140>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <can_send_receive+0x38>
		unpack_replay(RxData);
 80018ca:	4844      	ldr	r0, [pc, #272]	; (80019dc <can_send_receive+0x144>)
 80018cc:	f7ff ff20 	bl	8001710 <unpack_replay>
	}
	pack_message(Hip_CAN, &TxHeader, TxData);
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <can_send_receive+0x148>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4a3c      	ldr	r2, [pc, #240]	; (80019c8 <can_send_receive+0x130>)
 80018d6:	493d      	ldr	r1, [pc, #244]	; (80019cc <can_send_receive+0x134>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd0d 	bl	80012f8 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80018de:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <can_send_receive+0x138>)
 80018e0:	4a39      	ldr	r2, [pc, #228]	; (80019c8 <can_send_receive+0x130>)
 80018e2:	493a      	ldr	r1, [pc, #232]	; (80019cc <can_send_receive+0x134>)
 80018e4:	483b      	ldr	r0, [pc, #236]	; (80019d4 <can_send_receive+0x13c>)
 80018e6:	f001 f945 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 80018ea:	20c8      	movs	r0, #200	; 0xc8
 80018ec:	f000 facc 	bl	8001e88 <delay_us>
	//wait(100);
	if (datacheck==0){
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <can_send_receive+0x140>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <can_send_receive+0x66>
		unpack_replay(RxData);
 80018f8:	4838      	ldr	r0, [pc, #224]	; (80019dc <can_send_receive+0x144>)
 80018fa:	f7ff ff09 	bl	8001710 <unpack_replay>
	}
	pack_message(Knee_CAN, &TxHeader, TxData);
 80018fe:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <can_send_receive+0x14c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <can_send_receive+0x130>)
 8001904:	4931      	ldr	r1, [pc, #196]	; (80019cc <can_send_receive+0x134>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fcf6 	bl	80012f8 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <can_send_receive+0x138>)
 800190e:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <can_send_receive+0x130>)
 8001910:	492e      	ldr	r1, [pc, #184]	; (80019cc <can_send_receive+0x134>)
 8001912:	4830      	ldr	r0, [pc, #192]	; (80019d4 <can_send_receive+0x13c>)
 8001914:	f001 f92e 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 8001918:	20c8      	movs	r0, #200	; 0xc8
 800191a:	f000 fab5 	bl	8001e88 <delay_us>
	//wait(100);
	if (datacheck==0){
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <can_send_receive+0x140>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <can_send_receive+0x94>
		unpack_replay(RxData);
 8001926:	482d      	ldr	r0, [pc, #180]	; (80019dc <can_send_receive+0x144>)
 8001928:	f7ff fef2 	bl	8001710 <unpack_replay>
	}

	CAN=1;
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <can_send_receive+0x128>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
	pack_message(Ab_CAN, &TxHeader, TxData);
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <can_send_receive+0x12c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <can_send_receive+0x130>)
 8001938:	4924      	ldr	r1, [pc, #144]	; (80019cc <can_send_receive+0x134>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fcdc 	bl	80012f8 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <can_send_receive+0x138>)
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <can_send_receive+0x130>)
 8001944:	4921      	ldr	r1, [pc, #132]	; (80019cc <can_send_receive+0x134>)
 8001946:	4828      	ldr	r0, [pc, #160]	; (80019e8 <can_send_receive+0x150>)
 8001948:	f001 f914 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 800194c:	20c8      	movs	r0, #200	; 0xc8
 800194e:	f000 fa9b 	bl	8001e88 <delay_us>
	//wait(100);
	if (datacheck==1){
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <can_send_receive+0x140>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <can_send_receive+0xc8>
		unpack_replay(RxData);
 800195a:	4820      	ldr	r0, [pc, #128]	; (80019dc <can_send_receive+0x144>)
 800195c:	f7ff fed8 	bl	8001710 <unpack_replay>
	}
	pack_message(Hip_CAN, &TxHeader, TxData);
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <can_send_receive+0x148>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <can_send_receive+0x130>)
 8001966:	4919      	ldr	r1, [pc, #100]	; (80019cc <can_send_receive+0x134>)
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fcc5 	bl	80012f8 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <can_send_receive+0x138>)
 8001970:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <can_send_receive+0x130>)
 8001972:	4916      	ldr	r1, [pc, #88]	; (80019cc <can_send_receive+0x134>)
 8001974:	481c      	ldr	r0, [pc, #112]	; (80019e8 <can_send_receive+0x150>)
 8001976:	f001 f8fd 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 800197a:	20c8      	movs	r0, #200	; 0xc8
 800197c:	f000 fa84 	bl	8001e88 <delay_us>
	//wait(100);
	if (datacheck==1){
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <can_send_receive+0x140>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d102      	bne.n	800198e <can_send_receive+0xf6>
		unpack_replay(RxData);
 8001988:	4814      	ldr	r0, [pc, #80]	; (80019dc <can_send_receive+0x144>)
 800198a:	f7ff fec1 	bl	8001710 <unpack_replay>
	}
	pack_message(Knee_CAN, &TxHeader, TxData);
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <can_send_receive+0x14c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <can_send_receive+0x130>)
 8001994:	490d      	ldr	r1, [pc, #52]	; (80019cc <can_send_receive+0x134>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fcae 	bl	80012f8 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <can_send_receive+0x138>)
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <can_send_receive+0x130>)
 80019a0:	490a      	ldr	r1, [pc, #40]	; (80019cc <can_send_receive+0x134>)
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <can_send_receive+0x150>)
 80019a4:	f001 f8e6 	bl	8002b74 <HAL_CAN_AddTxMessage>
    delay_us(200);
 80019a8:	20c8      	movs	r0, #200	; 0xc8
 80019aa:	f000 fa6d 	bl	8001e88 <delay_us>
	//wait(100);
	if (datacheck==1){
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <can_send_receive+0x140>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <can_send_receive+0x124>
		unpack_replay(RxData);
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <can_send_receive+0x144>)
 80019b8:	f7ff feaa 	bl	8001710 <unpack_replay>
	}

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000550 	.word	0x20000550
 80019c4:	2000000c 	.word	0x2000000c
 80019c8:	20000588 	.word	0x20000588
 80019cc:	20000554 	.word	0x20000554
 80019d0:	20000598 	.word	0x20000598
 80019d4:	200000d8 	.word	0x200000d8
 80019d8:	20000010 	.word	0x20000010
 80019dc:	20000590 	.word	0x20000590
 80019e0:	2000000d 	.word	0x2000000d
 80019e4:	2000000e 	.word	0x2000000e
 80019e8:	20000100 	.word	0x20000100

080019ec <can_control>:

void can_control(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	//S10 increase Hip-Motor position
	//S14 decrease Hip-Motor position
	//S11 increase Knee-Motor position
	//S15 decrease Knee-Motor position

	Keypad4x4_ReadKeypad(mySwitches);
 80019f0:	48a2      	ldr	r0, [pc, #648]	; (8001c7c <can_control+0x290>)
 80019f2:	f7fe fe77 	bl	80006e4 <Keypad4x4_ReadKeypad>
		if(mySwitches[3]==true){
 80019f6:	4ba1      	ldr	r3, [pc, #644]	; (8001c7c <can_control+0x290>)
 80019f8:	78db      	ldrb	r3, [r3, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <can_control+0x18>
			keycontrol=1;
 80019fe:	4ba0      	ldr	r3, [pc, #640]	; (8001c80 <can_control+0x294>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
		}
		if(mySwitches[7]==true){
 8001a04:	4b9d      	ldr	r3, [pc, #628]	; (8001c7c <can_control+0x290>)
 8001a06:	79db      	ldrb	r3, [r3, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <can_control+0x26>
			keycontrol=0;
 8001a0c:	4b9c      	ldr	r3, [pc, #624]	; (8001c80 <can_control+0x294>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
		}


	if(keycontrol==0){
 8001a12:	4b9b      	ldr	r3, [pc, #620]	; (8001c80 <can_control+0x294>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d156      	bne.n	8001ac8 <can_control+0xdc>
		if(control.flags[0]==1 && control.flags[1]==1){
 8001a1a:	4b9a      	ldr	r3, [pc, #616]	; (8001c84 <can_control+0x298>)
 8001a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d118      	bne.n	8001a54 <can_control+0x68>
 8001a22:	4b98      	ldr	r3, [pc, #608]	; (8001c84 <can_control+0x298>)
 8001a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d114      	bne.n	8001a54 <can_control+0x68>
			motor_mode(Ab_CAN, &TxHeader, TxData);
 8001a2a:	4b97      	ldr	r3, [pc, #604]	; (8001c88 <can_control+0x29c>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4a97      	ldr	r2, [pc, #604]	; (8001c8c <can_control+0x2a0>)
 8001a30:	4997      	ldr	r1, [pc, #604]	; (8001c90 <can_control+0x2a4>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fb94 	bl	8001160 <motor_mode>
			motor_mode(Hip_CAN, &TxHeader, TxData);
 8001a38:	4b96      	ldr	r3, [pc, #600]	; (8001c94 <can_control+0x2a8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4a93      	ldr	r2, [pc, #588]	; (8001c8c <can_control+0x2a0>)
 8001a3e:	4994      	ldr	r1, [pc, #592]	; (8001c90 <can_control+0x2a4>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fb8d 	bl	8001160 <motor_mode>
			motor_mode(Knee_CAN, &TxHeader, TxData);
 8001a46:	4b94      	ldr	r3, [pc, #592]	; (8001c98 <can_control+0x2ac>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4a90      	ldr	r2, [pc, #576]	; (8001c8c <can_control+0x2a0>)
 8001a4c:	4990      	ldr	r1, [pc, #576]	; (8001c90 <can_control+0x2a4>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fb86 	bl	8001160 <motor_mode>
			//motormode=1;
			}
		if(control.flags[0]==0 && control.flags[1]==0){
 8001a54:	4b8b      	ldr	r3, [pc, #556]	; (8001c84 <can_control+0x298>)
 8001a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d118      	bne.n	8001a8e <can_control+0xa2>
 8001a5c:	4b89      	ldr	r3, [pc, #548]	; (8001c84 <can_control+0x298>)
 8001a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d114      	bne.n	8001a8e <can_control+0xa2>
			exit_mode(Ab_CAN, &TxHeader, TxData);
 8001a64:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <can_control+0x29c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4a88      	ldr	r2, [pc, #544]	; (8001c8c <can_control+0x2a0>)
 8001a6a:	4989      	ldr	r1, [pc, #548]	; (8001c90 <can_control+0x2a4>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fbbb 	bl	80011e8 <exit_mode>
			exit_mode(Hip_CAN, &TxHeader, TxData);
 8001a72:	4b88      	ldr	r3, [pc, #544]	; (8001c94 <can_control+0x2a8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4a85      	ldr	r2, [pc, #532]	; (8001c8c <can_control+0x2a0>)
 8001a78:	4985      	ldr	r1, [pc, #532]	; (8001c90 <can_control+0x2a4>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fbb4 	bl	80011e8 <exit_mode>
			exit_mode(Knee_CAN, &TxHeader, TxData);
 8001a80:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <can_control+0x2ac>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4a81      	ldr	r2, [pc, #516]	; (8001c8c <can_control+0x2a0>)
 8001a86:	4982      	ldr	r1, [pc, #520]	; (8001c90 <can_control+0x2a4>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fbad 	bl	80011e8 <exit_mode>
		 	}
		if(control.flags[0]==2 && control.flags[1]==2){
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	; (8001c84 <can_control+0x298>)
 8001a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d118      	bne.n	8001ac8 <can_control+0xdc>
 8001a96:	4b7b      	ldr	r3, [pc, #492]	; (8001c84 <can_control+0x298>)
 8001a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d114      	bne.n	8001ac8 <can_control+0xdc>
			zero(Ab_CAN, &TxHeader, TxData);
 8001a9e:	4b7a      	ldr	r3, [pc, #488]	; (8001c88 <can_control+0x29c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <can_control+0x2a0>)
 8001aa4:	497a      	ldr	r1, [pc, #488]	; (8001c90 <can_control+0x2a4>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fbe2 	bl	8001270 <zero>
			zero(Hip_CAN, &TxHeader, TxData);
 8001aac:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <can_control+0x2a8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4a76      	ldr	r2, [pc, #472]	; (8001c8c <can_control+0x2a0>)
 8001ab2:	4977      	ldr	r1, [pc, #476]	; (8001c90 <can_control+0x2a4>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fbdb 	bl	8001270 <zero>
			zero(Knee_CAN, &TxHeader, TxData);
 8001aba:	4b77      	ldr	r3, [pc, #476]	; (8001c98 <can_control+0x2ac>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4a73      	ldr	r2, [pc, #460]	; (8001c8c <can_control+0x2a0>)
 8001ac0:	4973      	ldr	r1, [pc, #460]	; (8001c90 <can_control+0x2a4>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fbd4 	bl	8001270 <zero>
			}
		}

	if(keycontrol==1){
 8001ac8:	4b6d      	ldr	r3, [pc, #436]	; (8001c80 <can_control+0x294>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 80fa 	bne.w	8001cc6 <can_control+0x2da>
		if(mySwitches[0]==true){
 8001ad2:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <can_control+0x290>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d014      	beq.n	8001b04 <can_control+0x118>
			motor_mode(Ab_CAN, &TxHeader, TxData);
 8001ada:	4b6b      	ldr	r3, [pc, #428]	; (8001c88 <can_control+0x29c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4a6b      	ldr	r2, [pc, #428]	; (8001c8c <can_control+0x2a0>)
 8001ae0:	496b      	ldr	r1, [pc, #428]	; (8001c90 <can_control+0x2a4>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fb3c 	bl	8001160 <motor_mode>
			motor_mode(Hip_CAN, &TxHeader, TxData);
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <can_control+0x2a8>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4a67      	ldr	r2, [pc, #412]	; (8001c8c <can_control+0x2a0>)
 8001aee:	4968      	ldr	r1, [pc, #416]	; (8001c90 <can_control+0x2a4>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fb35 	bl	8001160 <motor_mode>
			motor_mode(Knee_CAN, &TxHeader, TxData);
 8001af6:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <can_control+0x2ac>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4a64      	ldr	r2, [pc, #400]	; (8001c8c <can_control+0x2a0>)
 8001afc:	4964      	ldr	r1, [pc, #400]	; (8001c90 <can_control+0x2a4>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fb2e 	bl	8001160 <motor_mode>
			}
		if(mySwitches[1]==true){
 8001b04:	4b5d      	ldr	r3, [pc, #372]	; (8001c7c <can_control+0x290>)
 8001b06:	785b      	ldrb	r3, [r3, #1]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d014      	beq.n	8001b36 <can_control+0x14a>
			exit_mode(Ab_CAN, &TxHeader, TxData);
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <can_control+0x29c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4a5e      	ldr	r2, [pc, #376]	; (8001c8c <can_control+0x2a0>)
 8001b12:	495f      	ldr	r1, [pc, #380]	; (8001c90 <can_control+0x2a4>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fb67 	bl	80011e8 <exit_mode>
			exit_mode(Hip_CAN, &TxHeader, TxData);
 8001b1a:	4b5e      	ldr	r3, [pc, #376]	; (8001c94 <can_control+0x2a8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4a5b      	ldr	r2, [pc, #364]	; (8001c8c <can_control+0x2a0>)
 8001b20:	495b      	ldr	r1, [pc, #364]	; (8001c90 <can_control+0x2a4>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb60 	bl	80011e8 <exit_mode>
			exit_mode(Knee_CAN, &TxHeader, TxData);
 8001b28:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <can_control+0x2ac>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4a57      	ldr	r2, [pc, #348]	; (8001c8c <can_control+0x2a0>)
 8001b2e:	4958      	ldr	r1, [pc, #352]	; (8001c90 <can_control+0x2a4>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fb59 	bl	80011e8 <exit_mode>
			 }
		if(mySwitches[2]==true){
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <can_control+0x290>)
 8001b38:	789b      	ldrb	r3, [r3, #2]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d014      	beq.n	8001b68 <can_control+0x17c>
			zero(Ab_CAN, &TxHeader, TxData);
 8001b3e:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <can_control+0x29c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <can_control+0x2a0>)
 8001b44:	4952      	ldr	r1, [pc, #328]	; (8001c90 <can_control+0x2a4>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fb92 	bl	8001270 <zero>
			zero(Hip_CAN, &TxHeader, TxData);
 8001b4c:	4b51      	ldr	r3, [pc, #324]	; (8001c94 <can_control+0x2a8>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <can_control+0x2a0>)
 8001b52:	494f      	ldr	r1, [pc, #316]	; (8001c90 <can_control+0x2a4>)
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fb8b 	bl	8001270 <zero>
			zero(Knee_CAN, &TxHeader, TxData);
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <can_control+0x2ac>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4a4b      	ldr	r2, [pc, #300]	; (8001c8c <can_control+0x2a0>)
 8001b60:	494b      	ldr	r1, [pc, #300]	; (8001c90 <can_control+0x2a4>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb84 	bl	8001270 <zero>
			}
		if(mySwitches[8]==true){
 8001b68:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <can_control+0x290>)
 8001b6a:	7a1b      	ldrb	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <can_control+0x1b0>
			control.ab_p[0]=control.ab_p[0]+p_step;
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <can_control+0x298>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <can_control+0x2b0>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <can_control+0x298>)
 8001b82:	edc3 7a00 	vstr	s15, [r3]
			control.ab_p[1]=control.ab_p[1]+p_step;
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <can_control+0x298>)
 8001b88:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b8c:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <can_control+0x2b0>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <can_control+0x298>)
 8001b98:	edc3 7a01 	vstr	s15, [r3, #4]
			}
		if(mySwitches[12]==true){
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <can_control+0x290>)
 8001b9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <can_control+0x1e4>
			control.ab_p[0]=control.ab_p[0]-p_step;
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <can_control+0x298>)
 8001ba6:	ed93 7a00 	vldr	s14, [r3]
 8001baa:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <can_control+0x2b0>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <can_control+0x298>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
			control.ab_p[1]=control.ab_p[1]-p_step;
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <can_control+0x298>)
 8001bbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc0:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <can_control+0x2b0>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <can_control+0x298>)
 8001bcc:	edc3 7a01 	vstr	s15, [r3, #4]
			}
		if(mySwitches[9]==true){
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <can_control+0x290>)
 8001bd2:	7a5b      	ldrb	r3, [r3, #9]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d015      	beq.n	8001c04 <can_control+0x218>
			control.hip_p[0]=control.hip_p[0]-p_step;
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <can_control+0x298>)
 8001bda:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <can_control+0x2b0>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <can_control+0x298>)
 8001bea:	edc3 7a02 	vstr	s15, [r3, #8]
			control.hip_p[1]=control.hip_p[1]-p_step;
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <can_control+0x298>)
 8001bf0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <can_control+0x2b0>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <can_control+0x298>)
 8001c00:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		if(mySwitches[13]==true){
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <can_control+0x290>)
 8001c06:	7b5b      	ldrb	r3, [r3, #13]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d015      	beq.n	8001c38 <can_control+0x24c>
			control.hip_p[0]=control.hip_p[0]+p_step;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <can_control+0x298>)
 8001c0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <can_control+0x2b0>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <can_control+0x298>)
 8001c1e:	edc3 7a02 	vstr	s15, [r3, #8]
			control.hip_p[1]=control.hip_p[1]+p_step;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <can_control+0x298>)
 8001c24:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <can_control+0x2b0>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <can_control+0x298>)
 8001c34:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		if(mySwitches[10]==true){
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <can_control+0x290>)
 8001c3a:	7a9b      	ldrb	r3, [r3, #10]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d015      	beq.n	8001c6c <can_control+0x280>
			control.knee_p[0]=control.knee_p[0]-p_step;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <can_control+0x298>)
 8001c42:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <can_control+0x2b0>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <can_control+0x298>)
 8001c52:	edc3 7a04 	vstr	s15, [r3, #16]
			control.knee_p[1]=control.knee_p[1]-p_step;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <can_control+0x298>)
 8001c58:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <can_control+0x2b0>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <can_control+0x298>)
 8001c68:	edc3 7a05 	vstr	s15, [r3, #20]
			}
		if(mySwitches[14]==true){
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <can_control+0x290>)
 8001c6e:	7b9b      	ldrb	r3, [r3, #14]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d028      	beq.n	8001cc6 <can_control+0x2da>
			control.knee_p[0]=control.knee_p[0]+p_step;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <can_control+0x298>)
 8001c76:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c7a:	e011      	b.n	8001ca0 <can_control+0x2b4>
 8001c7c:	200005b0 	.word	0x200005b0
 8001c80:	2000059c 	.word	0x2000059c
 8001c84:	2000045c 	.word	0x2000045c
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	20000588 	.word	0x20000588
 8001c90:	20000554 	.word	0x20000554
 8001c94:	2000000d 	.word	0x2000000d
 8001c98:	2000000e 	.word	0x2000000e
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <can_control+0x2e0>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <can_control+0x2e4>)
 8001cac:	edc3 7a04 	vstr	s15, [r3, #16]
			control.knee_p[1]=control.knee_p[1]+p_step;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <can_control+0x2e4>)
 8001cb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <can_control+0x2e0>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <can_control+0x2e4>)
 8001cc2:	edc3 7a05 	vstr	s15, [r3, #20]
			}
		}
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	2000045c 	.word	0x2000045c

08001cd4 <float_to_uint>:

/////////////////////////////////math/////////////////////////////////////////

int float_to_uint(float x, float x_min, float x_max, int bits){
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cde:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ce2:	ed87 1a01 	vstr	s2, [r7, #4]
 8001ce6:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8001ce8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cec:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf4:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8001cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d08:	2201      	movs	r2, #1
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2a:	ee17 3a90 	vmov	r3, s15
    }
 8001d2e:	4618      	mov	r0, r3
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <uint_to_float>:

float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8001d3a:	b480      	push	{r7}
 8001d3c:	b087      	sub	sp, #28
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d46:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8001d4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d58:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d72:	2201      	movs	r2, #1
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <softstop_joint>:

////////////////////////softstop//////////////////////////////////
//actuator only can move to a limit position

int softstop_joint(float *control,float state, float limit_p, float limit_n){
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dac:	edc7 0a01 	vstr	s1, [r7, #4]
 8001db0:	ed87 1a00 	vstr	s2, [r7]
  if(*control>=limit_p){
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	d821      	bhi.n	8001e0c <softstop_joint+0x6c>
    *control = limit_p;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
    v_in = 0.0f;
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <softstop_joint+0xd0>)
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    kp_in = 0.0f;
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <softstop_joint+0xd4>)
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
    kd_in = KD_SOFTSTOP;
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <softstop_joint+0xd8>)
 8001de0:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <softstop_joint+0xdc>)
 8001de2:	601a      	str	r2, [r3, #0]
    t_in += KP_SOFTSTOP*(limit_p - state);
 8001de4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001de8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e80 <softstop_joint+0xe0>
 8001df4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <softstop_joint+0xe4>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <softstop_joint+0xe4>)
 8001e04:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e02b      	b.n	8001e64 <softstop_joint+0xc4>
    }
  if(*control<=limit_n){
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ed97 7a00 	vldr	s14, [r7]
 8001e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	db21      	blt.n	8001e64 <softstop_joint+0xc4>
    *control = limit_n;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	601a      	str	r2, [r3, #0]
    v_in = 0.0f;
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <softstop_joint+0xd0>)
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    kp_in = 0.0f;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <softstop_joint+0xd4>)
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    kd_in = KD_SOFTSTOP;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <softstop_joint+0xd8>)
 8001e38:	4a10      	ldr	r2, [pc, #64]	; (8001e7c <softstop_joint+0xdc>)
 8001e3a:	601a      	str	r2, [r3, #0]
    t_in += KP_SOFTSTOP*(limit_n - state);
 8001e3c:	ed97 7a00 	vldr	s14, [r7]
 8001e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e48:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001e80 <softstop_joint+0xe0>
 8001e4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <softstop_joint+0xe4>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <softstop_joint+0xe4>)
 8001e5c:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e7ff      	b.n	8001e64 <softstop_joint+0xc4>
    }
  }
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	2000053c 	.word	0x2000053c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	3ecccccd 	.word	0x3ecccccd
 8001e80:	42c80000 	.word	0x42c80000
 8001e84:	20000540 	.word	0x20000540

08001e88 <delay_us>:

////////////////////////delay//////////////////////////////////
void delay_us (uint16_t us)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <delay_us+0x30>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8001e9a:	bf00      	nop
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <delay_us+0x30>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	88fa      	ldrh	r2, [r7, #6]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d8f8      	bhi.n	8001e9c <delay_us+0x14>
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	20000240 	.word	0x20000240

08001ebc <xor_checksum>:

////////////////////////spi//////////////////////////////////
uint32_t xor_checksum(uint32_t* data, int len)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    uint32_t t = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	e00a      	b.n	8001ee6 <xor_checksum+0x2a>
        t = t ^ data[i];
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4053      	eors	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbf0      	blt.n	8001ed0 <xor_checksum+0x14>
    return t;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_SPI_TxRxCpltCallback>:
*/

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	//unpack the received bytes from rx buffer into †he valuesrec structur
		callback_enabled = 1;
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==0){
 8001f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0e:	482a      	ldr	r0, [pc, #168]	; (8001fb8 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001f10:	f002 f81a 	bl	8003f48 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d13e      	bne.n	8001f98 <HAL_SPI_TxRxCpltCallback+0x9c>
			for(int i = 0; i < RX_LEN; i++){
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e00b      	b.n	8001f38 <HAL_SPI_TxRxCpltCallback+0x3c>
				((uint16_t*) &valuesrec)[i] = spi_rx_buffer[i];
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4a25      	ldr	r2, [pc, #148]	; (8001fbc <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001f26:	4413      	add	r3, r2
 8001f28:	4925      	ldr	r1, [pc, #148]	; (8001fc0 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f30:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < RX_LEN; i++){
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b41      	cmp	r3, #65	; 0x41
 8001f3c:	ddf0      	ble.n	8001f20 <HAL_SPI_TxRxCpltCallback+0x24>
				//printf("%d\n", spi_rx_buffer[i]);
				}
			//if the communication has no issues the values will write in the control structure
			if(keycontrol==0){
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_SPI_TxRxCpltCallback+0xc8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d128      	bne.n	8001f98 <HAL_SPI_TxRxCpltCallback+0x9c>
			check = xor_checksum((uint32_t*)&valuesrec,32);
 8001f46:	2120      	movs	r1, #32
 8001f48:	481c      	ldr	r0, [pc, #112]	; (8001fbc <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001f4a:	f7ff ffb7 	bl	8001ebc <xor_checksum>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_SPI_TxRxCpltCallback+0xcc>)
 8001f52:	6013      	str	r3, [r2, #0]
			if(valuesrec.checksum == check && (valuesrec.flags[0]<=3 ||valuesrec.flags[1]<=3)){
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001f56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_SPI_TxRxCpltCallback+0xcc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11a      	bne.n	8001f98 <HAL_SPI_TxRxCpltCallback+0x9c>
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d903      	bls.n	8001f72 <HAL_SPI_TxRxCpltCallback+0x76>
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d812      	bhi.n	8001f98 <HAL_SPI_TxRxCpltCallback+0x9c>
				for(int i = 0; i < CONTROL_LEN; i++){
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	e00c      	b.n	8001f92 <HAL_SPI_TxRxCpltCallback+0x96>
					((uint16_t*) &control)[i] = ((uint16_t*) &valuesrec)[i];
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001f7e:	441a      	add	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4911      	ldr	r1, [pc, #68]	; (8001fcc <HAL_SPI_TxRxCpltCallback+0xd0>)
 8001f86:	440b      	add	r3, r1
 8001f88:	8812      	ldrh	r2, [r2, #0]
 8001f8a:	801a      	strh	r2, [r3, #0]
				for(int i = 0; i < CONTROL_LEN; i++){
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b41      	cmp	r3, #65	; 0x41
 8001f96:	ddef      	ble.n	8001f78 <HAL_SPI_TxRxCpltCallback+0x7c>
					}
				}
			}
		}
		// Disable the SPI
		HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN);
 8001f98:	2342      	movs	r3, #66	; 0x42
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <HAL_SPI_TxRxCpltCallback+0xd4>)
 8001f9e:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <HAL_SPI_TxRxCpltCallback+0xd8>)
 8001fa0:	f002 feb6 	bl	8004d10 <HAL_SPI_TransmitReceive_IT>

		spi_enabled = 0;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_SPI_TxRxCpltCallback+0xdc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200005a4 	.word	0x200005a4
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	200003d8 	.word	0x200003d8
 8001fc0:	20000354 	.word	0x20000354
 8001fc4:	2000059c 	.word	0x2000059c
 8001fc8:	20000534 	.word	0x20000534
 8001fcc:	2000045c 	.word	0x2000045c
 8001fd0:	200002d0 	.word	0x200002d0
 8001fd4:	20000128 	.word	0x20000128
 8001fd8:	200005a0 	.word	0x200005a0

08001fdc <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback (SPI_HandleTypeDef* hspi){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	CallbackError_spi=HAL_SPI_GetError(&hspi1);
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <HAL_SPI_ErrorCallback+0x1c>)
 8001fe6:	f003 f83f 	bl	8005068 <HAL_SPI_GetError>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <HAL_SPI_ErrorCallback+0x20>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000128 	.word	0x20000128
 8001ffc:	200005f8 	.word	0x200005f8

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	e7fe      	b.n	8002008 <Error_Handler+0x8>
	...

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_CAN_MspInit+0x158>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d13e      	bne.n	80020fc <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <HAL_CAN_MspInit+0x15c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	4a4c      	ldr	r2, [pc, #304]	; (80021b8 <HAL_CAN_MspInit+0x15c>)
 8002086:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002088:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_CAN_MspInit+0x15c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d10d      	bne.n	80020ac <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_CAN_MspInit+0x160>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_CAN_MspInit+0x160>)
 800209a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209e:	6413      	str	r3, [r2, #64]	; 0x40
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_CAN_MspInit+0x160>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	4b42      	ldr	r3, [pc, #264]	; (80021bc <HAL_CAN_MspInit+0x160>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a41      	ldr	r2, [pc, #260]	; (80021bc <HAL_CAN_MspInit+0x160>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_CAN_MspInit+0x160>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020da:	2309      	movs	r3, #9
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	4836      	ldr	r0, [pc, #216]	; (80021c0 <HAL_CAN_MspInit+0x164>)
 80020e6:	f001 fd9b 	bl	8003c20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2014      	movs	r0, #20
 80020f0:	f001 fa53 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020f4:	2014      	movs	r0, #20
 80020f6:	f001 fa6c 	bl	80035d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80020fa:	e057      	b.n	80021ac <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a30      	ldr	r2, [pc, #192]	; (80021c4 <HAL_CAN_MspInit+0x168>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d152      	bne.n	80021ac <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <HAL_CAN_MspInit+0x160>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <HAL_CAN_MspInit+0x160>)
 8002110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_CAN_MspInit+0x160>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_CAN_MspInit+0x15c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <HAL_CAN_MspInit+0x15c>)
 800212a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_CAN_MspInit+0x15c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10d      	bne.n	8002150 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_CAN_MspInit+0x160>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_CAN_MspInit+0x160>)
 800213e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002142:	6413      	str	r3, [r2, #64]	; 0x40
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_CAN_MspInit+0x160>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_CAN_MspInit+0x160>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_CAN_MspInit+0x160>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_CAN_MspInit+0x160>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800216c:	2360      	movs	r3, #96	; 0x60
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800217c:	2309      	movs	r3, #9
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	4810      	ldr	r0, [pc, #64]	; (80021c8 <HAL_CAN_MspInit+0x16c>)
 8002188:	f001 fd4a 	bl	8003c20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	2040      	movs	r0, #64	; 0x40
 8002192:	f001 fa02 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002196:	2040      	movs	r0, #64	; 0x40
 8002198:	f001 fa1b 	bl	80035d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	2041      	movs	r0, #65	; 0x41
 80021a2:	f001 f9fa 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80021a6:	2041      	movs	r0, #65	; 0x41
 80021a8:	f001 fa13 	bl	80035d2 <HAL_NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3730      	adds	r7, #48	; 0x30
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40006400 	.word	0x40006400
 80021b8:	20000600 	.word	0x20000600
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40006800 	.word	0x40006800
 80021c8:	40020400 	.word	0x40020400

080021cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_SPI_MspInit+0x188>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	f040 80ae 	bne.w	800234c <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	4a57      	ldr	r2, [pc, #348]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 80021fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002200:	4b55      	ldr	r3, [pc, #340]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4a50      	ldr	r2, [pc, #320]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6313      	str	r3, [r2, #48]	; 0x30
 800221c:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4a49      	ldr	r2, [pc, #292]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	6313      	str	r3, [r2, #48]	; 0x30
 8002238:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_SPI_MspInit+0x18c>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002244:	23c0      	movs	r3, #192	; 0xc0
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002254:	2305      	movs	r3, #5
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	483f      	ldr	r0, [pc, #252]	; (800235c <HAL_SPI_MspInit+0x190>)
 8002260:	f001 fcde 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002264:	2308      	movs	r3, #8
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002274:	2305      	movs	r3, #5
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	4838      	ldr	r0, [pc, #224]	; (8002360 <HAL_SPI_MspInit+0x194>)
 8002280:	f001 fcce 	bl	8003c20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002284:	4b37      	ldr	r3, [pc, #220]	; (8002364 <HAL_SPI_MspInit+0x198>)
 8002286:	4a38      	ldr	r2, [pc, #224]	; (8002368 <HAL_SPI_MspInit+0x19c>)
 8002288:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_SPI_MspInit+0x198>)
 800228c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002290:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_SPI_MspInit+0x198>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002298:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_SPI_MspInit+0x198>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022c4:	4827      	ldr	r0, [pc, #156]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022c6:	f001 f99f 	bl	8003608 <HAL_DMA_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80022d0:	f7ff fe96 	bl	8002000 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <HAL_SPI_MspInit+0x198>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_SPI_MspInit+0x1a4>)
 80022e4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 80022e8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022ec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 80022fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002300:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 8002316:	2200      	movs	r2, #0
 8002318:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 800231c:	2200      	movs	r2, #0
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002320:	4812      	ldr	r0, [pc, #72]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 8002322:	f001 f971 	bl	8003608 <HAL_DMA_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 800232c:	f7ff fe68 	bl	8002000 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 8002334:	649a      	str	r2, [r3, #72]	; 0x48
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <HAL_SPI_MspInit+0x1a0>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	2023      	movs	r0, #35	; 0x23
 8002342:	f001 f92a 	bl	800359a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002346:	2023      	movs	r0, #35	; 0x23
 8002348:	f001 f943 	bl	80035d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40013000 	.word	0x40013000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000
 8002360:	40020400 	.word	0x40020400
 8002364:	20000180 	.word	0x20000180
 8002368:	40026410 	.word	0x40026410
 800236c:	200001e0 	.word	0x200001e0
 8002370:	40026458 	.word	0x40026458

08002374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <HAL_TIM_Base_MspInit+0x64>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023a2:	e012      	b.n	80023ca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_TIM_Base_MspInit+0x6c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10d      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40010400 	.word	0x40010400

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002430:	f000 f960 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <CAN1_RX0_IRQHandler+0x10>)
 800243e:	f000 fdac 	bl	8002f9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200000d8 	.word	0x200000d8

0800244c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <SPI1_IRQHandler+0x10>)
 8002452:	f002 fcf1 	bl	8004e38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000128 	.word	0x20000128

08002460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002464:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002468:	f001 fda0 	bl	8003fac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800246c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002470:	f001 fd9c 	bl	8003fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA2_Stream0_IRQHandler+0x10>)
 800247e:	f001 f993 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000180 	.word	0x20000180

0800248c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA2_Stream3_IRQHandler+0x10>)
 8002492:	f001 f989 	bl	80037a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200001e0 	.word	0x200001e0

080024a0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <CAN2_RX0_IRQHandler+0x10>)
 80024a6:	f000 fd78 	bl	8002f9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000100 	.word	0x20000100

080024b4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <CAN2_RX1_IRQHandler+0x10>)
 80024ba:	f000 fd6e 	bl	8002f9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000100 	.word	0x20000100

080024c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e00a      	b.n	80024f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024da:	f3af 8000 	nop.w
 80024de:	4601      	mov	r1, r0
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	b2ca      	uxtb	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbf0      	blt.n	80024da <_read+0x12>
	}

return len;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	return -1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252a:	605a      	str	r2, [r3, #4]
	return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_isatty>:

int _isatty(int file)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
	return 1;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f003 faba 	bl	8005b14 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20020000 	.word	0x20020000
 80025cc:	00000400 	.word	0x00000400
 80025d0:	20000604 	.word	0x20000604
 80025d4:	20000620 	.word	0x20000620

080025d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	; (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	; (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002626:	f7ff ffd7 	bl	80025d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f003 fa79 	bl	8005b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7fe f9ed 	bl	8000a0c <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002640:	080066c4 	.word	0x080066c4
  ldr r2, =_sbss
 8002644:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002648:	2000061c 	.word	0x2000061c

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <HAL_Init+0x40>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_Init+0x40>)
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_Init+0x40>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 ff83 	bl	8003584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267e:	2000      	movs	r0, #0
 8002680:	f000 f808 	bl	8002694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002684:	f7ff fcc2 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00

08002694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x54>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x58>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 ff9b 	bl	80035ee <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00e      	b.n	80026e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d80a      	bhi.n	80026de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f000 ff63 	bl	800359a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <HAL_InitTick+0x5c>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000018 	.word	0x20000018
 80026ec:	20000020 	.word	0x20000020
 80026f0:	2000001c 	.word	0x2000001c

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000020 	.word	0x20000020
 8002718:	20000608 	.word	0x20000608

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000608 	.word	0x20000608

08002734 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0ed      	b.n	8002922 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fc82 	bl	800205c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002768:	f7ff ffd8 	bl	800271c <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800276e:	e012      	b.n	8002796 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002770:	f7ff ffd4 	bl	800271c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b0a      	cmp	r3, #10
 800277c:	d90b      	bls.n	8002796 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2205      	movs	r2, #5
 800278e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0c5      	b.n	8002922 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0e5      	beq.n	8002770 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0202 	bic.w	r2, r2, #2
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b4:	f7ff ffb2 	bl	800271c <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ba:	e012      	b.n	80027e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027bc:	f7ff ffae 	bl	800271c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b0a      	cmp	r3, #10
 80027c8:	d90b      	bls.n	80027e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e09f      	b.n	8002922 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e5      	bne.n	80027bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e1b      	ldrb	r3, [r3, #24]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d108      	bne.n	800280a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e007      	b.n	800281a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7e5b      	ldrb	r3, [r3, #25]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e007      	b.n	8002844 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e9b      	ldrb	r3, [r3, #26]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d108      	bne.n	800285e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e007      	b.n	800286e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0220 	bic.w	r2, r2, #32
 800286c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7edb      	ldrb	r3, [r3, #27]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0210 	bic.w	r2, r2, #16
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e007      	b.n	8002898 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0210 	orr.w	r2, r2, #16
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7f1b      	ldrb	r3, [r3, #28]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d108      	bne.n	80028b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e007      	b.n	80028c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0208 	bic.w	r2, r2, #8
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7f5b      	ldrb	r3, [r3, #29]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0204 	orr.w	r2, r2, #4
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e007      	b.n	80028ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0204 	bic.w	r2, r2, #4
 80028ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	ea42 0103 	orr.w	r1, r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002942:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d003      	beq.n	8002952 <HAL_CAN_ConfigFilter+0x26>
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	2b02      	cmp	r3, #2
 800294e:	f040 80be 	bne.w	8002ace <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002954:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800296c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	431a      	orrs	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2201      	movs	r2, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	401a      	ands	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d123      	bne.n	80029fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3248      	adds	r2, #72	; 0x48
 80029dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029f2:	6979      	ldr	r1, [r7, #20]
 80029f4:	3348      	adds	r3, #72	; 0x48
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d122      	bne.n	8002a4a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3248      	adds	r2, #72	; 0x48
 8002a2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a40:	6979      	ldr	r1, [r7, #20]
 8002a42:	3348      	adds	r3, #72	; 0x48
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a64:	e007      	b.n	8002a76 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	401a      	ands	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a90:	e007      	b.n	8002aa2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ac0:	f023 0201 	bic.w	r2, r3, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e006      	b.n	8002adc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
  }
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40006400 	.word	0x40006400

08002aec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d12e      	bne.n	8002b5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b18:	f7ff fe00 	bl	800271c <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b1e:	e012      	b.n	8002b46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b20:	f7ff fdfc 	bl	800271c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b0a      	cmp	r3, #10
 8002b2c:	d90b      	bls.n	8002b46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e012      	b.n	8002b6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e5      	bne.n	8002b20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e006      	b.n	8002b6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d003      	beq.n	8002ba0 <HAL_CAN_AddTxMessage+0x2c>
 8002b98:	7ffb      	ldrb	r3, [r7, #31]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	f040 80b8 	bne.w	8002d10 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a0 	beq.w	8002d00 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	0e1b      	lsrs	r3, r3, #24
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d907      	bls.n	8002be0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e09e      	b.n	8002d1e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002be0:	2201      	movs	r2, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	409a      	lsls	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	6809      	ldr	r1, [r1, #0]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3318      	adds	r3, #24
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	440b      	add	r3, r1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e00f      	b.n	8002c2e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c18:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c22:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3318      	adds	r3, #24
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	440b      	add	r3, r1
 8002c2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3318      	adds	r3, #24
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3304      	adds	r3, #4
 8002c40:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	7d1b      	ldrb	r3, [r3, #20]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d111      	bne.n	8002c6e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3318      	adds	r3, #24
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4413      	add	r3, r2
 8002c56:	3304      	adds	r3, #4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6811      	ldr	r1, [r2, #0]
 8002c5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3318      	adds	r3, #24
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	440b      	add	r3, r1
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3307      	adds	r3, #7
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	061a      	lsls	r2, r3, #24
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3306      	adds	r3, #6
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3305      	adds	r3, #5
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	3204      	adds	r2, #4
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	4610      	mov	r0, r2
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	6811      	ldr	r1, [r2, #0]
 8002c96:	ea43 0200 	orr.w	r2, r3, r0
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ca4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3303      	adds	r3, #3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	061a      	lsls	r2, r3, #24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	6811      	ldr	r1, [r2, #0]
 8002ccc:	ea43 0200 	orr.w	r2, r3, r0
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002cda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6811      	ldr	r1, [r2, #0]
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3318      	adds	r3, #24
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	440b      	add	r3, r1
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e00e      	b.n	8002d1e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e006      	b.n	8002d1e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
  }
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d003      	beq.n	8002d4e <HAL_CAN_GetRxMessage+0x24>
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	f040 80f3 	bne.w	8002f34 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10e      	bne.n	8002d72 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0e7      	b.n	8002f42 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0d8      	b.n	8002f42 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	331b      	adds	r3, #27
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	4413      	add	r3, r2
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0204 	and.w	r2, r3, #4
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	331b      	adds	r3, #27
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4413      	add	r3, r2
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0d5b      	lsrs	r3, r3, #21
 8002dbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	331b      	adds	r3, #27
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	331b      	adds	r3, #27
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	4413      	add	r3, r2
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0202 	and.w	r2, r3, #2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	331b      	adds	r3, #27
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	4413      	add	r3, r2
 8002e02:	3304      	adds	r3, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 020f 	and.w	r2, r3, #15
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	331b      	adds	r3, #27
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	331b      	adds	r3, #27
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0a1a      	lsrs	r2, r3, #8
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0c1a      	lsrs	r2, r3, #16
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	3302      	adds	r3, #2
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e1a      	lsrs	r2, r3, #24
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	3303      	adds	r3, #3
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0a1a      	lsrs	r2, r3, #8
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3305      	adds	r3, #5
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0c1a      	lsrs	r2, r3, #16
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	3306      	adds	r3, #6
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e1a      	lsrs	r2, r3, #24
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	3307      	adds	r3, #7
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0220 	orr.w	r2, r2, #32
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	e007      	b.n	8002f30 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0220 	orr.w	r2, r2, #32
 8002f2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e006      	b.n	8002f42 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d002      	beq.n	8002f6c <HAL_CAN_ActivateNotification+0x1e>
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d109      	bne.n	8002f80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6959      	ldr	r1, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e006      	b.n	8002f8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
  }
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08a      	sub	sp, #40	; 0x28
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d07c      	beq.n	80030da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d023      	beq.n	8003032 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f983 	bl	8003308 <HAL_CAN_TxMailbox0CompleteCallback>
 8003002:	e016      	b.n	8003032 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e00c      	b.n	8003032 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e002      	b.n	8003032 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f989 	bl	8003344 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d024      	beq.n	8003086 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003044:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f963 	bl	800331c <HAL_CAN_TxMailbox1CompleteCallback>
 8003056:	e016      	b.n	8003086 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	e00c      	b.n	8003086 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	e002      	b.n	8003086 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f969 	bl	8003358 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d024      	beq.n	80030da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003098:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f943 	bl	8003330 <HAL_CAN_TxMailbox2CompleteCallback>
 80030aa:	e016      	b.n	80030da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	e00c      	b.n	80030da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
 80030d2:	e002      	b.n	80030da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f949 	bl	800336c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00c      	beq.n	80030fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d006      	beq.n	8003120 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2208      	movs	r2, #8
 8003118:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f930 	bl	8003380 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fd fc2f 	bl	800099c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003158:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2210      	movs	r2, #16
 8003160:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2208      	movs	r2, #8
 800317c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f908 	bl	8003394 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fd fc19 	bl	80009d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2210      	movs	r2, #16
 80031bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8f2 	bl	80033a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2208      	movs	r2, #8
 80031de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8eb 	bl	80033bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d07b      	beq.n	80032e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d072      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003254:	2b00      	cmp	r3, #0
 8003256:	d043      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03e      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d02b      	beq.n	80032c4 <HAL_CAN_IRQHandler+0x32a>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d82e      	bhi.n	80032ce <HAL_CAN_IRQHandler+0x334>
 8003270:	2b50      	cmp	r3, #80	; 0x50
 8003272:	d022      	beq.n	80032ba <HAL_CAN_IRQHandler+0x320>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d82a      	bhi.n	80032ce <HAL_CAN_IRQHandler+0x334>
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d019      	beq.n	80032b0 <HAL_CAN_IRQHandler+0x316>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d826      	bhi.n	80032ce <HAL_CAN_IRQHandler+0x334>
 8003280:	2b30      	cmp	r3, #48	; 0x30
 8003282:	d010      	beq.n	80032a6 <HAL_CAN_IRQHandler+0x30c>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d822      	bhi.n	80032ce <HAL_CAN_IRQHandler+0x334>
 8003288:	2b10      	cmp	r3, #16
 800328a:	d002      	beq.n	8003292 <HAL_CAN_IRQHandler+0x2f8>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d005      	beq.n	800329c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003290:	e01d      	b.n	80032ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800329a:	e019      	b.n	80032d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	f043 0310 	orr.w	r3, r3, #16
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032a4:	e014      	b.n	80032d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f043 0320 	orr.w	r3, r3, #32
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032ae:	e00f      	b.n	80032d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032b8:	e00a      	b.n	80032d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032c2:	e005      	b.n	80032d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032cc:	e000      	b.n	80032d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80032ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2204      	movs	r2, #4
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f868 	bl	80033d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003300:	bf00      	nop
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <__NVIC_SetPriorityGrouping>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800340c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_GetPriorityGrouping>:
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <__NVIC_GetPriorityGrouping+0x18>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 0307 	and.w	r3, r3, #7
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_EnableIRQ>:
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	2b00      	cmp	r3, #0
 8003458:	db0b      	blt.n	8003472 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4907      	ldr	r1, [pc, #28]	; (8003480 <__NVIC_EnableIRQ+0x38>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2001      	movs	r0, #1
 800346a:	fa00 f202 	lsl.w	r2, r0, r2
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000e100 	.word	0xe000e100

08003484 <__NVIC_SetPriority>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db0a      	blt.n	80034ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	490c      	ldr	r1, [pc, #48]	; (80034d0 <__NVIC_SetPriority+0x4c>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	440b      	add	r3, r1
 80034a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034ac:	e00a      	b.n	80034c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <__NVIC_SetPriority+0x50>)
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	3b04      	subs	r3, #4
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	440b      	add	r3, r1
 80034c2:	761a      	strb	r2, [r3, #24]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000e100 	.word	0xe000e100
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <NVIC_EncodePriority>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f1c3 0307 	rsb	r3, r3, #7
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf28      	it	cs
 80034f6:	2304      	movcs	r3, #4
 80034f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d902      	bls.n	8003508 <NVIC_EncodePriority+0x30>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3b03      	subs	r3, #3
 8003506:	e000      	b.n	800350a <NVIC_EncodePriority+0x32>
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	401a      	ands	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003520:	f04f 31ff 	mov.w	r1, #4294967295
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	43d9      	mvns	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	4313      	orrs	r3, r2
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <SysTick_Config>:
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003550:	d301      	bcc.n	8003556 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003552:	2301      	movs	r3, #1
 8003554:	e00f      	b.n	8003576 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <SysTick_Config+0x40>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355e:	210f      	movs	r1, #15
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	f7ff ff8e 	bl	8003484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <SysTick_Config+0x40>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <SysTick_Config+0x40>)
 8003570:	2207      	movs	r2, #7
 8003572:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	e000e010 	.word	0xe000e010

08003584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff29 	bl	80033e4 <__NVIC_SetPriorityGrouping>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ac:	f7ff ff3e 	bl	800342c <__NVIC_GetPriorityGrouping>
 80035b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	6978      	ldr	r0, [r7, #20]
 80035b8:	f7ff ff8e 	bl	80034d8 <NVIC_EncodePriority>
 80035bc:	4602      	mov	r2, r0
 80035be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff5d 	bl	8003484 <__NVIC_SetPriority>
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff31 	bl	8003448 <__NVIC_EnableIRQ>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ffa2 	bl	8003540 <SysTick_Config>
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff f882 	bl	800271c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e099      	b.n	8003758 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003644:	e00f      	b.n	8003666 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003646:	f7ff f869 	bl	800271c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b05      	cmp	r3, #5
 8003652:	d908      	bls.n	8003666 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2203      	movs	r2, #3
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e078      	b.n	8003758 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e8      	bne.n	8003646 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4b38      	ldr	r3, [pc, #224]	; (8003760 <HAL_DMA_Init+0x158>)
 8003680:	4013      	ands	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003692:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d107      	bne.n	80036d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	4313      	orrs	r3, r2
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0307 	bic.w	r3, r3, #7
 80036e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d117      	bne.n	800372a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa0b 	bl	8003b28 <DMA_CheckFifoParam>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003726:	2301      	movs	r3, #1
 8003728:	e016      	b.n	8003758 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9c2 	bl	8003abc <DMA_CalcBaseAndBitshift>
 8003738:	4603      	mov	r3, r0
 800373a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	223f      	movs	r2, #63	; 0x3f
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	f010803f 	.word	0xf010803f

08003764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e00c      	b.n	800379c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037b4:	4b8e      	ldr	r3, [pc, #568]	; (80039f0 <HAL_DMA_IRQHandler+0x248>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a8e      	ldr	r2, [pc, #568]	; (80039f4 <HAL_DMA_IRQHandler+0x24c>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	2208      	movs	r2, #8
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01a      	beq.n	8003814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	2208      	movs	r2, #8
 8003802:	409a      	lsls	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	2201      	movs	r2, #1
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d012      	beq.n	800384a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	2201      	movs	r2, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f043 0202 	orr.w	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	2204      	movs	r2, #4
 8003850:	409a      	lsls	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2204      	movs	r2, #4
 800386e:	409a      	lsls	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	2210      	movs	r2, #16
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d043      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03c      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2210      	movs	r2, #16
 80038a4:	409a      	lsls	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d018      	beq.n	80038ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d024      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
 80038d6:	e01f      	b.n	8003918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e016      	b.n	8003918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0208 	bic.w	r2, r2, #8
 8003906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	2220      	movs	r2, #32
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 808f 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8087 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	2220      	movs	r2, #32
 8003940:	409a      	lsls	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b05      	cmp	r3, #5
 8003950:	d136      	bne.n	80039c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0216 	bic.w	r2, r2, #22
 8003960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_DMA_IRQHandler+0x1da>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0208 	bic.w	r2, r2, #8
 8003990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	223f      	movs	r2, #63	; 0x3f
 8003998:	409a      	lsls	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d07e      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
        }
        return;
 80039be:	e079      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01d      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10d      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d031      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
 80039ec:	e02c      	b.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
 80039ee:	bf00      	nop
 80039f0:	20000018 	.word	0x20000018
 80039f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d023      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e01e      	b.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0210 	bic.w	r2, r2, #16
 8003a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d032      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d022      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2205      	movs	r2, #5
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d307      	bcc.n	8003a90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f2      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x2cc>
 8003a8e:	e000      	b.n	8003a92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
 8003ab2:	e000      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ab4:	bf00      	nop
    }
  }
}
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	3b10      	subs	r3, #16
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <DMA_CalcBaseAndBitshift+0x64>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <DMA_CalcBaseAndBitshift+0x68>)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d909      	bls.n	8003afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	1d1a      	adds	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	659a      	str	r2, [r3, #88]	; 0x58
 8003afc:	e007      	b.n	8003b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	aaaaaaab 	.word	0xaaaaaaab
 8003b24:	08006648 	.word	0x08006648

08003b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11f      	bne.n	8003b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d856      	bhi.n	8003bf6 <DMA_CheckFifoParam+0xce>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <DMA_CheckFifoParam+0x28>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b73 	.word	0x08003b73
 8003b58:	08003b61 	.word	0x08003b61
 8003b5c:	08003bf7 	.word	0x08003bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d046      	beq.n	8003bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b70:	e043      	b.n	8003bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b7a:	d140      	bne.n	8003bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b80:	e03d      	b.n	8003bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8a:	d121      	bne.n	8003bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d837      	bhi.n	8003c02 <DMA_CheckFifoParam+0xda>
 8003b92:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <DMA_CheckFifoParam+0x70>)
 8003b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003baf 	.word	0x08003baf
 8003ba0:	08003ba9 	.word	0x08003ba9
 8003ba4:	08003bc1 	.word	0x08003bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e030      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d025      	beq.n	8003c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bbe:	e022      	b.n	8003c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc8:	d11f      	bne.n	8003c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bce:	e01c      	b.n	8003c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d903      	bls.n	8003bde <DMA_CheckFifoParam+0xb6>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d003      	beq.n	8003be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bdc:	e018      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      break;
 8003be2:	e015      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf4:	e00b      	b.n	8003c0e <DMA_CheckFifoParam+0xe6>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e00a      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e008      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e006      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e004      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      break;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <DMA_CheckFifoParam+0xe8>
      break;
 8003c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop

08003c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	e165      	b.n	8003f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	f040 8154 	bne.w	8003f02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d005      	beq.n	8003c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d130      	bne.n	8003cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 0201 	and.w	r2, r3, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d017      	beq.n	8003d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d123      	bne.n	8003d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	08da      	lsrs	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3208      	adds	r2, #8
 8003d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	220f      	movs	r2, #15
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	08da      	lsrs	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3208      	adds	r2, #8
 8003d5e:	69b9      	ldr	r1, [r7, #24]
 8003d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2203      	movs	r2, #3
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0203 	and.w	r2, r3, #3
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80ae 	beq.w	8003f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <HAL_GPIO_Init+0x300>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4a5c      	ldr	r2, [pc, #368]	; (8003f20 <HAL_GPIO_Init+0x300>)
 8003db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db4:	6453      	str	r3, [r2, #68]	; 0x44
 8003db6:	4b5a      	ldr	r3, [pc, #360]	; (8003f20 <HAL_GPIO_Init+0x300>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dc2:	4a58      	ldr	r2, [pc, #352]	; (8003f24 <HAL_GPIO_Init+0x304>)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	3302      	adds	r3, #2
 8003dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	220f      	movs	r2, #15
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4f      	ldr	r2, [pc, #316]	; (8003f28 <HAL_GPIO_Init+0x308>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d025      	beq.n	8003e3a <HAL_GPIO_Init+0x21a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4e      	ldr	r2, [pc, #312]	; (8003f2c <HAL_GPIO_Init+0x30c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01f      	beq.n	8003e36 <HAL_GPIO_Init+0x216>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4d      	ldr	r2, [pc, #308]	; (8003f30 <HAL_GPIO_Init+0x310>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d019      	beq.n	8003e32 <HAL_GPIO_Init+0x212>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4c      	ldr	r2, [pc, #304]	; (8003f34 <HAL_GPIO_Init+0x314>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_GPIO_Init+0x20e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4b      	ldr	r2, [pc, #300]	; (8003f38 <HAL_GPIO_Init+0x318>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00d      	beq.n	8003e2a <HAL_GPIO_Init+0x20a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4a      	ldr	r2, [pc, #296]	; (8003f3c <HAL_GPIO_Init+0x31c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <HAL_GPIO_Init+0x206>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a49      	ldr	r2, [pc, #292]	; (8003f40 <HAL_GPIO_Init+0x320>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_GPIO_Init+0x202>
 8003e1e:	2306      	movs	r3, #6
 8003e20:	e00c      	b.n	8003e3c <HAL_GPIO_Init+0x21c>
 8003e22:	2307      	movs	r3, #7
 8003e24:	e00a      	b.n	8003e3c <HAL_GPIO_Init+0x21c>
 8003e26:	2305      	movs	r3, #5
 8003e28:	e008      	b.n	8003e3c <HAL_GPIO_Init+0x21c>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x21c>
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e004      	b.n	8003e3c <HAL_GPIO_Init+0x21c>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_Init+0x21c>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_GPIO_Init+0x21c>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	f002 0203 	and.w	r2, r2, #3
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	4093      	lsls	r3, r2
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e4c:	4935      	ldr	r1, [pc, #212]	; (8003f24 <HAL_GPIO_Init+0x304>)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e5a:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e7e:	4a31      	ldr	r2, [pc, #196]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e84:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ea8:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eae:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003efc:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <HAL_GPIO_Init+0x324>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	f67f ae96 	bls.w	8003c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3724      	adds	r7, #36	; 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400
 8003f30:	40020800 	.word	0x40020800
 8003f34:	40020c00 	.word	0x40020c00
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40021400 	.word	0x40021400
 8003f40:	40021800 	.word	0x40021800
 8003f44:	40013c00 	.word	0x40013c00

08003f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e001      	b.n	8003f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
 8003f84:	4613      	mov	r3, r2
 8003f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f88:	787b      	ldrb	r3, [r7, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f94:	e003      	b.n	8003f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f96:	887b      	ldrh	r3, [r7, #2]
 8003f98:	041a      	lsls	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	619a      	str	r2, [r3, #24]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fc2:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f806 	bl	8003fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40013c00 	.word	0x40013c00

08003fdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_PWREx_EnableOverDrive+0x90>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <HAL_PWREx_EnableOverDrive+0x90>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	; 0x40
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_PWREx_EnableOverDrive+0x90>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_PWREx_EnableOverDrive+0x94>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004020:	f7fe fb7c 	bl	800271c <HAL_GetTick>
 8004024:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004026:	e009      	b.n	800403c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004028:	f7fe fb78 	bl	800271c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004036:	d901      	bls.n	800403c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e01f      	b.n	800407c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_PWREx_EnableOverDrive+0x98>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d1ee      	bne.n	8004028 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_PWREx_EnableOverDrive+0x9c>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004050:	f7fe fb64 	bl	800271c <HAL_GetTick>
 8004054:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004056:	e009      	b.n	800406c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004058:	f7fe fb60 	bl	800271c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004066:	d901      	bls.n	800406c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e007      	b.n	800407c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_PWREx_EnableOverDrive+0x98>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004078:	d1ee      	bne.n	8004058 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	420e0040 	.word	0x420e0040
 800408c:	40007000 	.word	0x40007000
 8004090:	420e0044 	.word	0x420e0044

08004094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0cc      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b68      	ldr	r3, [pc, #416]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d90c      	bls.n	80040d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b65      	ldr	r3, [pc, #404]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b63      	ldr	r3, [pc, #396]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0b8      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e8:	4b59      	ldr	r3, [pc, #356]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a58      	ldr	r2, [pc, #352]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004100:	4b53      	ldr	r3, [pc, #332]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a52      	ldr	r2, [pc, #328]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800410a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b50      	ldr	r3, [pc, #320]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	494d      	ldr	r1, [pc, #308]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d044      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d119      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e07f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d003      	beq.n	8004152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414e:	2b03      	cmp	r3, #3
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e06f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004162:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e067      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004172:	4b37      	ldr	r3, [pc, #220]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 0203 	bic.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4934      	ldr	r1, [pc, #208]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004184:	f7fe faca 	bl	800271c <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fe fac6 	bl	800271c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e04f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 020c 	and.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d1eb      	bne.n	800418c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d20c      	bcs.n	80041dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e032      	b.n	8004242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4916      	ldr	r1, [pc, #88]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	490e      	ldr	r1, [pc, #56]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800421a:	f000 f821 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 800421e:	4602      	mov	r2, r0
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	490a      	ldr	r1, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	5ccb      	ldrb	r3, [r1, r3]
 800422e:	fa22 f303 	lsr.w	r3, r2, r3
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe fa2a 	bl	8002694 <HAL_InitTick>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023c00 	.word	0x40023c00
 8004250:	40023800 	.word	0x40023800
 8004254:	08006638 	.word	0x08006638
 8004258:	20000018 	.word	0x20000018
 800425c:	2000001c 	.word	0x2000001c

08004260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004264:	b0ae      	sub	sp, #184	; 0xb8
 8004266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004286:	4bcb      	ldr	r3, [pc, #812]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b0c      	cmp	r3, #12
 8004290:	f200 8206 	bhi.w	80046a0 <HAL_RCC_GetSysClockFreq+0x440>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080046a1 	.word	0x080046a1
 80042a4:	080046a1 	.word	0x080046a1
 80042a8:	080046a1 	.word	0x080046a1
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080046a1 	.word	0x080046a1
 80042b4:	080046a1 	.word	0x080046a1
 80042b8:	080046a1 	.word	0x080046a1
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080046a1 	.word	0x080046a1
 80042c4:	080046a1 	.word	0x080046a1
 80042c8:	080046a1 	.word	0x080046a1
 80042cc:	080044d1 	.word	0x080044d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4bb9      	ldr	r3, [pc, #740]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80042d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80042d6:	e1e7      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d8:	4bb8      	ldr	r3, [pc, #736]	; (80045bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80042da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042de:	e1e3      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e0:	4bb4      	ldr	r3, [pc, #720]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ec:	4bb1      	ldr	r3, [pc, #708]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d071      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f8:	4bae      	ldr	r3, [pc, #696]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004304:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800430c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800431a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	0159      	lsls	r1, r3, #5
 800432c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004330:	0150      	lsls	r0, r2, #5
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4621      	mov	r1, r4
 8004338:	1a51      	subs	r1, r2, r1
 800433a:	6439      	str	r1, [r7, #64]	; 0x40
 800433c:	4629      	mov	r1, r5
 800433e:	eb63 0301 	sbc.w	r3, r3, r1
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004350:	4649      	mov	r1, r9
 8004352:	018b      	lsls	r3, r1, #6
 8004354:	4641      	mov	r1, r8
 8004356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800435a:	4641      	mov	r1, r8
 800435c:	018a      	lsls	r2, r1, #6
 800435e:	4641      	mov	r1, r8
 8004360:	1a51      	subs	r1, r2, r1
 8004362:	63b9      	str	r1, [r7, #56]	; 0x38
 8004364:	4649      	mov	r1, r9
 8004366:	eb63 0301 	sbc.w	r3, r3, r1
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004378:	4649      	mov	r1, r9
 800437a:	00cb      	lsls	r3, r1, #3
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004382:	4641      	mov	r1, r8
 8004384:	00ca      	lsls	r2, r1, #3
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4603      	mov	r3, r0
 800438c:	4622      	mov	r2, r4
 800438e:	189b      	adds	r3, r3, r2
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
 8004392:	462b      	mov	r3, r5
 8004394:	460a      	mov	r2, r1
 8004396:	eb42 0303 	adc.w	r3, r2, r3
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043a8:	4629      	mov	r1, r5
 80043aa:	024b      	lsls	r3, r1, #9
 80043ac:	4621      	mov	r1, r4
 80043ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b2:	4621      	mov	r1, r4
 80043b4:	024a      	lsls	r2, r1, #9
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80043cc:	f7fb ff1a 	bl	8000204 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043da:	e067      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043dc:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80043ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043f6:	2300      	movs	r3, #0
 80043f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	0159      	lsls	r1, r3, #5
 800440c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004410:	0150      	lsls	r0, r2, #5
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4621      	mov	r1, r4
 8004418:	1a51      	subs	r1, r2, r1
 800441a:	62b9      	str	r1, [r7, #40]	; 0x28
 800441c:	4629      	mov	r1, r5
 800441e:	eb63 0301 	sbc.w	r3, r3, r1
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004430:	4649      	mov	r1, r9
 8004432:	018b      	lsls	r3, r1, #6
 8004434:	4641      	mov	r1, r8
 8004436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800443a:	4641      	mov	r1, r8
 800443c:	018a      	lsls	r2, r1, #6
 800443e:	4641      	mov	r1, r8
 8004440:	ebb2 0a01 	subs.w	sl, r2, r1
 8004444:	4649      	mov	r1, r9
 8004446:	eb63 0b01 	sbc.w	fp, r3, r1
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004456:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800445a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445e:	4692      	mov	sl, r2
 8004460:	469b      	mov	fp, r3
 8004462:	4623      	mov	r3, r4
 8004464:	eb1a 0303 	adds.w	r3, sl, r3
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	462b      	mov	r3, r5
 800446c:	eb4b 0303 	adc.w	r3, fp, r3
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004494:	2200      	movs	r2, #0
 8004496:	673b      	str	r3, [r7, #112]	; 0x70
 8004498:	677a      	str	r2, [r7, #116]	; 0x74
 800449a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800449e:	f7fb feb1 	bl	8000204 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4613      	mov	r3, r2
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044ac:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	3301      	adds	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80044be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044ce:	e0eb      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d0:	4b38      	ldr	r3, [pc, #224]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d06b      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e8:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	2200      	movs	r2, #0
 80044f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fa:	663b      	str	r3, [r7, #96]	; 0x60
 80044fc:	2300      	movs	r3, #0
 80044fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004500:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004504:	4622      	mov	r2, r4
 8004506:	462b      	mov	r3, r5
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	0159      	lsls	r1, r3, #5
 8004512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004516:	0150      	lsls	r0, r2, #5
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4621      	mov	r1, r4
 800451e:	1a51      	subs	r1, r2, r1
 8004520:	61b9      	str	r1, [r7, #24]
 8004522:	4629      	mov	r1, r5
 8004524:	eb63 0301 	sbc.w	r3, r3, r1
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004536:	4659      	mov	r1, fp
 8004538:	018b      	lsls	r3, r1, #6
 800453a:	4651      	mov	r1, sl
 800453c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004540:	4651      	mov	r1, sl
 8004542:	018a      	lsls	r2, r1, #6
 8004544:	4651      	mov	r1, sl
 8004546:	ebb2 0801 	subs.w	r8, r2, r1
 800454a:	4659      	mov	r1, fp
 800454c:	eb63 0901 	sbc.w	r9, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800455c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004564:	4690      	mov	r8, r2
 8004566:	4699      	mov	r9, r3
 8004568:	4623      	mov	r3, r4
 800456a:	eb18 0303 	adds.w	r3, r8, r3
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	462b      	mov	r3, r5
 8004572:	eb49 0303 	adc.w	r3, r9, r3
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004584:	4629      	mov	r1, r5
 8004586:	024b      	lsls	r3, r1, #9
 8004588:	4621      	mov	r1, r4
 800458a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800458e:	4621      	mov	r1, r4
 8004590:	024a      	lsls	r2, r1, #9
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800459a:	2200      	movs	r2, #0
 800459c:	65bb      	str	r3, [r7, #88]	; 0x58
 800459e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80045a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a4:	f7fb fe2e 	bl	8000204 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4613      	mov	r3, r2
 80045ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b2:	e065      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x420>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	00f42400 	.word	0x00f42400
 80045bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c0:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	2200      	movs	r2, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	4611      	mov	r1, r2
 80045cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045d0:	653b      	str	r3, [r7, #80]	; 0x50
 80045d2:	2300      	movs	r3, #0
 80045d4:	657b      	str	r3, [r7, #84]	; 0x54
 80045d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80045da:	4642      	mov	r2, r8
 80045dc:	464b      	mov	r3, r9
 80045de:	f04f 0000 	mov.w	r0, #0
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	0159      	lsls	r1, r3, #5
 80045e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ec:	0150      	lsls	r0, r2, #5
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4641      	mov	r1, r8
 80045f4:	1a51      	subs	r1, r2, r1
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	4649      	mov	r1, r9
 80045fa:	eb63 0301 	sbc.w	r3, r3, r1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800460c:	4659      	mov	r1, fp
 800460e:	018b      	lsls	r3, r1, #6
 8004610:	4651      	mov	r1, sl
 8004612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004616:	4651      	mov	r1, sl
 8004618:	018a      	lsls	r2, r1, #6
 800461a:	4651      	mov	r1, sl
 800461c:	1a54      	subs	r4, r2, r1
 800461e:	4659      	mov	r1, fp
 8004620:	eb63 0501 	sbc.w	r5, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	00eb      	lsls	r3, r5, #3
 800462e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004632:	00e2      	lsls	r2, r4, #3
 8004634:	4614      	mov	r4, r2
 8004636:	461d      	mov	r5, r3
 8004638:	4643      	mov	r3, r8
 800463a:	18e3      	adds	r3, r4, r3
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	464b      	mov	r3, r9
 8004640:	eb45 0303 	adc.w	r3, r5, r3
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004652:	4629      	mov	r1, r5
 8004654:	028b      	lsls	r3, r1, #10
 8004656:	4621      	mov	r1, r4
 8004658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800465c:	4621      	mov	r1, r4
 800465e:	028a      	lsls	r2, r1, #10
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004668:	2200      	movs	r2, #0
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
 800466c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800466e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004672:	f7fb fdc7 	bl	8000204 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4613      	mov	r3, r2
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	0f1b      	lsrs	r3, r3, #28
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800468e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800469e:	e003      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80046a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	37b8      	adds	r7, #184	; 0xb8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400

080046c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e28d      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8083 	beq.w	80047e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046e0:	4b94      	ldr	r3, [pc, #592]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d019      	beq.n	8004720 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046ec:	4b91      	ldr	r3, [pc, #580]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046f8:	4b8e      	ldr	r3, [pc, #568]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b8b      	ldr	r3, [pc, #556]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b88      	ldr	r3, [pc, #544]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b84      	ldr	r3, [pc, #528]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x124>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e25a      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x90>
 8004742:	4b7c      	ldr	r3, [pc, #496]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7b      	ldr	r2, [pc, #492]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xcc>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0xb4>
 800475a:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a72      	ldr	r2, [pc, #456]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xcc>
 8004774:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6e      	ldr	r2, [pc, #440]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b6c      	ldr	r3, [pc, #432]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6b      	ldr	r2, [pc, #428]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd ffc2 	bl	800271c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd ffbe 	bl	800271c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e21f      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xdc>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd ffae 	bl	800271c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd ffaa 	bl	800271c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e20b      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b57      	ldr	r3, [pc, #348]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x104>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d06f      	beq.n	80048d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047f2:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d017      	beq.n	800482e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047fe:	4b4d      	ldr	r3, [pc, #308]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004806:	2b08      	cmp	r3, #8
 8004808:	d105      	bne.n	8004816 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800480a:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b44      	ldr	r3, [pc, #272]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b41      	ldr	r3, [pc, #260]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x186>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1d3      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4937      	ldr	r1, [pc, #220]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fd ff57 	bl	800271c <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004872:	f7fd ff53 	bl	800271c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1b4      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4925      	ldr	r1, [pc, #148]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b24      	ldr	r3, [pc, #144]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fd ff36 	bl	800271c <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fd ff32 	bl	800271c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e193      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d036      	beq.n	800494c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fd ff16 	bl	800271c <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fd ff12 	bl	800271c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e173      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x234>
 8004912:	e01b      	b.n	800494c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd feff 	bl	800271c <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	e00e      	b.n	8004940 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004922:	f7fd fefb 	bl	800271c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d907      	bls.n	8004940 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e15c      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
 8004934:	40023800 	.word	0x40023800
 8004938:	42470000 	.word	0x42470000
 800493c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b8a      	ldr	r3, [pc, #552]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ea      	bne.n	8004922 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8097 	beq.w	8004a88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b83      	ldr	r3, [pc, #524]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b7f      	ldr	r3, [pc, #508]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a7e      	ldr	r2, [pc, #504]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b7c      	ldr	r3, [pc, #496]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b79      	ldr	r3, [pc, #484]	; (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b76      	ldr	r3, [pc, #472]	; (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a75      	ldr	r2, [pc, #468]	; (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fd febb 	bl	800271c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fd feb7 	bl	800271c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e118      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b6c      	ldr	r3, [pc, #432]	; (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x31e>
 80049d0:	4b66      	ldr	r3, [pc, #408]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a65      	ldr	r2, [pc, #404]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	e01c      	b.n	8004a18 <HAL_RCC_OscConfig+0x358>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x340>
 80049e6:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a60      	ldr	r2, [pc, #384]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	4b5e      	ldr	r3, [pc, #376]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a5d      	ldr	r2, [pc, #372]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0x358>
 8004a00:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	4a59      	ldr	r2, [pc, #356]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a56      	ldr	r2, [pc, #344]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a12:	f023 0304 	bic.w	r3, r3, #4
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd fe7c 	bl	800271c <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fd fe78 	bl	800271c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0d7      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	4b4b      	ldr	r3, [pc, #300]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RCC_OscConfig+0x368>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd fe66 	bl	800271c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fd fe62 	bl	800271c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0c1      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6a:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ee      	bne.n	8004a54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	4a3a      	ldr	r2, [pc, #232]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80ad 	beq.w	8004bec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d060      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d145      	bne.n	8004b32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd fe36 	bl	800271c <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fd fe32 	bl	800271c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e093      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	491b      	ldr	r1, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fd fe07 	bl	800271c <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b12:	f7fd fe03 	bl	800271c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e064      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x452>
 8004b30:	e05c      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd fdf0 	bl	800271c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd fdec 	bl	800271c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e04d      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x480>
 8004b5e:	e045      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e040      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40007000 	.word	0x40007000
 8004b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b78:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <HAL_RCC_OscConfig+0x538>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d030      	beq.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d129      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d122      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d119      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d10f      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800

08004bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07b      	b.n	8004d06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d009      	beq.n	8004c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]
 8004c26:	e005      	b.n	8004c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fd fabc 	bl	80021cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	ea42 0103 	orr.w	r1, r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0104 	and.w	r1, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0210 	and.w	r2, r3, #16
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_SPI_TransmitReceive_IT+0x20>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e075      	b.n	8004e1c <HAL_SPI_TransmitReceive_IT+0x10c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d46:	7dbb      	ldrb	r3, [r7, #22]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d00d      	beq.n	8004d68 <HAL_SPI_TransmitReceive_IT+0x58>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d52:	d106      	bne.n	8004d62 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_TransmitReceive_IT+0x52>
 8004d5c:	7dbb      	ldrb	r3, [r7, #22]
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d002      	beq.n	8004d68 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
 8004d64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d66:	e054      	b.n	8004e12 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d7e:	e048      	b.n	8004e12 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d003      	beq.n	8004d94 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2205      	movs	r2, #5
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	887a      	ldrh	r2, [r7, #2]
 8004daa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	887a      	ldrh	r2, [r7, #2]
 8004db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d006      	beq.n	8004dd4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8004dd2:	e005      	b.n	8004de0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <HAL_SPI_TransmitReceive_IT+0x120>)
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <HAL_SPI_TransmitReceive_IT+0x124>)
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004dee:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d008      	beq.n	8004e10 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e000      	b.n	8004e12 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8004e10:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	0800516d 	.word	0x0800516d
 8004e2c:	080051cd 	.word	0x080051cd
 8004e30:	080050a9 	.word	0x080050a9
 8004e34:	0800510d 	.word	0x0800510d

08004e38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10f      	bne.n	8004e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
    return;
 8004e7a:	e0d7      	b.n	800502c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x66>
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	09db      	lsrs	r3, r3, #7
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
    return;
 8004e9c:	e0c6      	b.n	800502c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_SPI_IRQHandler+0x8c>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80b4 	beq.w	800502c <HAL_SPI_IRQHandler+0x1f4>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80ad 	beq.w	800502c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d023      	beq.n	8004f26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d011      	beq.n	8004f0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	e00b      	b.n	8004f26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	693b      	ldr	r3, [r7, #16]
        return;
 8004f24:	e082      	b.n	800502c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00c      	beq.n	8004f82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f043 0208 	orr.w	r2, r3, #8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	60bb      	str	r3, [r7, #8]
 8004f80:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d04f      	beq.n	800502a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_SPI_IRQHandler+0x17e>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d034      	beq.n	8005020 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0203 	bic.w	r2, r2, #3
 8004fc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	4a18      	ldr	r2, [pc, #96]	; (8005034 <HAL_SPI_IRQHandler+0x1fc>)
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fbc2 	bl	8003764 <HAL_DMA_Abort_IT>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	4a0d      	ldr	r2, [pc, #52]	; (8005034 <HAL_SPI_IRQHandler+0x1fc>)
 8005000:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fbac 	bl	8003764 <HAL_DMA_Abort_IT>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800501e:	e003      	b.n	8005028 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fc ffdb 	bl	8001fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005026:	e000      	b.n	800502a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005028:	bf00      	nop
    return;
 800502a:	bf00      	nop
  }
}
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	08005081 	.word	0x08005081

08005038 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800505a:	b2db      	uxtb	r3, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7fc ff9e 	bl	8001fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f103 020c 	add.w	r2, r3, #12
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10f      	bne.n	8005104 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f95e 	bl	80053c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	7812      	ldrb	r2, [r2, #0]
 8005120:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10f      	bne.n	8005164 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005152:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f92e 	bl	80053c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	b292      	uxth	r2, r2
 8005180:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10f      	bne.n	80051c4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8fe 	bl	80053c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	881a      	ldrh	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005210:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8cf 	bl	80053c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800523c:	f7fd fa6e 	bl	800271c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	4413      	add	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800524c:	f7fd fa66 	bl	800271c <HAL_GetTick>
 8005250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	015b      	lsls	r3, r3, #5
 8005258:	0d1b      	lsrs	r3, r3, #20
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005262:	e054      	b.n	800530e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d050      	beq.n	800530e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800526c:	f7fd fa56 	bl	800271c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	429a      	cmp	r2, r3
 800527a:	d902      	bls.n	8005282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d13d      	bne.n	80052fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529a:	d111      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a4:	d004      	beq.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d107      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c8:	d10f      	bne.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e017      	b.n	800532e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3b01      	subs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d19b      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000018 	.word	0x20000018

0800533c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <SPI_EndRxTxTransaction+0x7c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1b      	ldr	r2, [pc, #108]	; (80053bc <SPI_EndRxTxTransaction+0x80>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0d5b      	lsrs	r3, r3, #21
 8005354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005366:	d112      	bne.n	800538e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2200      	movs	r2, #0
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ff5a 	bl	800522c <SPI_WaitFlagStateUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e00f      	b.n	80053ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3b01      	subs	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d0f2      	beq.n	800538e <SPI_EndRxTxTransaction+0x52>
 80053a8:	e000      	b.n	80053ac <SPI_EndRxTxTransaction+0x70>
        break;
 80053aa:	bf00      	nop
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000018 	.word	0x20000018
 80053bc:	165e9f81 	.word	0x165e9f81

080053c0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80053c8:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <SPI_CloseRxTx_ISR+0xe0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <SPI_CloseRxTx_ISR+0xe4>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	0a5b      	lsrs	r3, r3, #9
 80053d4:	2264      	movs	r2, #100	; 0x64
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053dc:	f7fd f99e 	bl	800271c <HAL_GetTick>
 80053e0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0220 	bic.w	r2, r2, #32
 80053f0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005404:	e009      	b.n	800541a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	3b01      	subs	r3, #1
 800540a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0eb      	beq.n	80053f2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	2164      	movs	r1, #100	; 0x64
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff ff8c 	bl	800533c <SPI_EndRxTxTransaction>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	2b00      	cmp	r3, #0
 800545a:	d115      	bne.n	8005488 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b04      	cmp	r3, #4
 8005466:	d107      	bne.n	8005478 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fde1 	bl	8005038 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005476:	e00e      	b.n	8005496 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fc fd3b 	bl	8001efc <HAL_SPI_TxRxCpltCallback>
}
 8005486:	e006      	b.n	8005496 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fc fda3 	bl	8001fdc <HAL_SPI_ErrorCallback>
}
 8005496:	bf00      	nop
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000018 	.word	0x20000018
 80054a4:	057619f1 	.word	0x057619f1

080054a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e041      	b.n	800553e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fc ff50 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f000 f95e 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d001      	beq.n	8005560 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e046      	b.n	80055ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a23      	ldr	r2, [pc, #140]	; (80055fc <HAL_TIM_Base_Start+0xb4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d022      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557a:	d01d      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <HAL_TIM_Base_Start+0xb8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d018      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_TIM_Base_Start+0xbc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <HAL_TIM_Base_Start+0xc0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_TIM_Base_Start+0xc4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <HAL_TIM_Base_Start+0xc8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIM_Base_Start+0xcc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d111      	bne.n	80055dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d010      	beq.n	80055ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	e007      	b.n	80055ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800
 8005608:	40000c00 	.word	0x40000c00
 800560c:	40010400 	.word	0x40010400
 8005610:	40014000 	.word	0x40014000
 8005614:	40001800 	.word	0x40001800

08005618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_TIM_ConfigClockSource+0x1c>
 8005630:	2302      	movs	r3, #2
 8005632:	e0b4      	b.n	800579e <HAL_TIM_ConfigClockSource+0x186>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800565a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566c:	d03e      	beq.n	80056ec <HAL_TIM_ConfigClockSource+0xd4>
 800566e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005672:	f200 8087 	bhi.w	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567a:	f000 8086 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x172>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005682:	d87f      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b70      	cmp	r3, #112	; 0x70
 8005686:	d01a      	beq.n	80056be <HAL_TIM_ConfigClockSource+0xa6>
 8005688:	2b70      	cmp	r3, #112	; 0x70
 800568a:	d87b      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 800568c:	2b60      	cmp	r3, #96	; 0x60
 800568e:	d050      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x11a>
 8005690:	2b60      	cmp	r3, #96	; 0x60
 8005692:	d877      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b50      	cmp	r3, #80	; 0x50
 8005696:	d03c      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0xfa>
 8005698:	2b50      	cmp	r3, #80	; 0x50
 800569a:	d873      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d058      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x13a>
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d86f      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b30      	cmp	r3, #48	; 0x30
 80056a6:	d064      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056a8:	2b30      	cmp	r3, #48	; 0x30
 80056aa:	d86b      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d060      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d867      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d05c      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d05a      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056bc:	e062      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f000 f985 	bl	80059dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	609a      	str	r2, [r3, #8]
      break;
 80056ea:	e04f      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6899      	ldr	r1, [r3, #8]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f000 f96e 	bl	80059dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800570e:	609a      	str	r2, [r3, #8]
      break;
 8005710:	e03c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	461a      	mov	r2, r3
 8005720:	f000 f8e2 	bl	80058e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2150      	movs	r1, #80	; 0x50
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f93b 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005730:	e02c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6859      	ldr	r1, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	461a      	mov	r2, r3
 8005740:	f000 f901 	bl	8005946 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2160      	movs	r1, #96	; 0x60
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f92b 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005750:	e01c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	461a      	mov	r2, r3
 8005760:	f000 f8c2 	bl	80058e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2140      	movs	r1, #64	; 0x40
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f91b 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005770:	e00c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f000 f912 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005782:	e003      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e000      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800578a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a40      	ldr	r2, [pc, #256]	; (80058bc <TIM_Base_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d00f      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3d      	ldr	r2, [pc, #244]	; (80058c0 <TIM_Base_SetConfig+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <TIM_Base_SetConfig+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3b      	ldr	r2, [pc, #236]	; (80058c8 <TIM_Base_SetConfig+0x120>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <TIM_Base_SetConfig+0x124>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d108      	bne.n	80057fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2f      	ldr	r2, [pc, #188]	; (80058bc <TIM_Base_SetConfig+0x114>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d02b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d027      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <TIM_Base_SetConfig+0x118>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d023      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <TIM_Base_SetConfig+0x11c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01f      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <TIM_Base_SetConfig+0x120>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a29      	ldr	r2, [pc, #164]	; (80058cc <TIM_Base_SetConfig+0x124>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d017      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <TIM_Base_SetConfig+0x128>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <TIM_Base_SetConfig+0x12c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00f      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <TIM_Base_SetConfig+0x130>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a25      	ldr	r2, [pc, #148]	; (80058dc <TIM_Base_SetConfig+0x134>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <TIM_Base_SetConfig+0x138>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <TIM_Base_SetConfig+0x13c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <TIM_Base_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a0c      	ldr	r2, [pc, #48]	; (80058cc <TIM_Base_SetConfig+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40010400 	.word	0x40010400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800
 80058dc:	40001800 	.word	0x40001800
 80058e0:	40001c00 	.word	0x40001c00
 80058e4:	40002000 	.word	0x40002000

080058e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f023 030a 	bic.w	r3, r3, #10
 8005924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0210 	bic.w	r2, r3, #16
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	031b      	lsls	r3, r3, #12
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f043 0307 	orr.w	r3, r3, #7
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	021a      	lsls	r2, r3, #8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e05a      	b.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a21      	ldr	r2, [pc, #132]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d022      	beq.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a80:	d01d      	beq.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d018      	beq.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1a      	ldr	r2, [pc, #104]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00e      	beq.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d10c      	bne.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40001800 	.word	0x40001800

08005b14 <__errno>:
 8005b14:	4b01      	ldr	r3, [pc, #4]	; (8005b1c <__errno+0x8>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000024 	.word	0x20000024

08005b20 <__libc_init_array>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4d0d      	ldr	r5, [pc, #52]	; (8005b58 <__libc_init_array+0x38>)
 8005b24:	4c0d      	ldr	r4, [pc, #52]	; (8005b5c <__libc_init_array+0x3c>)
 8005b26:	1b64      	subs	r4, r4, r5
 8005b28:	10a4      	asrs	r4, r4, #2
 8005b2a:	2600      	movs	r6, #0
 8005b2c:	42a6      	cmp	r6, r4
 8005b2e:	d109      	bne.n	8005b44 <__libc_init_array+0x24>
 8005b30:	4d0b      	ldr	r5, [pc, #44]	; (8005b60 <__libc_init_array+0x40>)
 8005b32:	4c0c      	ldr	r4, [pc, #48]	; (8005b64 <__libc_init_array+0x44>)
 8005b34:	f000 fd70 	bl	8006618 <_init>
 8005b38:	1b64      	subs	r4, r4, r5
 8005b3a:	10a4      	asrs	r4, r4, #2
 8005b3c:	2600      	movs	r6, #0
 8005b3e:	42a6      	cmp	r6, r4
 8005b40:	d105      	bne.n	8005b4e <__libc_init_array+0x2e>
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b48:	4798      	blx	r3
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7ee      	b.n	8005b2c <__libc_init_array+0xc>
 8005b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b52:	4798      	blx	r3
 8005b54:	3601      	adds	r6, #1
 8005b56:	e7f2      	b.n	8005b3e <__libc_init_array+0x1e>
 8005b58:	080066bc 	.word	0x080066bc
 8005b5c:	080066bc 	.word	0x080066bc
 8005b60:	080066bc 	.word	0x080066bc
 8005b64:	080066c0 	.word	0x080066c0

08005b68 <memset>:
 8005b68:	4402      	add	r2, r0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d100      	bne.n	8005b72 <memset+0xa>
 8005b70:	4770      	bx	lr
 8005b72:	f803 1b01 	strb.w	r1, [r3], #1
 8005b76:	e7f9      	b.n	8005b6c <memset+0x4>

08005b78 <_puts_r>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	460e      	mov	r6, r1
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	b118      	cbz	r0, 8005b88 <_puts_r+0x10>
 8005b80:	6983      	ldr	r3, [r0, #24]
 8005b82:	b90b      	cbnz	r3, 8005b88 <_puts_r+0x10>
 8005b84:	f000 fa48 	bl	8006018 <__sinit>
 8005b88:	69ab      	ldr	r3, [r5, #24]
 8005b8a:	68ac      	ldr	r4, [r5, #8]
 8005b8c:	b913      	cbnz	r3, 8005b94 <_puts_r+0x1c>
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 fa42 	bl	8006018 <__sinit>
 8005b94:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <_puts_r+0xd0>)
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d120      	bne.n	8005bdc <_puts_r+0x64>
 8005b9a:	686c      	ldr	r4, [r5, #4]
 8005b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b9e:	07db      	lsls	r3, r3, #31
 8005ba0:	d405      	bmi.n	8005bae <_puts_r+0x36>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	0598      	lsls	r0, r3, #22
 8005ba6:	d402      	bmi.n	8005bae <_puts_r+0x36>
 8005ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005baa:	f000 fad3 	bl	8006154 <__retarget_lock_acquire_recursive>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	0719      	lsls	r1, r3, #28
 8005bb2:	d51d      	bpl.n	8005bf0 <_puts_r+0x78>
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	b1db      	cbz	r3, 8005bf0 <_puts_r+0x78>
 8005bb8:	3e01      	subs	r6, #1
 8005bba:	68a3      	ldr	r3, [r4, #8]
 8005bbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	60a3      	str	r3, [r4, #8]
 8005bc4:	bb39      	cbnz	r1, 8005c16 <_puts_r+0x9e>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da38      	bge.n	8005c3c <_puts_r+0xc4>
 8005bca:	4622      	mov	r2, r4
 8005bcc:	210a      	movs	r1, #10
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 f848 	bl	8005c64 <__swbuf_r>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d011      	beq.n	8005bfc <_puts_r+0x84>
 8005bd8:	250a      	movs	r5, #10
 8005bda:	e011      	b.n	8005c00 <_puts_r+0x88>
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	; (8005c4c <_puts_r+0xd4>)
 8005bde:	429c      	cmp	r4, r3
 8005be0:	d101      	bne.n	8005be6 <_puts_r+0x6e>
 8005be2:	68ac      	ldr	r4, [r5, #8]
 8005be4:	e7da      	b.n	8005b9c <_puts_r+0x24>
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <_puts_r+0xd8>)
 8005be8:	429c      	cmp	r4, r3
 8005bea:	bf08      	it	eq
 8005bec:	68ec      	ldreq	r4, [r5, #12]
 8005bee:	e7d5      	b.n	8005b9c <_puts_r+0x24>
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 f888 	bl	8005d08 <__swsetup_r>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d0dd      	beq.n	8005bb8 <_puts_r+0x40>
 8005bfc:	f04f 35ff 	mov.w	r5, #4294967295
 8005c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c02:	07da      	lsls	r2, r3, #31
 8005c04:	d405      	bmi.n	8005c12 <_puts_r+0x9a>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	059b      	lsls	r3, r3, #22
 8005c0a:	d402      	bmi.n	8005c12 <_puts_r+0x9a>
 8005c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c0e:	f000 faa2 	bl	8006156 <__retarget_lock_release_recursive>
 8005c12:	4628      	mov	r0, r5
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da04      	bge.n	8005c24 <_puts_r+0xac>
 8005c1a:	69a2      	ldr	r2, [r4, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	dc06      	bgt.n	8005c2e <_puts_r+0xb6>
 8005c20:	290a      	cmp	r1, #10
 8005c22:	d004      	beq.n	8005c2e <_puts_r+0xb6>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	7019      	strb	r1, [r3, #0]
 8005c2c:	e7c5      	b.n	8005bba <_puts_r+0x42>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 f817 	bl	8005c64 <__swbuf_r>
 8005c36:	3001      	adds	r0, #1
 8005c38:	d1bf      	bne.n	8005bba <_puts_r+0x42>
 8005c3a:	e7df      	b.n	8005bfc <_puts_r+0x84>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	250a      	movs	r5, #10
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	6022      	str	r2, [r4, #0]
 8005c44:	701d      	strb	r5, [r3, #0]
 8005c46:	e7db      	b.n	8005c00 <_puts_r+0x88>
 8005c48:	08006674 	.word	0x08006674
 8005c4c:	08006694 	.word	0x08006694
 8005c50:	08006654 	.word	0x08006654

08005c54 <puts>:
 8005c54:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <puts+0xc>)
 8005c56:	4601      	mov	r1, r0
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	f7ff bf8d 	b.w	8005b78 <_puts_r>
 8005c5e:	bf00      	nop
 8005c60:	20000024 	.word	0x20000024

08005c64 <__swbuf_r>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	460e      	mov	r6, r1
 8005c68:	4614      	mov	r4, r2
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	b118      	cbz	r0, 8005c76 <__swbuf_r+0x12>
 8005c6e:	6983      	ldr	r3, [r0, #24]
 8005c70:	b90b      	cbnz	r3, 8005c76 <__swbuf_r+0x12>
 8005c72:	f000 f9d1 	bl	8006018 <__sinit>
 8005c76:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <__swbuf_r+0x98>)
 8005c78:	429c      	cmp	r4, r3
 8005c7a:	d12b      	bne.n	8005cd4 <__swbuf_r+0x70>
 8005c7c:	686c      	ldr	r4, [r5, #4]
 8005c7e:	69a3      	ldr	r3, [r4, #24]
 8005c80:	60a3      	str	r3, [r4, #8]
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	071a      	lsls	r2, r3, #28
 8005c86:	d52f      	bpl.n	8005ce8 <__swbuf_r+0x84>
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	b36b      	cbz	r3, 8005ce8 <__swbuf_r+0x84>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	6820      	ldr	r0, [r4, #0]
 8005c90:	1ac0      	subs	r0, r0, r3
 8005c92:	6963      	ldr	r3, [r4, #20]
 8005c94:	b2f6      	uxtb	r6, r6
 8005c96:	4283      	cmp	r3, r0
 8005c98:	4637      	mov	r7, r6
 8005c9a:	dc04      	bgt.n	8005ca6 <__swbuf_r+0x42>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 f926 	bl	8005ef0 <_fflush_r>
 8005ca4:	bb30      	cbnz	r0, 8005cf4 <__swbuf_r+0x90>
 8005ca6:	68a3      	ldr	r3, [r4, #8]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	60a3      	str	r3, [r4, #8]
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	6022      	str	r2, [r4, #0]
 8005cb2:	701e      	strb	r6, [r3, #0]
 8005cb4:	6963      	ldr	r3, [r4, #20]
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	4283      	cmp	r3, r0
 8005cba:	d004      	beq.n	8005cc6 <__swbuf_r+0x62>
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	07db      	lsls	r3, r3, #31
 8005cc0:	d506      	bpl.n	8005cd0 <__swbuf_r+0x6c>
 8005cc2:	2e0a      	cmp	r6, #10
 8005cc4:	d104      	bne.n	8005cd0 <__swbuf_r+0x6c>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f000 f911 	bl	8005ef0 <_fflush_r>
 8005cce:	b988      	cbnz	r0, 8005cf4 <__swbuf_r+0x90>
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <__swbuf_r+0x9c>)
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	d101      	bne.n	8005cde <__swbuf_r+0x7a>
 8005cda:	68ac      	ldr	r4, [r5, #8]
 8005cdc:	e7cf      	b.n	8005c7e <__swbuf_r+0x1a>
 8005cde:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <__swbuf_r+0xa0>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	bf08      	it	eq
 8005ce4:	68ec      	ldreq	r4, [r5, #12]
 8005ce6:	e7ca      	b.n	8005c7e <__swbuf_r+0x1a>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f80c 	bl	8005d08 <__swsetup_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d0cb      	beq.n	8005c8c <__swbuf_r+0x28>
 8005cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf8:	e7ea      	b.n	8005cd0 <__swbuf_r+0x6c>
 8005cfa:	bf00      	nop
 8005cfc:	08006674 	.word	0x08006674
 8005d00:	08006694 	.word	0x08006694
 8005d04:	08006654 	.word	0x08006654

08005d08 <__swsetup_r>:
 8005d08:	4b32      	ldr	r3, [pc, #200]	; (8005dd4 <__swsetup_r+0xcc>)
 8005d0a:	b570      	push	{r4, r5, r6, lr}
 8005d0c:	681d      	ldr	r5, [r3, #0]
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460c      	mov	r4, r1
 8005d12:	b125      	cbz	r5, 8005d1e <__swsetup_r+0x16>
 8005d14:	69ab      	ldr	r3, [r5, #24]
 8005d16:	b913      	cbnz	r3, 8005d1e <__swsetup_r+0x16>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f97d 	bl	8006018 <__sinit>
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <__swsetup_r+0xd0>)
 8005d20:	429c      	cmp	r4, r3
 8005d22:	d10f      	bne.n	8005d44 <__swsetup_r+0x3c>
 8005d24:	686c      	ldr	r4, [r5, #4]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d2c:	0719      	lsls	r1, r3, #28
 8005d2e:	d42c      	bmi.n	8005d8a <__swsetup_r+0x82>
 8005d30:	06dd      	lsls	r5, r3, #27
 8005d32:	d411      	bmi.n	8005d58 <__swsetup_r+0x50>
 8005d34:	2309      	movs	r3, #9
 8005d36:	6033      	str	r3, [r6, #0]
 8005d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	e03e      	b.n	8005dc2 <__swsetup_r+0xba>
 8005d44:	4b25      	ldr	r3, [pc, #148]	; (8005ddc <__swsetup_r+0xd4>)
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d101      	bne.n	8005d4e <__swsetup_r+0x46>
 8005d4a:	68ac      	ldr	r4, [r5, #8]
 8005d4c:	e7eb      	b.n	8005d26 <__swsetup_r+0x1e>
 8005d4e:	4b24      	ldr	r3, [pc, #144]	; (8005de0 <__swsetup_r+0xd8>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	bf08      	it	eq
 8005d54:	68ec      	ldreq	r4, [r5, #12]
 8005d56:	e7e6      	b.n	8005d26 <__swsetup_r+0x1e>
 8005d58:	0758      	lsls	r0, r3, #29
 8005d5a:	d512      	bpl.n	8005d82 <__swsetup_r+0x7a>
 8005d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d5e:	b141      	cbz	r1, 8005d72 <__swsetup_r+0x6a>
 8005d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d002      	beq.n	8005d6e <__swsetup_r+0x66>
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f000 fa5b 	bl	8006224 <_free_r>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6363      	str	r3, [r4, #52]	; 0x34
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6063      	str	r3, [r4, #4]
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f043 0308 	orr.w	r3, r3, #8
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	b94b      	cbnz	r3, 8005da2 <__swsetup_r+0x9a>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d003      	beq.n	8005da2 <__swsetup_r+0x9a>
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 fa01 	bl	80061a4 <__smakebuf_r>
 8005da2:	89a0      	ldrh	r0, [r4, #12]
 8005da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005da8:	f010 0301 	ands.w	r3, r0, #1
 8005dac:	d00a      	beq.n	8005dc4 <__swsetup_r+0xbc>
 8005dae:	2300      	movs	r3, #0
 8005db0:	60a3      	str	r3, [r4, #8]
 8005db2:	6963      	ldr	r3, [r4, #20]
 8005db4:	425b      	negs	r3, r3
 8005db6:	61a3      	str	r3, [r4, #24]
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	b943      	cbnz	r3, 8005dce <__swsetup_r+0xc6>
 8005dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dc0:	d1ba      	bne.n	8005d38 <__swsetup_r+0x30>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	0781      	lsls	r1, r0, #30
 8005dc6:	bf58      	it	pl
 8005dc8:	6963      	ldrpl	r3, [r4, #20]
 8005dca:	60a3      	str	r3, [r4, #8]
 8005dcc:	e7f4      	b.n	8005db8 <__swsetup_r+0xb0>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	e7f7      	b.n	8005dc2 <__swsetup_r+0xba>
 8005dd2:	bf00      	nop
 8005dd4:	20000024 	.word	0x20000024
 8005dd8:	08006674 	.word	0x08006674
 8005ddc:	08006694 	.word	0x08006694
 8005de0:	08006654 	.word	0x08006654

08005de4 <__sflush_r>:
 8005de4:	898a      	ldrh	r2, [r1, #12]
 8005de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	0710      	lsls	r0, r2, #28
 8005dee:	460c      	mov	r4, r1
 8005df0:	d458      	bmi.n	8005ea4 <__sflush_r+0xc0>
 8005df2:	684b      	ldr	r3, [r1, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dc05      	bgt.n	8005e04 <__sflush_r+0x20>
 8005df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dc02      	bgt.n	8005e04 <__sflush_r+0x20>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	d0f9      	beq.n	8005dfe <__sflush_r+0x1a>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e10:	682f      	ldr	r7, [r5, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	d032      	beq.n	8005e7c <__sflush_r+0x98>
 8005e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	075a      	lsls	r2, r3, #29
 8005e1c:	d505      	bpl.n	8005e2a <__sflush_r+0x46>
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	1ac0      	subs	r0, r0, r3
 8005e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e24:	b10b      	cbz	r3, 8005e2a <__sflush_r+0x46>
 8005e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e28:	1ac0      	subs	r0, r0, r3
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e30:	6a21      	ldr	r1, [r4, #32]
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b0      	blx	r6
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	d106      	bne.n	8005e4a <__sflush_r+0x66>
 8005e3c:	6829      	ldr	r1, [r5, #0]
 8005e3e:	291d      	cmp	r1, #29
 8005e40:	d82c      	bhi.n	8005e9c <__sflush_r+0xb8>
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <__sflush_r+0x108>)
 8005e44:	40ca      	lsrs	r2, r1
 8005e46:	07d6      	lsls	r6, r2, #31
 8005e48:	d528      	bpl.n	8005e9c <__sflush_r+0xb8>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	6062      	str	r2, [r4, #4]
 8005e4e:	04d9      	lsls	r1, r3, #19
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	d504      	bpl.n	8005e60 <__sflush_r+0x7c>
 8005e56:	1c42      	adds	r2, r0, #1
 8005e58:	d101      	bne.n	8005e5e <__sflush_r+0x7a>
 8005e5a:	682b      	ldr	r3, [r5, #0]
 8005e5c:	b903      	cbnz	r3, 8005e60 <__sflush_r+0x7c>
 8005e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e62:	602f      	str	r7, [r5, #0]
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d0ca      	beq.n	8005dfe <__sflush_r+0x1a>
 8005e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	d002      	beq.n	8005e76 <__sflush_r+0x92>
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 f9d7 	bl	8006224 <_free_r>
 8005e76:	2000      	movs	r0, #0
 8005e78:	6360      	str	r0, [r4, #52]	; 0x34
 8005e7a:	e7c1      	b.n	8005e00 <__sflush_r+0x1c>
 8005e7c:	6a21      	ldr	r1, [r4, #32]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b0      	blx	r6
 8005e84:	1c41      	adds	r1, r0, #1
 8005e86:	d1c7      	bne.n	8005e18 <__sflush_r+0x34>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0c4      	beq.n	8005e18 <__sflush_r+0x34>
 8005e8e:	2b1d      	cmp	r3, #29
 8005e90:	d001      	beq.n	8005e96 <__sflush_r+0xb2>
 8005e92:	2b16      	cmp	r3, #22
 8005e94:	d101      	bne.n	8005e9a <__sflush_r+0xb6>
 8005e96:	602f      	str	r7, [r5, #0]
 8005e98:	e7b1      	b.n	8005dfe <__sflush_r+0x1a>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	e7ad      	b.n	8005e00 <__sflush_r+0x1c>
 8005ea4:	690f      	ldr	r7, [r1, #16]
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	d0a9      	beq.n	8005dfe <__sflush_r+0x1a>
 8005eaa:	0793      	lsls	r3, r2, #30
 8005eac:	680e      	ldr	r6, [r1, #0]
 8005eae:	bf08      	it	eq
 8005eb0:	694b      	ldreq	r3, [r1, #20]
 8005eb2:	600f      	str	r7, [r1, #0]
 8005eb4:	bf18      	it	ne
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	eba6 0807 	sub.w	r8, r6, r7
 8005ebc:	608b      	str	r3, [r1, #8]
 8005ebe:	f1b8 0f00 	cmp.w	r8, #0
 8005ec2:	dd9c      	ble.n	8005dfe <__sflush_r+0x1a>
 8005ec4:	6a21      	ldr	r1, [r4, #32]
 8005ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ec8:	4643      	mov	r3, r8
 8005eca:	463a      	mov	r2, r7
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b0      	blx	r6
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	dc06      	bgt.n	8005ee2 <__sflush_r+0xfe>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	e78e      	b.n	8005e00 <__sflush_r+0x1c>
 8005ee2:	4407      	add	r7, r0
 8005ee4:	eba8 0800 	sub.w	r8, r8, r0
 8005ee8:	e7e9      	b.n	8005ebe <__sflush_r+0xda>
 8005eea:	bf00      	nop
 8005eec:	20400001 	.word	0x20400001

08005ef0 <_fflush_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	b913      	cbnz	r3, 8005f00 <_fflush_r+0x10>
 8005efa:	2500      	movs	r5, #0
 8005efc:	4628      	mov	r0, r5
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	b118      	cbz	r0, 8005f0a <_fflush_r+0x1a>
 8005f02:	6983      	ldr	r3, [r0, #24]
 8005f04:	b90b      	cbnz	r3, 8005f0a <_fflush_r+0x1a>
 8005f06:	f000 f887 	bl	8006018 <__sinit>
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <_fflush_r+0x6c>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d11b      	bne.n	8005f48 <_fflush_r+0x58>
 8005f10:	686c      	ldr	r4, [r5, #4]
 8005f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ef      	beq.n	8005efa <_fflush_r+0xa>
 8005f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f1c:	07d0      	lsls	r0, r2, #31
 8005f1e:	d404      	bmi.n	8005f2a <_fflush_r+0x3a>
 8005f20:	0599      	lsls	r1, r3, #22
 8005f22:	d402      	bmi.n	8005f2a <_fflush_r+0x3a>
 8005f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f26:	f000 f915 	bl	8006154 <__retarget_lock_acquire_recursive>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	f7ff ff59 	bl	8005de4 <__sflush_r>
 8005f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f34:	07da      	lsls	r2, r3, #31
 8005f36:	4605      	mov	r5, r0
 8005f38:	d4e0      	bmi.n	8005efc <_fflush_r+0xc>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	059b      	lsls	r3, r3, #22
 8005f3e:	d4dd      	bmi.n	8005efc <_fflush_r+0xc>
 8005f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f42:	f000 f908 	bl	8006156 <__retarget_lock_release_recursive>
 8005f46:	e7d9      	b.n	8005efc <_fflush_r+0xc>
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <_fflush_r+0x70>)
 8005f4a:	429c      	cmp	r4, r3
 8005f4c:	d101      	bne.n	8005f52 <_fflush_r+0x62>
 8005f4e:	68ac      	ldr	r4, [r5, #8]
 8005f50:	e7df      	b.n	8005f12 <_fflush_r+0x22>
 8005f52:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <_fflush_r+0x74>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	bf08      	it	eq
 8005f58:	68ec      	ldreq	r4, [r5, #12]
 8005f5a:	e7da      	b.n	8005f12 <_fflush_r+0x22>
 8005f5c:	08006674 	.word	0x08006674
 8005f60:	08006694 	.word	0x08006694
 8005f64:	08006654 	.word	0x08006654

08005f68 <std>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f76:	6083      	str	r3, [r0, #8]
 8005f78:	8181      	strh	r1, [r0, #12]
 8005f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f7c:	81c2      	strh	r2, [r0, #14]
 8005f7e:	6183      	str	r3, [r0, #24]
 8005f80:	4619      	mov	r1, r3
 8005f82:	2208      	movs	r2, #8
 8005f84:	305c      	adds	r0, #92	; 0x5c
 8005f86:	f7ff fdef 	bl	8005b68 <memset>
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x38>)
 8005f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <std+0x3c>)
 8005f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <std+0x40>)
 8005f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <std+0x44>)
 8005f98:	6224      	str	r4, [r4, #32]
 8005f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	08006405 	.word	0x08006405
 8005fa4:	08006427 	.word	0x08006427
 8005fa8:	0800645f 	.word	0x0800645f
 8005fac:	08006483 	.word	0x08006483

08005fb0 <_cleanup_r>:
 8005fb0:	4901      	ldr	r1, [pc, #4]	; (8005fb8 <_cleanup_r+0x8>)
 8005fb2:	f000 b8af 	b.w	8006114 <_fwalk_reent>
 8005fb6:	bf00      	nop
 8005fb8:	08005ef1 	.word	0x08005ef1

08005fbc <__sfmoreglue>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	2268      	movs	r2, #104	; 0x68
 8005fc0:	1e4d      	subs	r5, r1, #1
 8005fc2:	4355      	muls	r5, r2
 8005fc4:	460e      	mov	r6, r1
 8005fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fca:	f000 f997 	bl	80062fc <_malloc_r>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	b140      	cbz	r0, 8005fe4 <__sfmoreglue+0x28>
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005fd8:	300c      	adds	r0, #12
 8005fda:	60a0      	str	r0, [r4, #8]
 8005fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fe0:	f7ff fdc2 	bl	8005b68 <memset>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}

08005fe8 <__sfp_lock_acquire>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__sfp_lock_acquire+0x8>)
 8005fea:	f000 b8b3 	b.w	8006154 <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	2000060d 	.word	0x2000060d

08005ff4 <__sfp_lock_release>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__sfp_lock_release+0x8>)
 8005ff6:	f000 b8ae 	b.w	8006156 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	2000060d 	.word	0x2000060d

08006000 <__sinit_lock_acquire>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__sinit_lock_acquire+0x8>)
 8006002:	f000 b8a7 	b.w	8006154 <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	2000060e 	.word	0x2000060e

0800600c <__sinit_lock_release>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__sinit_lock_release+0x8>)
 800600e:	f000 b8a2 	b.w	8006156 <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	2000060e 	.word	0x2000060e

08006018 <__sinit>:
 8006018:	b510      	push	{r4, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	f7ff fff0 	bl	8006000 <__sinit_lock_acquire>
 8006020:	69a3      	ldr	r3, [r4, #24]
 8006022:	b11b      	cbz	r3, 800602c <__sinit+0x14>
 8006024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006028:	f7ff bff0 	b.w	800600c <__sinit_lock_release>
 800602c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006030:	6523      	str	r3, [r4, #80]	; 0x50
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <__sinit+0x68>)
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <__sinit+0x6c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	62a2      	str	r2, [r4, #40]	; 0x28
 800603a:	42a3      	cmp	r3, r4
 800603c:	bf04      	itt	eq
 800603e:	2301      	moveq	r3, #1
 8006040:	61a3      	streq	r3, [r4, #24]
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f820 	bl	8006088 <__sfp>
 8006048:	6060      	str	r0, [r4, #4]
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f81c 	bl	8006088 <__sfp>
 8006050:	60a0      	str	r0, [r4, #8]
 8006052:	4620      	mov	r0, r4
 8006054:	f000 f818 	bl	8006088 <__sfp>
 8006058:	2200      	movs	r2, #0
 800605a:	60e0      	str	r0, [r4, #12]
 800605c:	2104      	movs	r1, #4
 800605e:	6860      	ldr	r0, [r4, #4]
 8006060:	f7ff ff82 	bl	8005f68 <std>
 8006064:	68a0      	ldr	r0, [r4, #8]
 8006066:	2201      	movs	r2, #1
 8006068:	2109      	movs	r1, #9
 800606a:	f7ff ff7d 	bl	8005f68 <std>
 800606e:	68e0      	ldr	r0, [r4, #12]
 8006070:	2202      	movs	r2, #2
 8006072:	2112      	movs	r1, #18
 8006074:	f7ff ff78 	bl	8005f68 <std>
 8006078:	2301      	movs	r3, #1
 800607a:	61a3      	str	r3, [r4, #24]
 800607c:	e7d2      	b.n	8006024 <__sinit+0xc>
 800607e:	bf00      	nop
 8006080:	08006650 	.word	0x08006650
 8006084:	08005fb1 	.word	0x08005fb1

08006088 <__sfp>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	4607      	mov	r7, r0
 800608c:	f7ff ffac 	bl	8005fe8 <__sfp_lock_acquire>
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <__sfp+0x84>)
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	69b3      	ldr	r3, [r6, #24]
 8006096:	b913      	cbnz	r3, 800609e <__sfp+0x16>
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ffbd 	bl	8006018 <__sinit>
 800609e:	3648      	adds	r6, #72	; 0x48
 80060a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	d503      	bpl.n	80060b0 <__sfp+0x28>
 80060a8:	6833      	ldr	r3, [r6, #0]
 80060aa:	b30b      	cbz	r3, 80060f0 <__sfp+0x68>
 80060ac:	6836      	ldr	r6, [r6, #0]
 80060ae:	e7f7      	b.n	80060a0 <__sfp+0x18>
 80060b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060b4:	b9d5      	cbnz	r5, 80060ec <__sfp+0x64>
 80060b6:	4b16      	ldr	r3, [pc, #88]	; (8006110 <__sfp+0x88>)
 80060b8:	60e3      	str	r3, [r4, #12]
 80060ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060be:	6665      	str	r5, [r4, #100]	; 0x64
 80060c0:	f000 f847 	bl	8006152 <__retarget_lock_init_recursive>
 80060c4:	f7ff ff96 	bl	8005ff4 <__sfp_lock_release>
 80060c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060d0:	6025      	str	r5, [r4, #0]
 80060d2:	61a5      	str	r5, [r4, #24]
 80060d4:	2208      	movs	r2, #8
 80060d6:	4629      	mov	r1, r5
 80060d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060dc:	f7ff fd44 	bl	8005b68 <memset>
 80060e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060e8:	4620      	mov	r0, r4
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ec:	3468      	adds	r4, #104	; 0x68
 80060ee:	e7d9      	b.n	80060a4 <__sfp+0x1c>
 80060f0:	2104      	movs	r1, #4
 80060f2:	4638      	mov	r0, r7
 80060f4:	f7ff ff62 	bl	8005fbc <__sfmoreglue>
 80060f8:	4604      	mov	r4, r0
 80060fa:	6030      	str	r0, [r6, #0]
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1d5      	bne.n	80060ac <__sfp+0x24>
 8006100:	f7ff ff78 	bl	8005ff4 <__sfp_lock_release>
 8006104:	230c      	movs	r3, #12
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	e7ee      	b.n	80060e8 <__sfp+0x60>
 800610a:	bf00      	nop
 800610c:	08006650 	.word	0x08006650
 8006110:	ffff0001 	.word	0xffff0001

08006114 <_fwalk_reent>:
 8006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006118:	4606      	mov	r6, r0
 800611a:	4688      	mov	r8, r1
 800611c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006120:	2700      	movs	r7, #0
 8006122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006126:	f1b9 0901 	subs.w	r9, r9, #1
 800612a:	d505      	bpl.n	8006138 <_fwalk_reent+0x24>
 800612c:	6824      	ldr	r4, [r4, #0]
 800612e:	2c00      	cmp	r4, #0
 8006130:	d1f7      	bne.n	8006122 <_fwalk_reent+0xe>
 8006132:	4638      	mov	r0, r7
 8006134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006138:	89ab      	ldrh	r3, [r5, #12]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d907      	bls.n	800614e <_fwalk_reent+0x3a>
 800613e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006142:	3301      	adds	r3, #1
 8006144:	d003      	beq.n	800614e <_fwalk_reent+0x3a>
 8006146:	4629      	mov	r1, r5
 8006148:	4630      	mov	r0, r6
 800614a:	47c0      	blx	r8
 800614c:	4307      	orrs	r7, r0
 800614e:	3568      	adds	r5, #104	; 0x68
 8006150:	e7e9      	b.n	8006126 <_fwalk_reent+0x12>

08006152 <__retarget_lock_init_recursive>:
 8006152:	4770      	bx	lr

08006154 <__retarget_lock_acquire_recursive>:
 8006154:	4770      	bx	lr

08006156 <__retarget_lock_release_recursive>:
 8006156:	4770      	bx	lr

08006158 <__swhatbuf_r>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	460e      	mov	r6, r1
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	2900      	cmp	r1, #0
 8006162:	b096      	sub	sp, #88	; 0x58
 8006164:	4614      	mov	r4, r2
 8006166:	461d      	mov	r5, r3
 8006168:	da08      	bge.n	800617c <__swhatbuf_r+0x24>
 800616a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	602a      	str	r2, [r5, #0]
 8006172:	061a      	lsls	r2, r3, #24
 8006174:	d410      	bmi.n	8006198 <__swhatbuf_r+0x40>
 8006176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800617a:	e00e      	b.n	800619a <__swhatbuf_r+0x42>
 800617c:	466a      	mov	r2, sp
 800617e:	f000 f9a7 	bl	80064d0 <_fstat_r>
 8006182:	2800      	cmp	r0, #0
 8006184:	dbf1      	blt.n	800616a <__swhatbuf_r+0x12>
 8006186:	9a01      	ldr	r2, [sp, #4]
 8006188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800618c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006190:	425a      	negs	r2, r3
 8006192:	415a      	adcs	r2, r3
 8006194:	602a      	str	r2, [r5, #0]
 8006196:	e7ee      	b.n	8006176 <__swhatbuf_r+0x1e>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	2000      	movs	r0, #0
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	b016      	add	sp, #88	; 0x58
 80061a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080061a4 <__smakebuf_r>:
 80061a4:	898b      	ldrh	r3, [r1, #12]
 80061a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061a8:	079d      	lsls	r5, r3, #30
 80061aa:	4606      	mov	r6, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	d507      	bpl.n	80061c0 <__smakebuf_r+0x1c>
 80061b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	2301      	movs	r3, #1
 80061ba:	6163      	str	r3, [r4, #20]
 80061bc:	b002      	add	sp, #8
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	ab01      	add	r3, sp, #4
 80061c2:	466a      	mov	r2, sp
 80061c4:	f7ff ffc8 	bl	8006158 <__swhatbuf_r>
 80061c8:	9900      	ldr	r1, [sp, #0]
 80061ca:	4605      	mov	r5, r0
 80061cc:	4630      	mov	r0, r6
 80061ce:	f000 f895 	bl	80062fc <_malloc_r>
 80061d2:	b948      	cbnz	r0, 80061e8 <__smakebuf_r+0x44>
 80061d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d8:	059a      	lsls	r2, r3, #22
 80061da:	d4ef      	bmi.n	80061bc <__smakebuf_r+0x18>
 80061dc:	f023 0303 	bic.w	r3, r3, #3
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	e7e3      	b.n	80061b0 <__smakebuf_r+0xc>
 80061e8:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <__smakebuf_r+0x7c>)
 80061ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	6020      	str	r0, [r4, #0]
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	9b00      	ldr	r3, [sp, #0]
 80061f8:	6163      	str	r3, [r4, #20]
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	6120      	str	r0, [r4, #16]
 80061fe:	b15b      	cbz	r3, 8006218 <__smakebuf_r+0x74>
 8006200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006204:	4630      	mov	r0, r6
 8006206:	f000 f975 	bl	80064f4 <_isatty_r>
 800620a:	b128      	cbz	r0, 8006218 <__smakebuf_r+0x74>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	89a0      	ldrh	r0, [r4, #12]
 800621a:	4305      	orrs	r5, r0
 800621c:	81a5      	strh	r5, [r4, #12]
 800621e:	e7cd      	b.n	80061bc <__smakebuf_r+0x18>
 8006220:	08005fb1 	.word	0x08005fb1

08006224 <_free_r>:
 8006224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006226:	2900      	cmp	r1, #0
 8006228:	d044      	beq.n	80062b4 <_free_r+0x90>
 800622a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800622e:	9001      	str	r0, [sp, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f1a1 0404 	sub.w	r4, r1, #4
 8006236:	bfb8      	it	lt
 8006238:	18e4      	addlt	r4, r4, r3
 800623a:	f000 f97d 	bl	8006538 <__malloc_lock>
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <_free_r+0x94>)
 8006240:	9801      	ldr	r0, [sp, #4]
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x30>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	b003      	add	sp, #12
 800624c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006250:	f000 b978 	b.w	8006544 <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x46>
 8006258:	6825      	ldr	r5, [r4, #0]
 800625a:	1961      	adds	r1, r4, r5
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1949      	addeq	r1, r1, r5
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x22>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x50>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x46>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1855      	adds	r5, r2, r1
 8006278:	42a5      	cmp	r5, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x70>
 800627c:	6824      	ldr	r4, [r4, #0]
 800627e:	4421      	add	r1, r4
 8006280:	1854      	adds	r4, r2, r1
 8006282:	42a3      	cmp	r3, r4
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x26>
 8006288:	681c      	ldr	r4, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	4421      	add	r1, r4
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	e7da      	b.n	800624a <_free_r+0x26>
 8006294:	d902      	bls.n	800629c <_free_r+0x78>
 8006296:	230c      	movs	r3, #12
 8006298:	6003      	str	r3, [r0, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x26>
 800629c:	6825      	ldr	r5, [r4, #0]
 800629e:	1961      	adds	r1, r4, r5
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf04      	itt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	bf04      	itt	eq
 80062ac:	1949      	addeq	r1, r1, r5
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	6054      	str	r4, [r2, #4]
 80062b2:	e7ca      	b.n	800624a <_free_r+0x26>
 80062b4:	b003      	add	sp, #12
 80062b6:	bd30      	pop	{r4, r5, pc}
 80062b8:	20000610 	.word	0x20000610

080062bc <sbrk_aligned>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	4e0e      	ldr	r6, [pc, #56]	; (80062f8 <sbrk_aligned+0x3c>)
 80062c0:	460c      	mov	r4, r1
 80062c2:	6831      	ldr	r1, [r6, #0]
 80062c4:	4605      	mov	r5, r0
 80062c6:	b911      	cbnz	r1, 80062ce <sbrk_aligned+0x12>
 80062c8:	f000 f88c 	bl	80063e4 <_sbrk_r>
 80062cc:	6030      	str	r0, [r6, #0]
 80062ce:	4621      	mov	r1, r4
 80062d0:	4628      	mov	r0, r5
 80062d2:	f000 f887 	bl	80063e4 <_sbrk_r>
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	d00a      	beq.n	80062f0 <sbrk_aligned+0x34>
 80062da:	1cc4      	adds	r4, r0, #3
 80062dc:	f024 0403 	bic.w	r4, r4, #3
 80062e0:	42a0      	cmp	r0, r4
 80062e2:	d007      	beq.n	80062f4 <sbrk_aligned+0x38>
 80062e4:	1a21      	subs	r1, r4, r0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 f87c 	bl	80063e4 <_sbrk_r>
 80062ec:	3001      	adds	r0, #1
 80062ee:	d101      	bne.n	80062f4 <sbrk_aligned+0x38>
 80062f0:	f04f 34ff 	mov.w	r4, #4294967295
 80062f4:	4620      	mov	r0, r4
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	20000614 	.word	0x20000614

080062fc <_malloc_r>:
 80062fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006300:	1ccd      	adds	r5, r1, #3
 8006302:	f025 0503 	bic.w	r5, r5, #3
 8006306:	3508      	adds	r5, #8
 8006308:	2d0c      	cmp	r5, #12
 800630a:	bf38      	it	cc
 800630c:	250c      	movcc	r5, #12
 800630e:	2d00      	cmp	r5, #0
 8006310:	4607      	mov	r7, r0
 8006312:	db01      	blt.n	8006318 <_malloc_r+0x1c>
 8006314:	42a9      	cmp	r1, r5
 8006316:	d905      	bls.n	8006324 <_malloc_r+0x28>
 8006318:	230c      	movs	r3, #12
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	2600      	movs	r6, #0
 800631e:	4630      	mov	r0, r6
 8006320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006324:	4e2e      	ldr	r6, [pc, #184]	; (80063e0 <_malloc_r+0xe4>)
 8006326:	f000 f907 	bl	8006538 <__malloc_lock>
 800632a:	6833      	ldr	r3, [r6, #0]
 800632c:	461c      	mov	r4, r3
 800632e:	bb34      	cbnz	r4, 800637e <_malloc_r+0x82>
 8006330:	4629      	mov	r1, r5
 8006332:	4638      	mov	r0, r7
 8006334:	f7ff ffc2 	bl	80062bc <sbrk_aligned>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	4604      	mov	r4, r0
 800633c:	d14d      	bne.n	80063da <_malloc_r+0xde>
 800633e:	6834      	ldr	r4, [r6, #0]
 8006340:	4626      	mov	r6, r4
 8006342:	2e00      	cmp	r6, #0
 8006344:	d140      	bne.n	80063c8 <_malloc_r+0xcc>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	4631      	mov	r1, r6
 800634a:	4638      	mov	r0, r7
 800634c:	eb04 0803 	add.w	r8, r4, r3
 8006350:	f000 f848 	bl	80063e4 <_sbrk_r>
 8006354:	4580      	cmp	r8, r0
 8006356:	d13a      	bne.n	80063ce <_malloc_r+0xd2>
 8006358:	6821      	ldr	r1, [r4, #0]
 800635a:	3503      	adds	r5, #3
 800635c:	1a6d      	subs	r5, r5, r1
 800635e:	f025 0503 	bic.w	r5, r5, #3
 8006362:	3508      	adds	r5, #8
 8006364:	2d0c      	cmp	r5, #12
 8006366:	bf38      	it	cc
 8006368:	250c      	movcc	r5, #12
 800636a:	4629      	mov	r1, r5
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff ffa5 	bl	80062bc <sbrk_aligned>
 8006372:	3001      	adds	r0, #1
 8006374:	d02b      	beq.n	80063ce <_malloc_r+0xd2>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	442b      	add	r3, r5
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	e00e      	b.n	800639c <_malloc_r+0xa0>
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	1b52      	subs	r2, r2, r5
 8006382:	d41e      	bmi.n	80063c2 <_malloc_r+0xc6>
 8006384:	2a0b      	cmp	r2, #11
 8006386:	d916      	bls.n	80063b6 <_malloc_r+0xba>
 8006388:	1961      	adds	r1, r4, r5
 800638a:	42a3      	cmp	r3, r4
 800638c:	6025      	str	r5, [r4, #0]
 800638e:	bf18      	it	ne
 8006390:	6059      	strne	r1, [r3, #4]
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	bf08      	it	eq
 8006396:	6031      	streq	r1, [r6, #0]
 8006398:	5162      	str	r2, [r4, r5]
 800639a:	604b      	str	r3, [r1, #4]
 800639c:	4638      	mov	r0, r7
 800639e:	f104 060b 	add.w	r6, r4, #11
 80063a2:	f000 f8cf 	bl	8006544 <__malloc_unlock>
 80063a6:	f026 0607 	bic.w	r6, r6, #7
 80063aa:	1d23      	adds	r3, r4, #4
 80063ac:	1af2      	subs	r2, r6, r3
 80063ae:	d0b6      	beq.n	800631e <_malloc_r+0x22>
 80063b0:	1b9b      	subs	r3, r3, r6
 80063b2:	50a3      	str	r3, [r4, r2]
 80063b4:	e7b3      	b.n	800631e <_malloc_r+0x22>
 80063b6:	6862      	ldr	r2, [r4, #4]
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	bf0c      	ite	eq
 80063bc:	6032      	streq	r2, [r6, #0]
 80063be:	605a      	strne	r2, [r3, #4]
 80063c0:	e7ec      	b.n	800639c <_malloc_r+0xa0>
 80063c2:	4623      	mov	r3, r4
 80063c4:	6864      	ldr	r4, [r4, #4]
 80063c6:	e7b2      	b.n	800632e <_malloc_r+0x32>
 80063c8:	4634      	mov	r4, r6
 80063ca:	6876      	ldr	r6, [r6, #4]
 80063cc:	e7b9      	b.n	8006342 <_malloc_r+0x46>
 80063ce:	230c      	movs	r3, #12
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4638      	mov	r0, r7
 80063d4:	f000 f8b6 	bl	8006544 <__malloc_unlock>
 80063d8:	e7a1      	b.n	800631e <_malloc_r+0x22>
 80063da:	6025      	str	r5, [r4, #0]
 80063dc:	e7de      	b.n	800639c <_malloc_r+0xa0>
 80063de:	bf00      	nop
 80063e0:	20000610 	.word	0x20000610

080063e4 <_sbrk_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	; (8006400 <_sbrk_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fc f8bc 	bl	800256c <_sbrk>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_sbrk_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_sbrk_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20000618 	.word	0x20000618

08006404 <__sread>:
 8006404:	b510      	push	{r4, lr}
 8006406:	460c      	mov	r4, r1
 8006408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640c:	f000 f8a0 	bl	8006550 <_read_r>
 8006410:	2800      	cmp	r0, #0
 8006412:	bfab      	itete	ge
 8006414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006416:	89a3      	ldrhlt	r3, [r4, #12]
 8006418:	181b      	addge	r3, r3, r0
 800641a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800641e:	bfac      	ite	ge
 8006420:	6563      	strge	r3, [r4, #84]	; 0x54
 8006422:	81a3      	strhlt	r3, [r4, #12]
 8006424:	bd10      	pop	{r4, pc}

08006426 <__swrite>:
 8006426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642a:	461f      	mov	r7, r3
 800642c:	898b      	ldrh	r3, [r1, #12]
 800642e:	05db      	lsls	r3, r3, #23
 8006430:	4605      	mov	r5, r0
 8006432:	460c      	mov	r4, r1
 8006434:	4616      	mov	r6, r2
 8006436:	d505      	bpl.n	8006444 <__swrite+0x1e>
 8006438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643c:	2302      	movs	r3, #2
 800643e:	2200      	movs	r2, #0
 8006440:	f000 f868 	bl	8006514 <_lseek_r>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800644a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	4632      	mov	r2, r6
 8006452:	463b      	mov	r3, r7
 8006454:	4628      	mov	r0, r5
 8006456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800645a:	f000 b817 	b.w	800648c <_write_r>

0800645e <__sseek>:
 800645e:	b510      	push	{r4, lr}
 8006460:	460c      	mov	r4, r1
 8006462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006466:	f000 f855 	bl	8006514 <_lseek_r>
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	bf15      	itete	ne
 8006470:	6560      	strne	r0, [r4, #84]	; 0x54
 8006472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800647a:	81a3      	strheq	r3, [r4, #12]
 800647c:	bf18      	it	ne
 800647e:	81a3      	strhne	r3, [r4, #12]
 8006480:	bd10      	pop	{r4, pc}

08006482 <__sclose>:
 8006482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006486:	f000 b813 	b.w	80064b0 <_close_r>
	...

0800648c <_write_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	; (80064ac <_write_r+0x20>)
 8006490:	4604      	mov	r4, r0
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	2200      	movs	r2, #0
 8006498:	602a      	str	r2, [r5, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f7fa fe44 	bl	8001128 <_write>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_write_r+0x1e>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_write_r+0x1e>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000618 	.word	0x20000618

080064b0 <_close_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d06      	ldr	r5, [pc, #24]	; (80064cc <_close_r+0x1c>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	f7fc f821 	bl	8002502 <_close>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_close_r+0x1a>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_close_r+0x1a>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	20000618 	.word	0x20000618

080064d0 <_fstat_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d07      	ldr	r5, [pc, #28]	; (80064f0 <_fstat_r+0x20>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	f7fc f81c 	bl	800251a <_fstat>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d102      	bne.n	80064ec <_fstat_r+0x1c>
 80064e6:	682b      	ldr	r3, [r5, #0]
 80064e8:	b103      	cbz	r3, 80064ec <_fstat_r+0x1c>
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	bd38      	pop	{r3, r4, r5, pc}
 80064ee:	bf00      	nop
 80064f0:	20000618 	.word	0x20000618

080064f4 <_isatty_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4d06      	ldr	r5, [pc, #24]	; (8006510 <_isatty_r+0x1c>)
 80064f8:	2300      	movs	r3, #0
 80064fa:	4604      	mov	r4, r0
 80064fc:	4608      	mov	r0, r1
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	f7fc f81b 	bl	800253a <_isatty>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_isatty_r+0x1a>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_isatty_r+0x1a>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	20000618 	.word	0x20000618

08006514 <_lseek_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	; (8006534 <_lseek_r+0x20>)
 8006518:	4604      	mov	r4, r0
 800651a:	4608      	mov	r0, r1
 800651c:	4611      	mov	r1, r2
 800651e:	2200      	movs	r2, #0
 8006520:	602a      	str	r2, [r5, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f7fc f814 	bl	8002550 <_lseek>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_lseek_r+0x1e>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_lseek_r+0x1e>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	20000618 	.word	0x20000618

08006538 <__malloc_lock>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__malloc_lock+0x8>)
 800653a:	f7ff be0b 	b.w	8006154 <__retarget_lock_acquire_recursive>
 800653e:	bf00      	nop
 8006540:	2000060c 	.word	0x2000060c

08006544 <__malloc_unlock>:
 8006544:	4801      	ldr	r0, [pc, #4]	; (800654c <__malloc_unlock+0x8>)
 8006546:	f7ff be06 	b.w	8006156 <__retarget_lock_release_recursive>
 800654a:	bf00      	nop
 800654c:	2000060c 	.word	0x2000060c

08006550 <_read_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d07      	ldr	r5, [pc, #28]	; (8006570 <_read_r+0x20>)
 8006554:	4604      	mov	r4, r0
 8006556:	4608      	mov	r0, r1
 8006558:	4611      	mov	r1, r2
 800655a:	2200      	movs	r2, #0
 800655c:	602a      	str	r2, [r5, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	f7fb ffb2 	bl	80024c8 <_read>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_read_r+0x1e>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_read_r+0x1e>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000618 	.word	0x20000618

08006574 <fmaxf>:
 8006574:	b508      	push	{r3, lr}
 8006576:	ed2d 8b02 	vpush	{d8}
 800657a:	eeb0 8a40 	vmov.f32	s16, s0
 800657e:	eef0 8a60 	vmov.f32	s17, s1
 8006582:	f000 f82d 	bl	80065e0 <__fpclassifyf>
 8006586:	b148      	cbz	r0, 800659c <fmaxf+0x28>
 8006588:	eeb0 0a68 	vmov.f32	s0, s17
 800658c:	f000 f828 	bl	80065e0 <__fpclassifyf>
 8006590:	b130      	cbz	r0, 80065a0 <fmaxf+0x2c>
 8006592:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659a:	dc01      	bgt.n	80065a0 <fmaxf+0x2c>
 800659c:	eeb0 8a68 	vmov.f32	s16, s17
 80065a0:	eeb0 0a48 	vmov.f32	s0, s16
 80065a4:	ecbd 8b02 	vpop	{d8}
 80065a8:	bd08      	pop	{r3, pc}

080065aa <fminf>:
 80065aa:	b508      	push	{r3, lr}
 80065ac:	ed2d 8b02 	vpush	{d8}
 80065b0:	eeb0 8a40 	vmov.f32	s16, s0
 80065b4:	eef0 8a60 	vmov.f32	s17, s1
 80065b8:	f000 f812 	bl	80065e0 <__fpclassifyf>
 80065bc:	b148      	cbz	r0, 80065d2 <fminf+0x28>
 80065be:	eeb0 0a68 	vmov.f32	s0, s17
 80065c2:	f000 f80d 	bl	80065e0 <__fpclassifyf>
 80065c6:	b130      	cbz	r0, 80065d6 <fminf+0x2c>
 80065c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80065cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d0:	d401      	bmi.n	80065d6 <fminf+0x2c>
 80065d2:	eeb0 8a68 	vmov.f32	s16, s17
 80065d6:	eeb0 0a48 	vmov.f32	s0, s16
 80065da:	ecbd 8b02 	vpop	{d8}
 80065de:	bd08      	pop	{r3, pc}

080065e0 <__fpclassifyf>:
 80065e0:	ee10 3a10 	vmov	r3, s0
 80065e4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80065e8:	d00d      	beq.n	8006606 <__fpclassifyf+0x26>
 80065ea:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80065ee:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80065f2:	d30a      	bcc.n	800660a <__fpclassifyf+0x2a>
 80065f4:	4b07      	ldr	r3, [pc, #28]	; (8006614 <__fpclassifyf+0x34>)
 80065f6:	1e42      	subs	r2, r0, #1
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d908      	bls.n	800660e <__fpclassifyf+0x2e>
 80065fc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8006600:	4258      	negs	r0, r3
 8006602:	4158      	adcs	r0, r3
 8006604:	4770      	bx	lr
 8006606:	2002      	movs	r0, #2
 8006608:	4770      	bx	lr
 800660a:	2004      	movs	r0, #4
 800660c:	4770      	bx	lr
 800660e:	2003      	movs	r0, #3
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	007ffffe 	.word	0x007ffffe

08006618 <_init>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr

08006624 <_fini>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr
