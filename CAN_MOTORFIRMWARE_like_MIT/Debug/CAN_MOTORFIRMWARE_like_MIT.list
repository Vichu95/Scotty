
CAN_MOTORFIRMWARE_like_MIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a4c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c30  08005c30  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000080  08005cb8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08005cb8  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed79  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002469  00000000  00000000  0002ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9f  00000000  00000000  000321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234e8  00000000  00000000  00032d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113b8  00000000  00000000  0005626f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5148  00000000  00000000  00067627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004614  00000000  00000000  0013c770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00140d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000080 	.word	0x20000080
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005bf8 	.word	0x08005bf8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000084 	.word	0x20000084
 8000200:	08005bf8 	.word	0x08005bf8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Keypad4x4_Init>:
};

//***** Functions definition *****//
//Function(1): Set Keypad pins and ports
void Keypad4x4_Init(Keypad_WiresTypeDef  *KeypadWiringStruct)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	//Step(1): Copy the Keypad wirings to the library
	KeypadStruct = *KeypadWiringStruct;
 8000508:	4a32      	ldr	r2, [pc, #200]	; (80005d4 <Keypad4x4_Init+0xd4>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4614      	mov	r4, r2
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800051c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Step(2): Find the positions of the 4 OUT pins
	Keypad4x4_FindPins_positions();
 8000520:	f000 f85c 	bl	80005dc <Keypad4x4_FindPins_positions>
	//Step(3): Initialise all pins to set all OUT pins to RESET
	KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <Keypad4x4_Init+0xd4>)
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	6859      	ldr	r1, [r3, #4]
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <Keypad4x4_Init+0xd8>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	2301      	movs	r3, #1
 8000532:	fa03 f202 	lsl.w	r2, r3, r2
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <Keypad4x4_Init+0xd4>)
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	430a      	orrs	r2, r1
 800053c:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <Keypad4x4_Init+0xd4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <Keypad4x4_Init+0xd8>)
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	461a      	mov	r2, r3
 800054a:	2301      	movs	r3, #1
 800054c:	fa03 f202 	lsl.w	r2, r3, r2
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <Keypad4x4_Init+0xd4>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	430a      	orrs	r2, r1
 8000556:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <Keypad4x4_Init+0xd4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	6859      	ldr	r1, [r3, #4]
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <Keypad4x4_Init+0xd8>)
 8000560:	789b      	ldrb	r3, [r3, #2]
 8000562:	461a      	mov	r2, r3
 8000564:	2301      	movs	r3, #1
 8000566:	fa03 f202 	lsl.w	r2, r3, r2
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <Keypad4x4_Init+0xd4>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	430a      	orrs	r2, r1
 8000570:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <Keypad4x4_Init+0xd4>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	6859      	ldr	r1, [r3, #4]
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <Keypad4x4_Init+0xd8>)
 800057a:	78db      	ldrb	r3, [r3, #3]
 800057c:	461a      	mov	r2, r3
 800057e:	2301      	movs	r3, #1
 8000580:	fa03 f202 	lsl.w	r2, r3, r2
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <Keypad4x4_Init+0xd4>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	430a      	orrs	r2, r1
 800058a:	605a      	str	r2, [r3, #4]
	
	HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, GPIO_PIN_SET);
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <Keypad4x4_Init+0xd4>)
 800058e:	691b      	ldr	r3, [r3, #16]
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <Keypad4x4_Init+0xd4>)
 8000592:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8000594:	2201      	movs	r2, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f003 f9a8 	bl	80038ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, GPIO_PIN_SET);
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <Keypad4x4_Init+0xd4>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <Keypad4x4_Init+0xd4>)
 80005a2:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80005a4:	2201      	movs	r2, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 f9a0 	bl	80038ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, GPIO_PIN_SET);
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <Keypad4x4_Init+0xd4>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <Keypad4x4_Init+0xd4>)
 80005b2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80005b4:	2201      	movs	r2, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f998 	bl	80038ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, GPIO_PIN_SET);
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <Keypad4x4_Init+0xd4>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <Keypad4x4_Init+0xd4>)
 80005c2:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80005c4:	2201      	movs	r2, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f990 	bl	80038ec <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bdb0      	pop	{r4, r5, r7, pc}
 80005d4:	2000009c 	.word	0x2000009c
 80005d8:	200000cc 	.word	0x200000cc

080005dc <Keypad4x4_FindPins_positions>:
//Function(2): Get pin positions for colomn change use, only for out pins
static void Keypad4x4_FindPins_positions(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
	uint8_t idx=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]
	for(idx=0; idx<16; idx++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	e036      	b.n	800065a <Keypad4x4_FindPins_positions+0x7e>
	{
		if(((KeypadStruct.OUT0pin>>idx)&0x0001) == 0x0001)
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <Keypad4x4_FindPins_positions+0x94>)
 80005ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005f0:	461a      	mov	r2, r3
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	fa42 f303 	asr.w	r3, r2, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <Keypad4x4_FindPins_positions+0x2a>
		{
			OutPositions[0] = idx;
 8000600:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <Keypad4x4_FindPins_positions+0x98>)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	7013      	strb	r3, [r2, #0]
		}
		if(((KeypadStruct.OUT1pin>>idx)&0x0001) == 0x0001)
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <Keypad4x4_FindPins_positions+0x94>)
 8000608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800060a:	461a      	mov	r2, r3
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	fa42 f303 	asr.w	r3, r2, r3
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <Keypad4x4_FindPins_positions+0x44>
		{
			OutPositions[1] = idx;
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <Keypad4x4_FindPins_positions+0x98>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	7053      	strb	r3, [r2, #1]
		}
		if(((KeypadStruct.OUT2pin>>idx)&0x0001) == 0x0001)
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <Keypad4x4_FindPins_positions+0x94>)
 8000622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000624:	461a      	mov	r2, r3
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	fa42 f303 	asr.w	r3, r2, r3
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <Keypad4x4_FindPins_positions+0x5e>
		{
			OutPositions[2] = idx;
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <Keypad4x4_FindPins_positions+0x98>)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	7093      	strb	r3, [r2, #2]
		}
		if(((KeypadStruct.OUT3pin>>idx)&0x0001) == 0x0001)
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <Keypad4x4_FindPins_positions+0x94>)
 800063c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800063e:	461a      	mov	r2, r3
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	fa42 f303 	asr.w	r3, r2, r3
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <Keypad4x4_FindPins_positions+0x78>
		{
			OutPositions[3] = idx;
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <Keypad4x4_FindPins_positions+0x98>)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	70d3      	strb	r3, [r2, #3]
	for(idx=0; idx<16; idx++)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	3301      	adds	r3, #1
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d9c5      	bls.n	80005ec <Keypad4x4_FindPins_positions+0x10>
		}
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c
 8000674:	200000cc 	.word	0x200000cc

08000678 <Keypad4x4_ChangeColomn>:
//Function(3): Change colomn number
static void Keypad4x4_ChangeColomn(uint8_t colNum_0_to_3)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	if(colNum_0_to_3==0)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d134      	bne.n	80006f2 <Keypad4x4_ChangeColomn+0x7a>
	{
		//Set selected colomn
		KeypadStruct.OUT0_Port->OTYPER &= ~(1UL << OutPositions[0]);
 8000688:	4b70      	ldr	r3, [pc, #448]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	6859      	ldr	r1, [r3, #4]
 800068e:	4b70      	ldr	r3, [pc, #448]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	2301      	movs	r3, #1
 8000696:	4093      	lsls	r3, r2
 8000698:	43da      	mvns	r2, r3
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	400a      	ands	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]
		
		//Make other colomns floating
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 80006a2:	4b6a      	ldr	r3, [pc, #424]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	4b69      	ldr	r3, [pc, #420]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 80006aa:	785b      	ldrb	r3, [r3, #1]
 80006ac:	461a      	mov	r2, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	fa03 f202 	lsl.w	r2, r3, r2
 80006b4:	4b65      	ldr	r3, [pc, #404]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 80006bc:	4b63      	ldr	r3, [pc, #396]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	6859      	ldr	r1, [r3, #4]
 80006c2:	4b63      	ldr	r3, [pc, #396]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2301      	movs	r3, #1
 80006ca:	fa03 f202 	lsl.w	r2, r3, r2
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 80006d6:	4b5d      	ldr	r3, [pc, #372]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 80006de:	78db      	ldrb	r3, [r3, #3]
 80006e0:	461a      	mov	r2, r3
 80006e2:	2301      	movs	r3, #1
 80006e4:	fa03 f202 	lsl.w	r2, r3, r2
 80006e8:	4b58      	ldr	r3, [pc, #352]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	605a      	str	r2, [r3, #4]
		//Make other colomns floating
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
	}
}
 80006f0:	e0a6      	b.n	8000840 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==1)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d134      	bne.n	8000762 <Keypad4x4_ChangeColomn+0xea>
		KeypadStruct.OUT1_Port->OTYPER &= ~(1UL << OutPositions[1]);
 80006f8:	4b54      	ldr	r3, [pc, #336]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	6859      	ldr	r1, [r3, #4]
 80006fe:	4b54      	ldr	r3, [pc, #336]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	461a      	mov	r2, r3
 8000704:	2301      	movs	r3, #1
 8000706:	4093      	lsls	r3, r2
 8000708:	43da      	mvns	r2, r3
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	400a      	ands	r2, r1
 8000710:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000712:	4b4e      	ldr	r3, [pc, #312]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	6859      	ldr	r1, [r3, #4]
 8000718:	4b4d      	ldr	r3, [pc, #308]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	2301      	movs	r3, #1
 8000720:	fa03 f202 	lsl.w	r2, r3, r2
 8000724:	4b49      	ldr	r3, [pc, #292]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	430a      	orrs	r2, r1
 800072a:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 800072c:	4b47      	ldr	r3, [pc, #284]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	461a      	mov	r2, r3
 8000738:	2301      	movs	r3, #1
 800073a:	fa03 f202 	lsl.w	r2, r3, r2
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	430a      	orrs	r2, r1
 8000744:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	6859      	ldr	r1, [r3, #4]
 800074c:	4b40      	ldr	r3, [pc, #256]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 800074e:	78db      	ldrb	r3, [r3, #3]
 8000750:	461a      	mov	r2, r3
 8000752:	2301      	movs	r3, #1
 8000754:	fa03 f202 	lsl.w	r2, r3, r2
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	430a      	orrs	r2, r1
 800075e:	605a      	str	r2, [r3, #4]
}
 8000760:	e06e      	b.n	8000840 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==2)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d134      	bne.n	80007d2 <Keypad4x4_ChangeColomn+0x15a>
		KeypadStruct.OUT2_Port->OTYPER &= ~(1UL << OutPositions[2]);
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	6859      	ldr	r1, [r3, #4]
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 8000770:	789b      	ldrb	r3, [r3, #2]
 8000772:	461a      	mov	r2, r3
 8000774:	2301      	movs	r3, #1
 8000776:	4093      	lsls	r3, r2
 8000778:	43da      	mvns	r2, r3
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	400a      	ands	r2, r1
 8000780:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	6859      	ldr	r1, [r3, #4]
 8000788:	4b31      	ldr	r3, [pc, #196]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	2301      	movs	r3, #1
 8000790:	fa03 f202 	lsl.w	r2, r3, r2
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	430a      	orrs	r2, r1
 800079a:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	6859      	ldr	r1, [r3, #4]
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	461a      	mov	r2, r3
 80007a8:	2301      	movs	r3, #1
 80007aa:	fa03 f202 	lsl.w	r2, r3, r2
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 80007b6:	4b25      	ldr	r3, [pc, #148]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	6859      	ldr	r1, [r3, #4]
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 80007be:	78db      	ldrb	r3, [r3, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	fa03 f202 	lsl.w	r2, r3, r2
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	605a      	str	r2, [r3, #4]
}
 80007d0:	e036      	b.n	8000840 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==3)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d133      	bne.n	8000840 <Keypad4x4_ChangeColomn+0x1c8>
		KeypadStruct.OUT3_Port->OTYPER &= ~(1UL << OutPositions[3]);
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	6859      	ldr	r1, [r3, #4]
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 80007e0:	78db      	ldrb	r3, [r3, #3]
 80007e2:	461a      	mov	r2, r3
 80007e4:	2301      	movs	r3, #1
 80007e6:	4093      	lsls	r3, r2
 80007e8:	43da      	mvns	r2, r3
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	400a      	ands	r2, r1
 80007f0:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	6859      	ldr	r1, [r3, #4]
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	2301      	movs	r3, #1
 8000800:	fa03 f202 	lsl.w	r2, r3, r2
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	430a      	orrs	r2, r1
 800080a:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	6859      	ldr	r1, [r3, #4]
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	461a      	mov	r2, r3
 8000818:	2301      	movs	r3, #1
 800081a:	fa03 f202 	lsl.w	r2, r3, r2
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	430a      	orrs	r2, r1
 8000824:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	6859      	ldr	r1, [r3, #4]
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <Keypad4x4_ChangeColomn+0x1d8>)
 800082e:	789b      	ldrb	r3, [r3, #2]
 8000830:	461a      	mov	r2, r3
 8000832:	2301      	movs	r3, #1
 8000834:	fa03 f202 	lsl.w	r2, r3, r2
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <Keypad4x4_ChangeColomn+0x1d4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	430a      	orrs	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	2000009c 	.word	0x2000009c
 8000850:	200000cc 	.word	0x200000cc

08000854 <Keypad4x4_ReadKeypad>:

//Function(4): Read active keypad button
void Keypad4x4_ReadKeypad(bool keys[16])
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	//Step(1): Make Col0 High and check the rows
	Keypad4x4_ChangeColomn(0);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ff0b 	bl	8000678 <Keypad4x4_ChangeColomn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8000862:	4b95      	ldr	r3, [pc, #596]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a94      	ldr	r2, [pc, #592]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000868:	8c12      	ldrh	r2, [r2, #32]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f003 f825 	bl	80038bc <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2da      	uxtb	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8000882:	4b8d      	ldr	r3, [pc, #564]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	4a8c      	ldr	r2, [pc, #560]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000888:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f003 f815 	bl	80038bc <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3304      	adds	r3, #4
 800089a:	2a00      	cmp	r2, #0
 800089c:	bf14      	ite	ne
 800089e:	2201      	movne	r2, #1
 80008a0:	2200      	moveq	r2, #0
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 80008a6:	4b84      	ldr	r3, [pc, #528]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	4a83      	ldr	r2, [pc, #524]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80008ac:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f803 	bl	80038bc <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3308      	adds	r3, #8
 80008be:	2a00      	cmp	r2, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2201      	movne	r2, #1
 80008c4:	2200      	moveq	r2, #0
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 80008ca:	4b7b      	ldr	r3, [pc, #492]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	4a7a      	ldr	r2, [pc, #488]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80008d0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fff1 	bl	80038bc <HAL_GPIO_ReadPin>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	330c      	adds	r3, #12
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	bf14      	ite	ne
 80008e6:	2201      	movne	r2, #1
 80008e8:	2200      	moveq	r2, #0
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	701a      	strb	r2, [r3, #0]
	
	//Step(2): Make Col1 High and check the rows
	Keypad4x4_ChangeColomn(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff fec2 	bl	8000678 <Keypad4x4_ChangeColomn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 80008f4:	4b70      	ldr	r3, [pc, #448]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a6f      	ldr	r2, [pc, #444]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80008fa:	8c12      	ldrh	r2, [r2, #32]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 ffdc 	bl	80038bc <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3301      	adds	r3, #1
 800090c:	2a00      	cmp	r2, #0
 800090e:	bf14      	ite	ne
 8000910:	2201      	movne	r2, #1
 8000912:	2200      	moveq	r2, #0
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8000918:	4b67      	ldr	r3, [pc, #412]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4a66      	ldr	r2, [pc, #408]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 800091e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f002 ffca 	bl	80038bc <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3305      	adds	r3, #5
 8000930:	2a00      	cmp	r2, #0
 8000932:	bf14      	ite	ne
 8000934:	2201      	movne	r2, #1
 8000936:	2200      	moveq	r2, #0
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800093c:	4b5e      	ldr	r3, [pc, #376]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	4a5d      	ldr	r2, [pc, #372]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000942:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f002 ffb8 	bl	80038bc <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3309      	adds	r3, #9
 8000954:	2a00      	cmp	r2, #0
 8000956:	bf14      	ite	ne
 8000958:	2201      	movne	r2, #1
 800095a:	2200      	moveq	r2, #0
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8000960:	4b55      	ldr	r3, [pc, #340]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	4a54      	ldr	r2, [pc, #336]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000966:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f002 ffa6 	bl	80038bc <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	330d      	adds	r3, #13
 8000978:	2a00      	cmp	r2, #0
 800097a:	bf14      	ite	ne
 800097c:	2201      	movne	r2, #1
 800097e:	2200      	moveq	r2, #0
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	701a      	strb	r2, [r3, #0]
	
	//Step(3): Make Col2 High and check the rows
	Keypad4x4_ChangeColomn(2);
 8000984:	2002      	movs	r0, #2
 8000986:	f7ff fe77 	bl	8000678 <Keypad4x4_ChangeColomn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800098a:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a4a      	ldr	r2, [pc, #296]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000990:	8c12      	ldrh	r2, [r2, #32]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f002 ff91 	bl	80038bc <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3302      	adds	r3, #2
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2201      	movne	r2, #1
 80009a8:	2200      	moveq	r2, #0
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	4a41      	ldr	r2, [pc, #260]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80009b4:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 ff7f 	bl	80038bc <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3306      	adds	r3, #6
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	bf14      	ite	ne
 80009ca:	2201      	movne	r2, #1
 80009cc:	2200      	moveq	r2, #0
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80009d8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 ff6d 	bl	80038bc <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	330a      	adds	r3, #10
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2201      	movne	r2, #1
 80009f0:	2200      	moveq	r2, #0
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 80009fc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 ff5b 	bl	80038bc <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	330e      	adds	r3, #14
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2201      	movne	r2, #1
 8000a14:	2200      	moveq	r2, #0
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	701a      	strb	r2, [r3, #0]
	
	//Step(4): Make Col3 High and check the rows
	Keypad4x4_ChangeColomn(3);
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	f7ff fe2c 	bl	8000678 <Keypad4x4_ChangeColomn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a26:	8c12      	ldrh	r2, [r2, #32]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 ff46 	bl	80038bc <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3303      	adds	r3, #3
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2201      	movne	r2, #1
 8000a3e:	2200      	moveq	r2, #0
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a4a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 ff34 	bl	80038bc <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3307      	adds	r3, #7
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2201      	movne	r2, #1
 8000a62:	2200      	moveq	r2, #0
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a6e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 ff22 	bl	80038bc <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	330b      	adds	r3, #11
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2201      	movne	r2, #1
 8000a86:	2200      	moveq	r2, #0
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <Keypad4x4_ReadKeypad+0x264>)
 8000a92:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 ff10 	bl	80038bc <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	330f      	adds	r3, #15
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2201      	movne	r2, #1
 8000aaa:	2200      	moveq	r2, #0
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	701a      	strb	r2, [r3, #0]
}	
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000009c 	.word	0x2000009c

08000abc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ac8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d013      	beq.n	8000afc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ad4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000adc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00b      	beq.n	8000afc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ae4:	e000      	b.n	8000ae8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ae6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ae8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f9      	beq.n	8000ae6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000af2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f002 f8cb 	bl	8002cb6 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d102      	bne.n	8000b2e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck=0;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200004c8 	.word	0x200004c8
 8000b3c:	200004a4 	.word	0x200004a4
 8000b40:	20000010 	.word	0x20000010

08000b44 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f002 f8af 	bl	8002cb6 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 8)
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d102      	bne.n	8000b66 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		datacheck=1;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
	}
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200004c8 	.word	0x200004c8
 8000b74:	200004a4 	.word	0x200004a4
 8000b78:	20000010 	.word	0x20000010

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f001 fd2c 	bl	80025dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f8c2 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 faae 	bl	80010e8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b8c:	f000 f930 	bl	8000df0 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000b90:	f000 fa0a 	bl	8000fa8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000b94:	f000 f9d4 	bl	8000f40 <MX_SPI1_Init>
  MX_CAN2_Init();
 8000b98:	f000 f97e 	bl	8000e98 <MX_CAN2_Init>
  MX_TIM8_Init();
 8000b9c:	f000 fa54 	bl	8001048 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000ba0:	4849      	ldr	r0, [pc, #292]	; (8000cc8 <main+0x14c>)
 8000ba2:	f001 ff69 	bl	8002a78 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000ba6:	4849      	ldr	r0, [pc, #292]	; (8000ccc <main+0x150>)
 8000ba8:	f001 ff66 	bl	8002a78 <HAL_CAN_Start>
  HAL_TIM_Base_Start(&htim1);
 8000bac:	4848      	ldr	r0, [pc, #288]	; (8000cd0 <main+0x154>)
 8000bae:	f004 f83f 	bl	8004c30 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8000bb2:	4848      	ldr	r0, [pc, #288]	; (8000cd4 <main+0x158>)
 8000bb4:	f004 f83c 	bl	8004c30 <HAL_TIM_Base_Start>


  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4843      	ldr	r0, [pc, #268]	; (8000cc8 <main+0x14c>)
 8000bbc:	f002 f98d 	bl	8002eda <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	4842      	ldr	r0, [pc, #264]	; (8000ccc <main+0x150>)
 8000bc4:	f002 f989 	bl	8002eda <HAL_CAN_ActivateNotification>


  TxHeader.DLC = 8;  // data length
 8000bc8:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <main+0x15c>)
 8000bca:	2208      	movs	r2, #8
 8000bcc:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <main+0x15c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000bd4:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <main+0x15c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]


  //Keypad
  myKeypadStruct.IN0_Port=GPIOC;
 8000bda:	4b40      	ldr	r3, [pc, #256]	; (8000cdc <main+0x160>)
 8000bdc:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <main+0x164>)
 8000bde:	601a      	str	r2, [r3, #0]
  myKeypadStruct.IN1_Port=GPIOC;
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <main+0x160>)
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <main+0x164>)
 8000be4:	605a      	str	r2, [r3, #4]
  myKeypadStruct.IN2_Port=GPIOC;
 8000be6:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <main+0x160>)
 8000be8:	4a3d      	ldr	r2, [pc, #244]	; (8000ce0 <main+0x164>)
 8000bea:	609a      	str	r2, [r3, #8]
  myKeypadStruct.IN3_Port=GPIOC;
 8000bec:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <main+0x160>)
 8000bee:	4a3c      	ldr	r2, [pc, #240]	; (8000ce0 <main+0x164>)
 8000bf0:	60da      	str	r2, [r3, #12]

  myKeypadStruct.OUT0_Port=GPIOB;
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <main+0x160>)
 8000bf4:	4a3b      	ldr	r2, [pc, #236]	; (8000ce4 <main+0x168>)
 8000bf6:	611a      	str	r2, [r3, #16]
  myKeypadStruct.OUT1_Port=GPIOB;
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <main+0x160>)
 8000bfa:	4a3a      	ldr	r2, [pc, #232]	; (8000ce4 <main+0x168>)
 8000bfc:	615a      	str	r2, [r3, #20]
  myKeypadStruct.OUT2_Port=GPIOB;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <main+0x160>)
 8000c00:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <main+0x168>)
 8000c02:	619a      	str	r2, [r3, #24]
  myKeypadStruct.OUT3_Port=GPIOB;
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <main+0x160>)
 8000c06:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <main+0x168>)
 8000c08:	61da      	str	r2, [r3, #28]

  //PINS

  myKeypadStruct.IN0pin=GPIO_PIN_6;
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <main+0x160>)
 8000c0c:	2240      	movs	r2, #64	; 0x40
 8000c0e:	841a      	strh	r2, [r3, #32]
  myKeypadStruct.IN1pin=GPIO_PIN_7;
 8000c10:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <main+0x160>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	845a      	strh	r2, [r3, #34]	; 0x22
  myKeypadStruct.IN2pin=GPIO_PIN_8;
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <main+0x160>)
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	849a      	strh	r2, [r3, #36]	; 0x24
  myKeypadStruct.IN3pin=GPIO_PIN_9;
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <main+0x160>)
 8000c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c24:	84da      	strh	r2, [r3, #38]	; 0x26

  myKeypadStruct.OUT0pin=GPIO_PIN_12;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <main+0x160>)
 8000c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2c:	851a      	strh	r2, [r3, #40]	; 0x28
  myKeypadStruct.OUT1pin=GPIO_PIN_13;
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <main+0x160>)
 8000c30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c34:	855a      	strh	r2, [r3, #42]	; 0x2a
  myKeypadStruct.OUT2pin=GPIO_PIN_14;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <main+0x160>)
 8000c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  myKeypadStruct.OUT3pin=GPIO_PIN_15;
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <main+0x160>)
 8000c40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c44:	85da      	strh	r2, [r3, #46]	; 0x2e

  Keypad4x4_Init(&myKeypadStruct);
 8000c46:	4825      	ldr	r0, [pc, #148]	; (8000cdc <main+0x160>)
 8000c48:	f7ff fc5a 	bl	8000500 <Keypad4x4_Init>

  printf("start\n");
 8000c4c:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <main+0x16c>)
 8000c4e:	f004 fbeb 	bl	8005428 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	__HAL_TIM_SET_COUNTER(&htim8,0);
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <main+0x158>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15) == 0 && count==2){
 8000c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <main+0x170>)
 8000c60:	f002 fe2c 	bl	80038bc <HAL_GPIO_ReadPin>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d110      	bne.n	8000c8c <main+0x110>
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <main+0x174>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d10c      	bne.n	8000c8c <main+0x110>
		spi_test=1;
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <main+0x178>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
		spi_send_receive();
 8000c78:	f001 f990 	bl	8001f9c <spi_send_receive>
		//delay_us(1200);
		count=1;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <main+0x174>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
		time2=__HAL_TIM_GET_COUNTER(&htim8);
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <main+0x158>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <main+0x17c>)
 8000c8a:	6013      	str	r3, [r2, #0]
	}
	if(count==1){
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <main+0x174>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d10b      	bne.n	8000cac <main+0x130>
		can_control();
 8000c94:	f000 ff14 	bl	8001ac0 <can_control>
		can_send_receive();
 8000c98:	f000 fe7a 	bl	8001990 <can_send_receive>
		count=2;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <main+0x174>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	601a      	str	r2, [r3, #0]
		time=__HAL_TIM_GET_COUNTER(&htim8);
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <main+0x158>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <main+0x180>)
 8000caa:	6013      	str	r3, [r2, #0]
	}
	Error_spi=HAL_SPI_GetError(&hspi1);
 8000cac:	4814      	ldr	r0, [pc, #80]	; (8000d00 <main+0x184>)
 8000cae:	f003 fe98 	bl	80049e2 <HAL_SPI_GetError>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <main+0x188>)
 8000cb6:	6013      	str	r3, [r2, #0]
	State_spi=HAL_SPI_GetState(&hspi1);
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <main+0x184>)
 8000cba:	f003 fe84 	bl	80049c6 <HAL_SPI_GetState>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <main+0x18c>)
 8000cc4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim8,0);
 8000cc6:	e7c4      	b.n	8000c52 <main+0xd6>
 8000cc8:	200000d0 	.word	0x200000d0
 8000ccc:	200000f8 	.word	0x200000f8
 8000cd0:	20000178 	.word	0x20000178
 8000cd4:	200001c0 	.word	0x200001c0
 8000cd8:	2000048c 	.word	0x2000048c
 8000cdc:	200004f0 	.word	0x200004f0
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	08005c10 	.word	0x08005c10
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	20000014 	.word	0x20000014
 8000cf4:	20000520 	.word	0x20000520
 8000cf8:	200004dc 	.word	0x200004dc
 8000cfc:	200004d8 	.word	0x200004d8
 8000d00:	20000120 	.word	0x20000120
 8000d04:	20000524 	.word	0x20000524
 8000d08:	20000528 	.word	0x20000528

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	; 0x50
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2234      	movs	r2, #52	; 0x34
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 fc64 	bl	80055e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <SystemClock_Config+0xdc>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <SystemClock_Config+0xdc>)
 8000d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <SystemClock_Config+0xdc>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <SystemClock_Config+0xe0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a25      	ldr	r2, [pc, #148]	; (8000dec <SystemClock_Config+0xe0>)
 8000d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <SystemClock_Config+0xe0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d80:	23b4      	movs	r3, #180	; 0xb4
 8000d82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 f94d 	bl	8004034 <HAL_RCC_OscConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000da0:	f001 f97e 	bl	80020a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000da4:	f002 fde0 	bl	8003968 <HAL_PWREx_EnableOverDrive>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000dae:	f001 f977 	bl	80020a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2105      	movs	r1, #5
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fe19 	bl	8003a08 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ddc:	f001 f960 	bl	80020a0 <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3750      	adds	r7, #80	; 0x50
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000

08000df0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000df8:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <MX_CAN1_Init+0xa4>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000dfe:	2209      	movs	r2, #9
 8000e00:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e14:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e1c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e42:	4813      	ldr	r0, [pc, #76]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e44:	f001 fc3c 	bl	80026c0 <HAL_CAN_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000e4e:	f001 f927 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e52:	2301      	movs	r3, #1
 8000e54:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones 18
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0xFFFF;
 8000e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0xFFFC;
 8000e6c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000e70:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can) 20
 8000e7a:	230e      	movs	r3, #14
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_CAN1_Init+0xa0>)
 8000e84:	f001 fd18 	bl	80028b8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000d0 	.word	0x200000d0
 8000e94:	40006400 	.word	0x40006400

08000e98 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <MX_CAN2_Init+0xa4>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ea6:	2209      	movs	r2, #9
 8000ea8:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000eb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ebc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ec0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ec4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000eec:	f001 fbe8 	bl	80026c0 <HAL_CAN_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000ef6:	f001 f8d3 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig2;

  canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 8000efa:	2301      	movs	r3, #1
 8000efc:	623b      	str	r3, [r7, #32]
  canfilterconfig2.FilterBank = 15;  // which filter bank to use from the assigned ones
 8000efe:	230f      	movs	r3, #15
 8000f00:	617b      	str	r3, [r7, #20]
  canfilterconfig2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	613b      	str	r3, [r7, #16]
  canfilterconfig2.FilterIdHigh = 0x0000;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
  canfilterconfig2.FilterIdLow = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  canfilterconfig2.FilterMaskIdHigh = 0xFFFF;
 8000f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f12:	60bb      	str	r3, [r7, #8]
  canfilterconfig2.FilterMaskIdLow = 0xFFFC;
 8000f14:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000f18:	60fb      	str	r3, [r7, #12]
  canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
  canfilterconfig2.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000f22:	230e      	movs	r3, #14
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_CAN2_Init+0xa0>)
 8000f2c:	f001 fcc4 	bl	80028b8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000f8 	.word	0x200000f8
 8000f3c:	40006800 	.word	0x40006800

08000f40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f70:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f86:	220a      	movs	r2, #10
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_SPI1_Init+0x60>)
 8000f8c:	f003 faf0 	bl	8004570 <HAL_SPI_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000f96:	f001 f883 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000120 	.word	0x20000120
 8000fa4:	40013000 	.word	0x40013000

08000fa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_TIM1_Init+0x98>)
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <MX_TIM1_Init+0x9c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_TIM1_Init+0x98>)
 8000fcc:	22b4      	movs	r2, #180	; 0xb4
 8000fce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_TIM1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM1_Init+0x98>)
 8000fd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_TIM1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_TIM1_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_TIM1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <MX_TIM1_Init+0x98>)
 8000ff2:	f003 fdcd 	bl	8004b90 <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ffc:	f001 f850 	bl	80020a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_TIM1_Init+0x98>)
 800100e:	f003 fe77 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001018:	f001 f842 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_TIM1_Init+0x98>)
 800102a:	f004 f86b 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001034:	f001 f834 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000178 	.word	0x20000178
 8001044:	40010000 	.word	0x40010000

08001048 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_TIM8_Init+0x98>)
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <MX_TIM8_Init+0x9c>)
 8001068:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_TIM8_Init+0x98>)
 800106c:	22b4      	movs	r2, #180	; 0xb4
 800106e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_TIM8_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM8_Init+0x98>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_TIM8_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_TIM8_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_TIM8_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <MX_TIM8_Init+0x98>)
 8001092:	f003 fd7d 	bl	8004b90 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800109c:	f001 f800 	bl	80020a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_TIM8_Init+0x98>)
 80010ae:	f003 fe27 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80010b8:	f000 fff2 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM8_Init+0x98>)
 80010ca:	f004 f81b 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80010d4:	f000 ffe4 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200001c0 	.word	0x200001c0
 80010e4:	40010400 	.word	0x40010400

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b46      	ldr	r3, [pc, #280]	; (800121c <MX_GPIO_Init+0x134>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a45      	ldr	r2, [pc, #276]	; (800121c <MX_GPIO_Init+0x134>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <MX_GPIO_Init+0x134>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <MX_GPIO_Init+0x134>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a3e      	ldr	r2, [pc, #248]	; (800121c <MX_GPIO_Init+0x134>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <MX_GPIO_Init+0x134>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <MX_GPIO_Init+0x134>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a37      	ldr	r2, [pc, #220]	; (800121c <MX_GPIO_Init+0x134>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <MX_GPIO_Init+0x134>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <MX_GPIO_Init+0x134>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a30      	ldr	r2, [pc, #192]	; (800121c <MX_GPIO_Init+0x134>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <MX_GPIO_Init+0x134>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <MX_GPIO_Init+0x138>)
 8001176:	f002 fbb9 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001180:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4824      	ldr	r0, [pc, #144]	; (8001224 <MX_GPIO_Init+0x13c>)
 8001192:	f002 f9ff 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001196:	2303      	movs	r3, #3
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	481d      	ldr	r0, [pc, #116]	; (8001220 <MX_GPIO_Init+0x138>)
 80011aa:	f002 f9f3 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_GPIO_Init+0x138>)
 80011c8:	f002 f9e4 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011cc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <MX_GPIO_Init+0x13c>)
 80011e2:	f002 f9d7 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <MX_GPIO_Init+0x140>)
 80011fe:	f002 f9c9 	bl	8003594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2028      	movs	r0, #40	; 0x28
 8001208:	f002 f98d 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120c:	2028      	movs	r0, #40	; 0x28
 800120e:	f002 f9a6 	bl	800355e <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000

0800122c <_write>:
/* USER CODE BEGIN 4 */

//Printfunction

int _write(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e009      	b.n	8001252 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	60ba      	str	r2, [r7, #8]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fc38 	bl	8000abc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbf1      	blt.n	800123e <_write+0x12>
	}
	return len;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <motor_mode>:


///////////////////////////modes/////////////////////////////////

//Start motor
void motor_mode(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	601a      	str	r2, [r3, #0]
    Data[0] = 0xFF;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	701a      	strb	r2, [r3, #0]
    Data[1] = 0xFF;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3301      	adds	r3, #1
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	701a      	strb	r2, [r3, #0]
    Data[2] = 0xFF;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3302      	adds	r3, #2
 800128a:	22ff      	movs	r2, #255	; 0xff
 800128c:	701a      	strb	r2, [r3, #0]
    Data[3] = 0xFF;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3303      	adds	r3, #3
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	701a      	strb	r2, [r3, #0]
    Data[4] = 0xFF;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	701a      	strb	r2, [r3, #0]
    Data[5] = 0xFF;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3305      	adds	r3, #5
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	701a      	strb	r2, [r3, #0]
    Data[6] = 0xFF;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3306      	adds	r3, #6
 80012aa:	22ff      	movs	r2, #255	; 0xff
 80012ac:	701a      	strb	r2, [r3, #0]
    Data[7] = 0xFC;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3307      	adds	r3, #7
 80012b2:	22fc      	movs	r2, #252	; 0xfc
 80012b4:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <motor_mode+0x74>)
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <motor_mode+0x78>)
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <motor_mode+0x7c>)
 80012be:	f001 fc1f 	bl	8002b00 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <motor_mode+0x74>)
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4905      	ldr	r1, [pc, #20]	; (80012dc <motor_mode+0x78>)
 80012c8:	4806      	ldr	r0, [pc, #24]	; (80012e4 <motor_mode+0x80>)
 80012ca:	f001 fc19 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
    }
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200004d0 	.word	0x200004d0
 80012dc:	2000048c 	.word	0x2000048c
 80012e0:	200000d0 	.word	0x200000d0
 80012e4:	200000f8 	.word	0x200000f8

080012e8 <exit_mode>:

//stop motor
void exit_mode(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	601a      	str	r2, [r3, #0]
    Data[0] = 0xFF;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	701a      	strb	r2, [r3, #0]
    Data[1] = 0xFF;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3301      	adds	r3, #1
 8001306:	22ff      	movs	r2, #255	; 0xff
 8001308:	701a      	strb	r2, [r3, #0]
    Data[2] = 0xFF;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3302      	adds	r3, #2
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	701a      	strb	r2, [r3, #0]
    Data[3] = 0xFF;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3303      	adds	r3, #3
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	701a      	strb	r2, [r3, #0]
    Data[4] = 0xFF;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3304      	adds	r3, #4
 800131e:	22ff      	movs	r2, #255	; 0xff
 8001320:	701a      	strb	r2, [r3, #0]
    Data[5] = 0xFF;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3305      	adds	r3, #5
 8001326:	22ff      	movs	r2, #255	; 0xff
 8001328:	701a      	strb	r2, [r3, #0]
    Data[6] = 0xFF;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3306      	adds	r3, #6
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	701a      	strb	r2, [r3, #0]
    Data[7] = 0xFD;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3307      	adds	r3, #7
 8001336:	22fd      	movs	r2, #253	; 0xfd
 8001338:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <exit_mode+0x74>)
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <exit_mode+0x78>)
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <exit_mode+0x7c>)
 8001342:	f001 fbdd 	bl	8002b00 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <exit_mode+0x74>)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <exit_mode+0x78>)
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <exit_mode+0x80>)
 800134e:	f001 fbd7 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
    }
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200004d0 	.word	0x200004d0
 8001360:	2000048c 	.word	0x2000048c
 8001364:	200000d0 	.word	0x200000d0
 8001368:	200000f8 	.word	0x200000f8

0800136c <zero>:

//set motorposition to zero
void zero(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	73fb      	strb	r3, [r7, #15]
	Header->StdId = ID;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	601a      	str	r2, [r3, #0]
    Data[0] = 0xFF;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	701a      	strb	r2, [r3, #0]
    Data[1] = 0xFF;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3301      	adds	r3, #1
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	701a      	strb	r2, [r3, #0]
    Data[2] = 0xFF;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3302      	adds	r3, #2
 8001392:	22ff      	movs	r2, #255	; 0xff
 8001394:	701a      	strb	r2, [r3, #0]
    Data[3] = 0xFF;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3303      	adds	r3, #3
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	701a      	strb	r2, [r3, #0]
    Data[4] = 0xFF;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	22ff      	movs	r2, #255	; 0xff
 80013a4:	701a      	strb	r2, [r3, #0]
    Data[5] = 0xFF;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3305      	adds	r3, #5
 80013aa:	22ff      	movs	r2, #255	; 0xff
 80013ac:	701a      	strb	r2, [r3, #0]
    Data[6] = 0xFF;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3306      	adds	r3, #6
 80013b2:	22ff      	movs	r2, #255	; 0xff
 80013b4:	701a      	strb	r2, [r3, #0]
    Data[7] = 0xFE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3307      	adds	r3, #7
 80013ba:	22fe      	movs	r2, #254	; 0xfe
 80013bc:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Data, &TxMailbox);
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <zero+0x74>)
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <zero+0x78>)
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <zero+0x7c>)
 80013c6:	f001 fb9b 	bl	8002b00 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <zero+0x74>)
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4905      	ldr	r1, [pc, #20]	; (80013e4 <zero+0x78>)
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <zero+0x80>)
 80013d2:	f001 fb95 	bl	8002b00 <HAL_CAN_AddTxMessage>
    }
    if(CAN==1){
    	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, Data, &TxMailbox);
    }*/
    //delay_us(200);
    }
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200004d0 	.word	0x200004d0
 80013e4:	2000048c 	.word	0x2000048c
 80013e8:	200000d0 	.word	0x200000d0
 80013ec:	200000f8 	.word	0x200000f8

080013f0 <pack_message>:

/////////////////////////pack and unpack//////////////////////////

void pack_message(uint8_t ID,CAN_RxHeaderTypeDef*Header,uint8_t*Data){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	73fb      	strb	r3, [r7, #15]

		state.flags[0] = 0;
 80013fe:	4bb4      	ldr	r3, [pc, #720]	; (80016d0 <pack_message+0x2e0>)
 8001400:	2200      	movs	r2, #0
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
		state.flags[1] = 0;
 8001404:	4bb2      	ldr	r3, [pc, #712]	; (80016d0 <pack_message+0x2e0>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34

		if(ID==1){
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d151      	bne.n	80014b4 <pack_message+0xc4>
			state.flags[CAN] |= softstop_joint(&control.ab_p[CAN],state.ab_p[CAN],1.5, -1.5);
 8001410:	4bb0      	ldr	r3, [pc, #704]	; (80016d4 <pack_message+0x2e4>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4ab0      	ldr	r2, [pc, #704]	; (80016d8 <pack_message+0x2e8>)
 8001418:	441a      	add	r2, r3
 800141a:	4bae      	ldr	r3, [pc, #696]	; (80016d4 <pack_message+0x2e4>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	49ac      	ldr	r1, [pc, #688]	; (80016d0 <pack_message+0x2e0>)
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eebf 1a08 	vmov.f32	s2, #248	; 0xbfc00000 -1.5
 800142c:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	4610      	mov	r0, r2
 8001436:	f000 fd1d 	bl	8001e74 <softstop_joint>
 800143a:	4601      	mov	r1, r0
 800143c:	4ba5      	ldr	r3, [pc, #660]	; (80016d4 <pack_message+0x2e4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4aa3      	ldr	r2, [pc, #652]	; (80016d0 <pack_message+0x2e0>)
 8001442:	330c      	adds	r3, #12
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	4aa2      	ldr	r2, [pc, #648]	; (80016d4 <pack_message+0x2e4>)
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	4610      	mov	r0, r2
 800144e:	ea43 0201 	orr.w	r2, r3, r1
 8001452:	499f      	ldr	r1, [pc, #636]	; (80016d0 <pack_message+0x2e0>)
 8001454:	f100 030c 	add.w	r3, r0, #12
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = control.ab_p[CAN];
 800145c:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <pack_message+0x2e4>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4a9d      	ldr	r2, [pc, #628]	; (80016d8 <pack_message+0x2e8>)
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a9c      	ldr	r2, [pc, #624]	; (80016dc <pack_message+0x2ec>)
 800146a:	6013      	str	r3, [r2, #0]
			v_in = control.ab_v[CAN];
 800146c:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <pack_message+0x2e4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4a99      	ldr	r2, [pc, #612]	; (80016d8 <pack_message+0x2e8>)
 8001472:	3306      	adds	r3, #6
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a99      	ldr	r2, [pc, #612]	; (80016e0 <pack_message+0x2f0>)
 800147c:	6013      	str	r3, [r2, #0]
			kp_in = control.ab_kp[CAN];   //stifness
 800147e:	4b95      	ldr	r3, [pc, #596]	; (80016d4 <pack_message+0x2e4>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4a95      	ldr	r2, [pc, #596]	; (80016d8 <pack_message+0x2e8>)
 8001484:	330c      	adds	r3, #12
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a95      	ldr	r2, [pc, #596]	; (80016e4 <pack_message+0x2f4>)
 800148e:	6013      	str	r3, [r2, #0]
			kd_in = control.ab_kd[CAN];     //damper
 8001490:	4b90      	ldr	r3, [pc, #576]	; (80016d4 <pack_message+0x2e4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <pack_message+0x2e8>)
 8001496:	3312      	adds	r3, #18
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <pack_message+0x2f8>)
 80014a0:	6013      	str	r3, [r2, #0]
			t_in = control.ab_t[CAN];
 80014a2:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <pack_message+0x2e4>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4a8c      	ldr	r2, [pc, #560]	; (80016d8 <pack_message+0x2e8>)
 80014a8:	3318      	adds	r3, #24
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a8e      	ldr	r2, [pc, #568]	; (80016ec <pack_message+0x2fc>)
 80014b2:	6013      	str	r3, [r2, #0]
	    	}
		if(ID==2){
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d155      	bne.n	8001566 <pack_message+0x176>
			state.flags[CAN] |= softstop_joint(&control.hip_p[CAN],state.hip_p[CAN],2.5, -2.5)<<1;
 80014ba:	4b86      	ldr	r3, [pc, #536]	; (80016d4 <pack_message+0x2e4>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	3302      	adds	r3, #2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4a85      	ldr	r2, [pc, #532]	; (80016d8 <pack_message+0x2e8>)
 80014c4:	441a      	add	r2, r3
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <pack_message+0x2e4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4981      	ldr	r1, [pc, #516]	; (80016d0 <pack_message+0x2e0>)
 80014cc:	3302      	adds	r3, #2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	eeb8 1a04 	vmov.f32	s2, #132	; 0xc0200000 -2.5
 80014da:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	4610      	mov	r0, r2
 80014e4:	f000 fcc6 	bl	8001e74 <softstop_joint>
 80014e8:	4603      	mov	r3, r0
 80014ea:	0059      	lsls	r1, r3, #1
 80014ec:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <pack_message+0x2e4>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4a77      	ldr	r2, [pc, #476]	; (80016d0 <pack_message+0x2e0>)
 80014f2:	330c      	adds	r3, #12
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	4a76      	ldr	r2, [pc, #472]	; (80016d4 <pack_message+0x2e4>)
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	4610      	mov	r0, r2
 80014fe:	ea43 0201 	orr.w	r2, r3, r1
 8001502:	4973      	ldr	r1, [pc, #460]	; (80016d0 <pack_message+0x2e0>)
 8001504:	f100 030c 	add.w	r3, r0, #12
 8001508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = control.hip_p[CAN];
 800150c:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <pack_message+0x2e4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4a71      	ldr	r2, [pc, #452]	; (80016d8 <pack_message+0x2e8>)
 8001512:	3302      	adds	r3, #2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a70      	ldr	r2, [pc, #448]	; (80016dc <pack_message+0x2ec>)
 800151c:	6013      	str	r3, [r2, #0]
			v_in = control.hip_v[CAN];
 800151e:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <pack_message+0x2e4>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <pack_message+0x2e8>)
 8001524:	3308      	adds	r3, #8
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a6c      	ldr	r2, [pc, #432]	; (80016e0 <pack_message+0x2f0>)
 800152e:	6013      	str	r3, [r2, #0]
			kp_in = control.hip_kp[CAN];   //stifness
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <pack_message+0x2e4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4a68      	ldr	r2, [pc, #416]	; (80016d8 <pack_message+0x2e8>)
 8001536:	330e      	adds	r3, #14
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <pack_message+0x2f4>)
 8001540:	6013      	str	r3, [r2, #0]
			kd_in = control.hip_kd[CAN];     //damper
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <pack_message+0x2e4>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4a64      	ldr	r2, [pc, #400]	; (80016d8 <pack_message+0x2e8>)
 8001548:	3314      	adds	r3, #20
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <pack_message+0x2f8>)
 8001552:	6013      	str	r3, [r2, #0]
			t_in = control.hip_t[CAN];
 8001554:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <pack_message+0x2e4>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4a5f      	ldr	r2, [pc, #380]	; (80016d8 <pack_message+0x2e8>)
 800155a:	331a      	adds	r3, #26
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a62      	ldr	r2, [pc, #392]	; (80016ec <pack_message+0x2fc>)
 8001564:	6013      	str	r3, [r2, #0]
	    	}
		if(ID==3){
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2b03      	cmp	r3, #3
 800156a:	d155      	bne.n	8001618 <pack_message+0x228>
			state.flags[CAN] |= softstop_joint(&control.knee_p[CAN], state.knee_p[CAN],7.3, -0.2)<<2;
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <pack_message+0x2e4>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3304      	adds	r3, #4
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <pack_message+0x2e8>)
 8001576:	441a      	add	r2, r3
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <pack_message+0x2e4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4954      	ldr	r1, [pc, #336]	; (80016d0 <pack_message+0x2e0>)
 800157e:	3304      	adds	r3, #4
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80016f0 <pack_message+0x300>
 800158c:	eddf 0a59 	vldr	s1, [pc, #356]	; 80016f4 <pack_message+0x304>
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	4610      	mov	r0, r2
 8001596:	f000 fc6d 	bl	8001e74 <softstop_joint>
 800159a:	4603      	mov	r3, r0
 800159c:	0099      	lsls	r1, r3, #2
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <pack_message+0x2e4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <pack_message+0x2e0>)
 80015a4:	330c      	adds	r3, #12
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <pack_message+0x2e4>)
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	4610      	mov	r0, r2
 80015b0:	ea43 0201 	orr.w	r2, r3, r1
 80015b4:	4946      	ldr	r1, [pc, #280]	; (80016d0 <pack_message+0x2e0>)
 80015b6:	f100 030c 	add.w	r3, r0, #12
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_in = control.knee_p[CAN];
 80015be:	4b45      	ldr	r3, [pc, #276]	; (80016d4 <pack_message+0x2e4>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4a45      	ldr	r2, [pc, #276]	; (80016d8 <pack_message+0x2e8>)
 80015c4:	3304      	adds	r3, #4
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a43      	ldr	r2, [pc, #268]	; (80016dc <pack_message+0x2ec>)
 80015ce:	6013      	str	r3, [r2, #0]
			v_in = control.knee_v[CAN];
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <pack_message+0x2e4>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4a40      	ldr	r2, [pc, #256]	; (80016d8 <pack_message+0x2e8>)
 80015d6:	330a      	adds	r3, #10
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a40      	ldr	r2, [pc, #256]	; (80016e0 <pack_message+0x2f0>)
 80015e0:	6013      	str	r3, [r2, #0]
			kp_in = control.knee_kp[CAN];   //stifness
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <pack_message+0x2e4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4a3c      	ldr	r2, [pc, #240]	; (80016d8 <pack_message+0x2e8>)
 80015e8:	3310      	adds	r3, #16
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <pack_message+0x2f4>)
 80015f2:	6013      	str	r3, [r2, #0]
			kd_in = control.knee_kd[CAN];     //damper
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <pack_message+0x2e4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4a37      	ldr	r2, [pc, #220]	; (80016d8 <pack_message+0x2e8>)
 80015fa:	3316      	adds	r3, #22
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <pack_message+0x2f8>)
 8001604:	6013      	str	r3, [r2, #0]
			t_in = control.knee_t[CAN];
 8001606:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <pack_message+0x2e4>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4a33      	ldr	r2, [pc, #204]	; (80016d8 <pack_message+0x2e8>)
 800160c:	331c      	adds	r3, #28
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a35      	ldr	r2, [pc, #212]	; (80016ec <pack_message+0x2fc>)
 8001616:	6013      	str	r3, [r2, #0]
	    	}

	Header->StdId = ID;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	601a      	str	r2, [r3, #0]

    /// limit data to be within bounds ///
	float p_des = fminf(fmaxf(P_MIN, p_in), P_MAX);
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <pack_message+0x2ec>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	eef0 0a67 	vmov.f32	s1, s15
 8001628:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800162c:	f004 fa92 	bl	8005b54 <fmaxf>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	f004 faa5 	bl	8005b8a <fminf>
 8001640:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float v_des = fminf(fmaxf(V_MIN, v_in), V_MAX);
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <pack_message+0x2f0>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eef0 0a67 	vmov.f32	s1, s15
 800164e:	eebb 0a0a 	vmov.f32	s0, #186	; 0xc1d00000 -26.0
 8001652:	f004 fa7f 	bl	8005b54 <fmaxf>
 8001656:	eef0 7a40 	vmov.f32	s15, s0
 800165a:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	f004 fa92 	bl	8005b8a <fminf>
 8001666:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float kp = fminf(fmaxf(KP_MIN, kp_in), KP_MAX);
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <pack_message+0x2f4>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	eef0 0a67 	vmov.f32	s1, s15
 8001674:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80016fc <pack_message+0x30c>
 8001678:	f004 fa6c 	bl	8005b54 <fmaxf>
 800167c:	eef0 7a40 	vmov.f32	s15, s0
 8001680:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80016f8 <pack_message+0x308>
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	f004 fa7f 	bl	8005b8a <fminf>
 800168c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float kd = fminf(fmaxf(KD_MIN, kd_in), KD_MAX);
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <pack_message+0x2f8>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	eef0 0a67 	vmov.f32	s1, s15
 800169a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80016fc <pack_message+0x30c>
 800169e:	f004 fa59 	bl	8005b54 <fmaxf>
 80016a2:	eef0 7a40 	vmov.f32	s15, s0
 80016a6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	f004 fa6c 	bl	8005b8a <fminf>
 80016b2:	ed87 0a08 	vstr	s0, [r7, #32]
	float t_ff = fminf(fmaxf(T_MIN, t_in), T_MAX);
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <pack_message+0x2fc>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	eef0 0a67 	vmov.f32	s1, s15
 80016c0:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001704 <pack_message+0x314>
 80016c4:	f004 fa46 	bl	8005b54 <fmaxf>
 80016c8:	eef0 7a40 	vmov.f32	s15, s0
 80016cc:	e01c      	b.n	8001708 <pack_message+0x318>
 80016ce:	bf00      	nop
 80016d0:	20000418 	.word	0x20000418
 80016d4:	20000488 	.word	0x20000488
 80016d8:	20000394 	.word	0x20000394
 80016dc:	20000470 	.word	0x20000470
 80016e0:	20000474 	.word	0x20000474
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004
 80016ec:	20000478 	.word	0x20000478
 80016f0:	be4ccccd 	.word	0xbe4ccccd
 80016f4:	40e9999a 	.word	0x40e9999a
 80016f8:	43fa0000 	.word	0x43fa0000
 80016fc:	00000000 	.word	0x00000000
 8001700:	42400000 	.word	0x42400000
 8001704:	c2400000 	.word	0xc2400000
 8001708:	ed5f 0a03 	vldr	s1, [pc, #-12]	; 8001700 <pack_message+0x310>
 800170c:	eeb0 0a67 	vmov.f32	s0, s15
 8001710:	f004 fa3b 	bl	8005b8a <fminf>
 8001714:	ed87 0a07 	vstr	s0, [r7, #28]

    /// convert floats to unsigned ints ///
    uint16_t p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001718:	2010      	movs	r0, #16
 800171a:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 800171e:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001722:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001726:	f000 fb3f 	bl	8001da8 <float_to_uint>
 800172a:	4603      	mov	r3, r0
 800172c:	837b      	strh	r3, [r7, #26]
    uint16_t v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 800172e:	200c      	movs	r0, #12
 8001730:	eeb3 1a0a 	vmov.f32	s2, #58	; 0x41d00000  26.0
 8001734:	eefb 0a0a 	vmov.f32	s1, #186	; 0xc1d00000 -26.0
 8001738:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800173c:	f000 fb34 	bl	8001da8 <float_to_uint>
 8001740:	4603      	mov	r3, r0
 8001742:	833b      	strh	r3, [r7, #24]
    uint16_t kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001744:	200c      	movs	r0, #12
 8001746:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 80016f8 <pack_message+0x308>
 800174a:	ed5f 0a14 	vldr	s1, [pc, #-80]	; 80016fc <pack_message+0x30c>
 800174e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001752:	f000 fb29 	bl	8001da8 <float_to_uint>
 8001756:	4603      	mov	r3, r0
 8001758:	82fb      	strh	r3, [r7, #22]
    uint16_t kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 800175a:	200c      	movs	r0, #12
 800175c:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001760:	ed5f 0a1a 	vldr	s1, [pc, #-104]	; 80016fc <pack_message+0x30c>
 8001764:	ed97 0a08 	vldr	s0, [r7, #32]
 8001768:	f000 fb1e 	bl	8001da8 <float_to_uint>
 800176c:	4603      	mov	r3, r0
 800176e:	82bb      	strh	r3, [r7, #20]
    uint16_t t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8001770:	200c      	movs	r0, #12
 8001772:	ed1f 1a1d 	vldr	s2, [pc, #-116]	; 8001700 <pack_message+0x310>
 8001776:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 8001704 <pack_message+0x314>
 800177a:	ed97 0a07 	vldr	s0, [r7, #28]
 800177e:	f000 fb13 	bl	8001da8 <float_to_uint>
 8001782:	4603      	mov	r3, r0
 8001784:	827b      	strh	r3, [r7, #18]

    /// pack ints into the can buffer ///
    Data[0] = p_int>>8;
 8001786:	8b7b      	ldrh	r3, [r7, #26]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	b29b      	uxth	r3, r3
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	701a      	strb	r2, [r3, #0]
    Data[1] = p_int&0xFF;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3301      	adds	r3, #1
 8001796:	8b7a      	ldrh	r2, [r7, #26]
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
    Data[2] = v_int>>4;
 800179c:	8b3b      	ldrh	r3, [r7, #24]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3302      	adds	r3, #2
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]
    Data[3] = ((v_int&0xF)<<4)|(kp_int>>8);
 80017aa:	8b3b      	ldrh	r3, [r7, #24]
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	8afb      	ldrh	r3, [r7, #22]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b25a      	sxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3303      	adds	r3, #3
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    Data[4] = kp_int&0xFF;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	8afa      	ldrh	r2, [r7, #22]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]
    Data[5] = kd_int>>4;
 80017ce:	8abb      	ldrh	r3, [r7, #20]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3305      	adds	r3, #5
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]
    Data[6] = ((kd_int&0xF)<<4)|(t_int>>8);
 80017dc:	8abb      	ldrh	r3, [r7, #20]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	b25a      	sxtb	r2, r3
 80017e2:	8a7b      	ldrh	r3, [r7, #18]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b25a      	sxtb	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3306      	adds	r3, #6
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
    Data[7] = t_int&0xff;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3307      	adds	r3, #7
 80017fa:	8a7a      	ldrh	r2, [r7, #18]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]
    }
 8001800:	bf00      	nop
 8001802:	3730      	adds	r7, #48	; 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <unpack_replay>:


void unpack_replay(uint8_t*Data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	/// unpack ints from can buffer ///

	uint16_t id = Data[0];
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	81fb      	strh	r3, [r7, #14]
	uint16_t p_int = (Data[1]<<8)|Data[2];
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3302      	adds	r3, #2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21b      	sxth	r3, r3
 800182c:	81bb      	strh	r3, [r7, #12]
	uint16_t v_int = (Data[3]<<4)|(Data[4]>>4);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3303      	adds	r3, #3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	b21a      	sxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	b2db      	uxtb	r3, r3
 8001842:	b21b      	sxth	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	b21b      	sxth	r3, r3
 8001848:	817b      	strh	r3, [r7, #10]
	uint16_t i_int = ((Data[4]&0xF)<<8)|Data[5];
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21b      	sxth	r3, r3
 8001854:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001858:	b21a      	sxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3305      	adds	r3, #5
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b21b      	sxth	r3, r3
 8001866:	813b      	strh	r3, [r7, #8]
	/// convert uints to floats ///
	p_out = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001868:	89bb      	ldrh	r3, [r7, #12]
 800186a:	2110      	movs	r1, #16
 800186c:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001870:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001874:	4618      	mov	r0, r3
 8001876:	f000 faca 	bl	8001e0e <uint_to_float>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <unpack_replay+0x16c>)
 8001880:	edc3 7a00 	vstr	s15, [r3]
	v_out = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001884:	897b      	ldrh	r3, [r7, #10]
 8001886:	210c      	movs	r1, #12
 8001888:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 800188c:	eebb 0a0a 	vmov.f32	s0, #186	; 0xc1d00000 -26.0
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fabc 	bl	8001e0e <uint_to_float>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <unpack_replay+0x170>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
	t_out = uint_to_float(i_int, T_MAX, T_MAX, 12);
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	210c      	movs	r1, #12
 80018a4:	eddf 0a35 	vldr	s1, [pc, #212]	; 800197c <unpack_replay+0x174>
 80018a8:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800197c <unpack_replay+0x174>
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 faae 	bl	8001e0e <uint_to_float>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <unpack_replay+0x178>)
 80018b8:	edc3 7a00 	vstr	s15, [r3]

	if(id==1){
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d118      	bne.n	80018f4 <unpack_replay+0xec>
		state.ab_p[datacheck]=p_out;
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <unpack_replay+0x17c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a2b      	ldr	r2, [pc, #172]	; (8001974 <unpack_replay+0x16c>)
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <unpack_replay+0x180>)
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	601a      	str	r2, [r3, #0]
		state.ab_v[datacheck]=v_out;
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <unpack_replay+0x17c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a28      	ldr	r2, [pc, #160]	; (8001978 <unpack_replay+0x170>)
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	492b      	ldr	r1, [pc, #172]	; (8001988 <unpack_replay+0x180>)
 80018dc:	3306      	adds	r3, #6
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	601a      	str	r2, [r3, #0]
		//state.ab_t[datacheck]=t_out;
		torque.ab_t[datacheck]=t_out;
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <unpack_replay+0x17c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a25      	ldr	r2, [pc, #148]	; (8001980 <unpack_replay+0x178>)
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4927      	ldr	r1, [pc, #156]	; (800198c <unpack_replay+0x184>)
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	601a      	str	r2, [r3, #0]
	}
	if(id==2){
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d11a      	bne.n	8001930 <unpack_replay+0x128>
		state.hip_p[datacheck]=p_out;
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <unpack_replay+0x17c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <unpack_replay+0x16c>)
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4921      	ldr	r1, [pc, #132]	; (8001988 <unpack_replay+0x180>)
 8001904:	3302      	adds	r3, #2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	601a      	str	r2, [r3, #0]
		state.hip_v[datacheck]=v_out;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <unpack_replay+0x17c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <unpack_replay+0x170>)
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	491c      	ldr	r1, [pc, #112]	; (8001988 <unpack_replay+0x180>)
 8001916:	3308      	adds	r3, #8
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	601a      	str	r2, [r3, #0]
		//state.hip_t[datacheck]=t_out;
		torque.hip_t[datacheck]=t_out;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <unpack_replay+0x17c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <unpack_replay+0x178>)
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	4919      	ldr	r1, [pc, #100]	; (800198c <unpack_replay+0x184>)
 8001928:	3302      	adds	r3, #2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	601a      	str	r2, [r3, #0]
	}
	if(id==3){
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d11a      	bne.n	800196c <unpack_replay+0x164>
		state.knee_p[datacheck]=p_out;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <unpack_replay+0x17c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <unpack_replay+0x16c>)
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4912      	ldr	r1, [pc, #72]	; (8001988 <unpack_replay+0x180>)
 8001940:	3304      	adds	r3, #4
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	601a      	str	r2, [r3, #0]
		state.knee_v[datacheck]=v_out;
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <unpack_replay+0x17c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <unpack_replay+0x170>)
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	490d      	ldr	r1, [pc, #52]	; (8001988 <unpack_replay+0x180>)
 8001952:	330a      	adds	r3, #10
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	601a      	str	r2, [r3, #0]
		//state.knee_t[datacheck]=t_out;
		torque.knee_t[datacheck]=t_out;
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <unpack_replay+0x17c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <unpack_replay+0x178>)
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	490a      	ldr	r1, [pc, #40]	; (800198c <unpack_replay+0x184>)
 8001964:	3304      	adds	r3, #4
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	601a      	str	r2, [r3, #0]
    }
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000047c 	.word	0x2000047c
 8001978:	20000480 	.word	0x20000480
 800197c:	42400000 	.word	0x42400000
 8001980:	20000484 	.word	0x20000484
 8001984:	20000010 	.word	0x20000010
 8001988:	20000418 	.word	0x20000418
 800198c:	20000454 	.word	0x20000454

08001990 <can_send_receive>:
/////////////////////////////////math/////////////////////////////////////////
void can_send_receive(){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
		}
	if (datacheck==1){
		unpack_replay(RxData2);
		}*/

	CAN=0;
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <can_send_receive+0x104>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
	pack_message(Ab_CAN, &TxHeader, TxData);
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <can_send_receive+0x108>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4a3f      	ldr	r2, [pc, #252]	; (8001a9c <can_send_receive+0x10c>)
 80019a0:	493f      	ldr	r1, [pc, #252]	; (8001aa0 <can_send_receive+0x110>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fd24 	bl	80013f0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80019a8:	4b3e      	ldr	r3, [pc, #248]	; (8001aa4 <can_send_receive+0x114>)
 80019aa:	4a3c      	ldr	r2, [pc, #240]	; (8001a9c <can_send_receive+0x10c>)
 80019ac:	493c      	ldr	r1, [pc, #240]	; (8001aa0 <can_send_receive+0x110>)
 80019ae:	483e      	ldr	r0, [pc, #248]	; (8001aa8 <can_send_receive+0x118>)
 80019b0:	f001 f8a6 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
	if (datacheck==0){
 80019b4:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <can_send_receive+0x11c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <can_send_receive+0x32>
		unpack_replay(RxData);
 80019bc:	483c      	ldr	r0, [pc, #240]	; (8001ab0 <can_send_receive+0x120>)
 80019be:	f7ff ff23 	bl	8001808 <unpack_replay>
	}
	pack_message(Hip_CAN, &TxHeader, TxData);
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <can_send_receive+0x124>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4a35      	ldr	r2, [pc, #212]	; (8001a9c <can_send_receive+0x10c>)
 80019c8:	4935      	ldr	r1, [pc, #212]	; (8001aa0 <can_send_receive+0x110>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fd10 	bl	80013f0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <can_send_receive+0x114>)
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <can_send_receive+0x10c>)
 80019d4:	4932      	ldr	r1, [pc, #200]	; (8001aa0 <can_send_receive+0x110>)
 80019d6:	4834      	ldr	r0, [pc, #208]	; (8001aa8 <can_send_receive+0x118>)
 80019d8:	f001 f892 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
	if (datacheck==0){
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <can_send_receive+0x11c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <can_send_receive+0x5a>
		unpack_replay(RxData);
 80019e4:	4832      	ldr	r0, [pc, #200]	; (8001ab0 <can_send_receive+0x120>)
 80019e6:	f7ff ff0f 	bl	8001808 <unpack_replay>
	}
	pack_message(Knee_CAN, &TxHeader, TxData);
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <can_send_receive+0x128>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <can_send_receive+0x10c>)
 80019f0:	492b      	ldr	r1, [pc, #172]	; (8001aa0 <can_send_receive+0x110>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fcfc 	bl	80013f0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80019f8:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <can_send_receive+0x114>)
 80019fa:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <can_send_receive+0x10c>)
 80019fc:	4928      	ldr	r1, [pc, #160]	; (8001aa0 <can_send_receive+0x110>)
 80019fe:	482a      	ldr	r0, [pc, #168]	; (8001aa8 <can_send_receive+0x118>)
 8001a00:	f001 f87e 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
	if (datacheck==0){
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <can_send_receive+0x11c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <can_send_receive+0x82>
		unpack_replay(RxData);
 8001a0c:	4828      	ldr	r0, [pc, #160]	; (8001ab0 <can_send_receive+0x120>)
 8001a0e:	f7ff fefb 	bl	8001808 <unpack_replay>
	}

	CAN=1;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <can_send_receive+0x104>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
	pack_message(Ab_CAN, &TxHeader, TxData);
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <can_send_receive+0x108>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <can_send_receive+0x10c>)
 8001a1e:	4920      	ldr	r1, [pc, #128]	; (8001aa0 <can_send_receive+0x110>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fce5 	bl	80013f0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <can_send_receive+0x114>)
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <can_send_receive+0x10c>)
 8001a2a:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <can_send_receive+0x110>)
 8001a2c:	4823      	ldr	r0, [pc, #140]	; (8001abc <can_send_receive+0x12c>)
 8001a2e:	f001 f867 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
	if (datacheck==1){
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <can_send_receive+0x11c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d102      	bne.n	8001a40 <can_send_receive+0xb0>
		unpack_replay(RxData);
 8001a3a:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <can_send_receive+0x120>)
 8001a3c:	f7ff fee4 	bl	8001808 <unpack_replay>
	}
	pack_message(Hip_CAN, &TxHeader, TxData);
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <can_send_receive+0x124>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <can_send_receive+0x10c>)
 8001a46:	4916      	ldr	r1, [pc, #88]	; (8001aa0 <can_send_receive+0x110>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fcd1 	bl	80013f0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <can_send_receive+0x114>)
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <can_send_receive+0x10c>)
 8001a52:	4913      	ldr	r1, [pc, #76]	; (8001aa0 <can_send_receive+0x110>)
 8001a54:	4819      	ldr	r0, [pc, #100]	; (8001abc <can_send_receive+0x12c>)
 8001a56:	f001 f853 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
	if (datacheck==1){
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <can_send_receive+0x11c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <can_send_receive+0xd8>
		unpack_replay(RxData);
 8001a62:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <can_send_receive+0x120>)
 8001a64:	f7ff fed0 	bl	8001808 <unpack_replay>
	}
	pack_message(Knee_CAN, &TxHeader, TxData);
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <can_send_receive+0x128>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <can_send_receive+0x10c>)
 8001a6e:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <can_send_receive+0x110>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fcbd 	bl	80013f0 <pack_message>
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <can_send_receive+0x114>)
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <can_send_receive+0x10c>)
 8001a7a:	4909      	ldr	r1, [pc, #36]	; (8001aa0 <can_send_receive+0x110>)
 8001a7c:	480f      	ldr	r0, [pc, #60]	; (8001abc <can_send_receive+0x12c>)
 8001a7e:	f001 f83f 	bl	8002b00 <HAL_CAN_AddTxMessage>
    //delay_us(200);
	if (datacheck==1){
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <can_send_receive+0x11c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <can_send_receive+0x100>
		unpack_replay(RxData);
 8001a8a:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <can_send_receive+0x120>)
 8001a8c:	f7ff febc 	bl	8001808 <unpack_replay>
	}

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000488 	.word	0x20000488
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	200004c0 	.word	0x200004c0
 8001aa0:	2000048c 	.word	0x2000048c
 8001aa4:	200004d0 	.word	0x200004d0
 8001aa8:	200000d0 	.word	0x200000d0
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	200004c8 	.word	0x200004c8
 8001ab4:	2000000d 	.word	0x2000000d
 8001ab8:	2000000e 	.word	0x2000000e
 8001abc:	200000f8 	.word	0x200000f8

08001ac0 <can_control>:

void can_control(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	//S10 increase Hip-Motor position
	//S14 decrease Hip-Motor position
	//S11 increase Knee-Motor position
	//S15 decrease Knee-Motor position

	Keypad4x4_ReadKeypad(mySwitches);
 8001ac4:	48a2      	ldr	r0, [pc, #648]	; (8001d50 <can_control+0x290>)
 8001ac6:	f7fe fec5 	bl	8000854 <Keypad4x4_ReadKeypad>
		if(mySwitches[3]==true){
 8001aca:	4ba1      	ldr	r3, [pc, #644]	; (8001d50 <can_control+0x290>)
 8001acc:	78db      	ldrb	r3, [r3, #3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <can_control+0x18>
			keycontrol=1;
 8001ad2:	4ba0      	ldr	r3, [pc, #640]	; (8001d54 <can_control+0x294>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
		}
		if(mySwitches[7]==true){
 8001ad8:	4b9d      	ldr	r3, [pc, #628]	; (8001d50 <can_control+0x290>)
 8001ada:	79db      	ldrb	r3, [r3, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <can_control+0x26>
			keycontrol=0;
 8001ae0:	4b9c      	ldr	r3, [pc, #624]	; (8001d54 <can_control+0x294>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
		}


	if(keycontrol==0){
 8001ae6:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <can_control+0x294>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d156      	bne.n	8001b9c <can_control+0xdc>
		if(control.flags[0]==1 && control.flags[1]==1){
 8001aee:	4b9a      	ldr	r3, [pc, #616]	; (8001d58 <can_control+0x298>)
 8001af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d118      	bne.n	8001b28 <can_control+0x68>
 8001af6:	4b98      	ldr	r3, [pc, #608]	; (8001d58 <can_control+0x298>)
 8001af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d114      	bne.n	8001b28 <can_control+0x68>
			motor_mode(Ab_CAN, &TxHeader, TxData);
 8001afe:	4b97      	ldr	r3, [pc, #604]	; (8001d5c <can_control+0x29c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4a97      	ldr	r2, [pc, #604]	; (8001d60 <can_control+0x2a0>)
 8001b04:	4997      	ldr	r1, [pc, #604]	; (8001d64 <can_control+0x2a4>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fbac 	bl	8001264 <motor_mode>
			motor_mode(Hip_CAN, &TxHeader, TxData);
 8001b0c:	4b96      	ldr	r3, [pc, #600]	; (8001d68 <can_control+0x2a8>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4a93      	ldr	r2, [pc, #588]	; (8001d60 <can_control+0x2a0>)
 8001b12:	4994      	ldr	r1, [pc, #592]	; (8001d64 <can_control+0x2a4>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fba5 	bl	8001264 <motor_mode>
			motor_mode(Knee_CAN, &TxHeader, TxData);
 8001b1a:	4b94      	ldr	r3, [pc, #592]	; (8001d6c <can_control+0x2ac>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4a90      	ldr	r2, [pc, #576]	; (8001d60 <can_control+0x2a0>)
 8001b20:	4990      	ldr	r1, [pc, #576]	; (8001d64 <can_control+0x2a4>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb9e 	bl	8001264 <motor_mode>
			//motormode=1;
			}
		if(control.flags[0]==0 && control.flags[1]==0){
 8001b28:	4b8b      	ldr	r3, [pc, #556]	; (8001d58 <can_control+0x298>)
 8001b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d118      	bne.n	8001b62 <can_control+0xa2>
 8001b30:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <can_control+0x298>)
 8001b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d114      	bne.n	8001b62 <can_control+0xa2>
			exit_mode(Ab_CAN, &TxHeader, TxData);
 8001b38:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <can_control+0x29c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4a88      	ldr	r2, [pc, #544]	; (8001d60 <can_control+0x2a0>)
 8001b3e:	4989      	ldr	r1, [pc, #548]	; (8001d64 <can_control+0x2a4>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fbd1 	bl	80012e8 <exit_mode>
			exit_mode(Hip_CAN, &TxHeader, TxData);
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <can_control+0x2a8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4a85      	ldr	r2, [pc, #532]	; (8001d60 <can_control+0x2a0>)
 8001b4c:	4985      	ldr	r1, [pc, #532]	; (8001d64 <can_control+0x2a4>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fbca 	bl	80012e8 <exit_mode>
			exit_mode(Knee_CAN, &TxHeader, TxData);
 8001b54:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <can_control+0x2ac>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4a81      	ldr	r2, [pc, #516]	; (8001d60 <can_control+0x2a0>)
 8001b5a:	4982      	ldr	r1, [pc, #520]	; (8001d64 <can_control+0x2a4>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fbc3 	bl	80012e8 <exit_mode>
		 	}
		if(control.flags[0]==2 && control.flags[1]==2){
 8001b62:	4b7d      	ldr	r3, [pc, #500]	; (8001d58 <can_control+0x298>)
 8001b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d118      	bne.n	8001b9c <can_control+0xdc>
 8001b6a:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <can_control+0x298>)
 8001b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d114      	bne.n	8001b9c <can_control+0xdc>
			zero(Ab_CAN, &TxHeader, TxData);
 8001b72:	4b7a      	ldr	r3, [pc, #488]	; (8001d5c <can_control+0x29c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <can_control+0x2a0>)
 8001b78:	497a      	ldr	r1, [pc, #488]	; (8001d64 <can_control+0x2a4>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fbf6 	bl	800136c <zero>
			zero(Hip_CAN, &TxHeader, TxData);
 8001b80:	4b79      	ldr	r3, [pc, #484]	; (8001d68 <can_control+0x2a8>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4a76      	ldr	r2, [pc, #472]	; (8001d60 <can_control+0x2a0>)
 8001b86:	4977      	ldr	r1, [pc, #476]	; (8001d64 <can_control+0x2a4>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fbef 	bl	800136c <zero>
			zero(Knee_CAN, &TxHeader, TxData);
 8001b8e:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <can_control+0x2ac>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4a73      	ldr	r2, [pc, #460]	; (8001d60 <can_control+0x2a0>)
 8001b94:	4973      	ldr	r1, [pc, #460]	; (8001d64 <can_control+0x2a4>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fbe8 	bl	800136c <zero>
			}
		}

	if(keycontrol==1){
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <can_control+0x294>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 80fa 	bne.w	8001d9a <can_control+0x2da>
		if(mySwitches[0]==true){
 8001ba6:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <can_control+0x290>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d014      	beq.n	8001bd8 <can_control+0x118>
			motor_mode(Ab_CAN, &TxHeader, TxData);
 8001bae:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <can_control+0x29c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4a6b      	ldr	r2, [pc, #428]	; (8001d60 <can_control+0x2a0>)
 8001bb4:	496b      	ldr	r1, [pc, #428]	; (8001d64 <can_control+0x2a4>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fb54 	bl	8001264 <motor_mode>
			motor_mode(Hip_CAN, &TxHeader, TxData);
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <can_control+0x2a8>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <can_control+0x2a0>)
 8001bc2:	4968      	ldr	r1, [pc, #416]	; (8001d64 <can_control+0x2a4>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fb4d 	bl	8001264 <motor_mode>
			motor_mode(Knee_CAN, &TxHeader, TxData);
 8001bca:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <can_control+0x2ac>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4a64      	ldr	r2, [pc, #400]	; (8001d60 <can_control+0x2a0>)
 8001bd0:	4964      	ldr	r1, [pc, #400]	; (8001d64 <can_control+0x2a4>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fb46 	bl	8001264 <motor_mode>
			}
		if(mySwitches[1]==true){
 8001bd8:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <can_control+0x290>)
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d014      	beq.n	8001c0a <can_control+0x14a>
			exit_mode(Ab_CAN, &TxHeader, TxData);
 8001be0:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <can_control+0x29c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <can_control+0x2a0>)
 8001be6:	495f      	ldr	r1, [pc, #380]	; (8001d64 <can_control+0x2a4>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fb7d 	bl	80012e8 <exit_mode>
			exit_mode(Hip_CAN, &TxHeader, TxData);
 8001bee:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <can_control+0x2a8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	; (8001d60 <can_control+0x2a0>)
 8001bf4:	495b      	ldr	r1, [pc, #364]	; (8001d64 <can_control+0x2a4>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb76 	bl	80012e8 <exit_mode>
			exit_mode(Knee_CAN, &TxHeader, TxData);
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <can_control+0x2ac>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <can_control+0x2a0>)
 8001c02:	4958      	ldr	r1, [pc, #352]	; (8001d64 <can_control+0x2a4>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fb6f 	bl	80012e8 <exit_mode>
			 }
		if(mySwitches[2]==true){
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <can_control+0x290>)
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d014      	beq.n	8001c3c <can_control+0x17c>
			zero(Ab_CAN, &TxHeader, TxData);
 8001c12:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <can_control+0x29c>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <can_control+0x2a0>)
 8001c18:	4952      	ldr	r1, [pc, #328]	; (8001d64 <can_control+0x2a4>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fba6 	bl	800136c <zero>
			zero(Hip_CAN, &TxHeader, TxData);
 8001c20:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <can_control+0x2a8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4a4e      	ldr	r2, [pc, #312]	; (8001d60 <can_control+0x2a0>)
 8001c26:	494f      	ldr	r1, [pc, #316]	; (8001d64 <can_control+0x2a4>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fb9f 	bl	800136c <zero>
			zero(Knee_CAN, &TxHeader, TxData);
 8001c2e:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <can_control+0x2ac>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <can_control+0x2a0>)
 8001c34:	494b      	ldr	r1, [pc, #300]	; (8001d64 <can_control+0x2a4>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb98 	bl	800136c <zero>
			}
		if(mySwitches[8]==true){
 8001c3c:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <can_control+0x290>)
 8001c3e:	7a1b      	ldrb	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d015      	beq.n	8001c70 <can_control+0x1b0>
			control.ab_p[0]=control.ab_p[0]+p_step;
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <can_control+0x298>)
 8001c46:	ed93 7a00 	vldr	s14, [r3]
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <can_control+0x2b0>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c54:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <can_control+0x298>)
 8001c56:	edc3 7a00 	vstr	s15, [r3]
			control.ab_p[1]=control.ab_p[1]+p_step;
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <can_control+0x298>)
 8001c5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <can_control+0x2b0>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <can_control+0x298>)
 8001c6c:	edc3 7a01 	vstr	s15, [r3, #4]
			}
		if(mySwitches[12]==true){
 8001c70:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <can_control+0x290>)
 8001c72:	7b1b      	ldrb	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <can_control+0x1e4>
			control.ab_p[0]=control.ab_p[0]-p_step;
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <can_control+0x298>)
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <can_control+0x2b0>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <can_control+0x298>)
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
			control.ab_p[1]=control.ab_p[1]-p_step;
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <can_control+0x298>)
 8001c90:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <can_control+0x2b0>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <can_control+0x298>)
 8001ca0:	edc3 7a01 	vstr	s15, [r3, #4]
			}
		if(mySwitches[9]==true){
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <can_control+0x290>)
 8001ca6:	7a5b      	ldrb	r3, [r3, #9]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <can_control+0x218>
			control.hip_p[0]=control.hip_p[0]-p_step;
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <can_control+0x298>)
 8001cae:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <can_control+0x2b0>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <can_control+0x298>)
 8001cbe:	edc3 7a02 	vstr	s15, [r3, #8]
			control.hip_p[1]=control.hip_p[1]-p_step;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <can_control+0x298>)
 8001cc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <can_control+0x2b0>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <can_control+0x298>)
 8001cd4:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		if(mySwitches[13]==true){
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <can_control+0x290>)
 8001cda:	7b5b      	ldrb	r3, [r3, #13]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <can_control+0x24c>
			control.hip_p[0]=control.hip_p[0]+p_step;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <can_control+0x298>)
 8001ce2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <can_control+0x2b0>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <can_control+0x298>)
 8001cf2:	edc3 7a02 	vstr	s15, [r3, #8]
			control.hip_p[1]=control.hip_p[1]+p_step;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <can_control+0x298>)
 8001cf8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <can_control+0x2b0>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <can_control+0x298>)
 8001d08:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		if(mySwitches[10]==true){
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <can_control+0x290>)
 8001d0e:	7a9b      	ldrb	r3, [r3, #10]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d015      	beq.n	8001d40 <can_control+0x280>
			control.knee_p[0]=control.knee_p[0]-p_step;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <can_control+0x298>)
 8001d16:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <can_control+0x2b0>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <can_control+0x298>)
 8001d26:	edc3 7a04 	vstr	s15, [r3, #16]
			control.knee_p[1]=control.knee_p[1]-p_step;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <can_control+0x298>)
 8001d2c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <can_control+0x2b0>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <can_control+0x298>)
 8001d3c:	edc3 7a05 	vstr	s15, [r3, #20]
			}
		if(mySwitches[14]==true){
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <can_control+0x290>)
 8001d42:	7b9b      	ldrb	r3, [r3, #14]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d028      	beq.n	8001d9a <can_control+0x2da>
			control.knee_p[0]=control.knee_p[0]+p_step;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <can_control+0x298>)
 8001d4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d4e:	e011      	b.n	8001d74 <can_control+0x2b4>
 8001d50:	200004e0 	.word	0x200004e0
 8001d54:	200004d4 	.word	0x200004d4
 8001d58:	20000394 	.word	0x20000394
 8001d5c:	2000000c 	.word	0x2000000c
 8001d60:	200004c0 	.word	0x200004c0
 8001d64:	2000048c 	.word	0x2000048c
 8001d68:	2000000d 	.word	0x2000000d
 8001d6c:	2000000e 	.word	0x2000000e
 8001d70:	20000008 	.word	0x20000008
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <can_control+0x2e0>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <can_control+0x2e4>)
 8001d80:	edc3 7a04 	vstr	s15, [r3, #16]
			control.knee_p[1]=control.knee_p[1]+p_step;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <can_control+0x2e4>)
 8001d86:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <can_control+0x2e0>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <can_control+0x2e4>)
 8001d96:	edc3 7a05 	vstr	s15, [r3, #20]
			}
		}
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000394 	.word	0x20000394

08001da8 <float_to_uint>:

/////////////////////////////////math/////////////////////////////////////////

int float_to_uint(float x, float x_min, float x_max, int bits){
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8001db2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001db6:	ed87 1a01 	vstr	s2, [r7, #4]
 8001dba:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8001dbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8001dd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ddc:	2201      	movs	r2, #1
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dee:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001df2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dfe:	ee17 3a90 	vmov	r3, s15
    }
 8001e02:	4618      	mov	r0, r3
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <uint_to_float>:

float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8001e0e:	b480      	push	{r7}
 8001e10:	b087      	sub	sp, #28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e1a:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8001e20:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e46:	2201      	movs	r2, #1
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8001e64:	eeb0 0a67 	vmov.f32	s0, s15
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <softstop_joint>:

////////////////////////softstop//////////////////////////////////
//actuator only can move to a limit position

int softstop_joint(float *control,float state, float limit_p, float limit_n){
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e80:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e84:	ed87 1a00 	vstr	s2, [r7]
  if(*control>=limit_p){
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	d821      	bhi.n	8001ee0 <softstop_joint+0x6c>
    *control = limit_p;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
    v_in = 0.0f;
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <softstop_joint+0xd0>)
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    kp_in = 0.0f;
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <softstop_joint+0xd4>)
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    kd_in = KD_SOFTSTOP;
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <softstop_joint+0xd8>)
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <softstop_joint+0xdc>)
 8001eb6:	601a      	str	r2, [r3, #0]
    t_in += KP_SOFTSTOP*(limit_p - state);
 8001eb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f54 <softstop_joint+0xe0>
 8001ec8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <softstop_joint+0xe4>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <softstop_joint+0xe4>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e02b      	b.n	8001f38 <softstop_joint+0xc4>
    }
  if(*control<=limit_n){
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ed97 7a00 	vldr	s14, [r7]
 8001eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	db21      	blt.n	8001f38 <softstop_joint+0xc4>
    *control = limit_n;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	601a      	str	r2, [r3, #0]
    v_in = 0.0f;
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <softstop_joint+0xd0>)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    kp_in = 0.0f;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <softstop_joint+0xd4>)
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
    kd_in = KD_SOFTSTOP;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <softstop_joint+0xd8>)
 8001f0c:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <softstop_joint+0xdc>)
 8001f0e:	601a      	str	r2, [r3, #0]
    t_in += KP_SOFTSTOP*(limit_n - state);
 8001f10:	ed97 7a00 	vldr	s14, [r7]
 8001f14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001f54 <softstop_joint+0xe0>
 8001f20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <softstop_joint+0xe4>)
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <softstop_joint+0xe4>)
 8001f30:	edc3 7a00 	vstr	s15, [r3]
    return 1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e7ff      	b.n	8001f38 <softstop_joint+0xc4>
    }
  }
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	20000474 	.word	0x20000474
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004
 8001f50:	3ecccccd 	.word	0x3ecccccd
 8001f54:	42c80000 	.word	0x42c80000
 8001f58:	20000478 	.word	0x20000478

08001f5c <xor_checksum>:
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
}

////////////////////////spi//////////////////////////////////
uint32_t xor_checksum(uint32_t* data, int len)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    uint32_t t = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	e00a      	b.n	8001f86 <xor_checksum+0x2a>
        t = t ^ data[i];
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4053      	eors	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < len; i++)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf0      	blt.n	8001f70 <xor_checksum+0x14>
    return t;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <spi_send_receive>:

void spi_send_receive(void){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af02      	add	r7, sp, #8

	//calculatet the checksum
	//pack the status variables into the tx buffer
	state.checksum = xor_checksum((uint32_t*)&state,14);
 8001fa2:	210e      	movs	r1, #14
 8001fa4:	4835      	ldr	r0, [pc, #212]	; (800207c <spi_send_receive+0xe0>)
 8001fa6:	f7ff ffd9 	bl	8001f5c <xor_checksum>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a33      	ldr	r2, [pc, #204]	; (800207c <spi_send_receive+0xe0>)
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
	for(int i = 0; i < STATE_LEN ; i++){
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e00b      	b.n	8001fce <spi_send_receive+0x32>
		spi_tx_buffer[i] = ((uint16_t*)(&state))[i];
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4a30      	ldr	r2, [pc, #192]	; (800207c <spi_send_receive+0xe0>)
 8001fbc:	4413      	add	r3, r2
 8001fbe:	8819      	ldrh	r1, [r3, #0]
 8001fc0:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <spi_send_receive+0xe4>)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < STATE_LEN ; i++){
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b1d      	cmp	r3, #29
 8001fd2:	ddf0      	ble.n	8001fb6 <spi_send_receive+0x1a>
		}

	//SPI transmission and receive
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==0){
 8001fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd8:	482a      	ldr	r0, [pc, #168]	; (8002084 <spi_send_receive+0xe8>)
 8001fda:	f001 fc6f 	bl	80038bc <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d108      	bne.n	8001ff6 <spi_send_receive+0x5a>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)spi_tx_buffer, (uint8_t *)spi_rx_buffer, RX_LEN, HAL_MAX_DELAY); //HAL_MAX_DELAY
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2342      	movs	r3, #66	; 0x42
 8001fec:	4a26      	ldr	r2, [pc, #152]	; (8002088 <spi_send_receive+0xec>)
 8001fee:	4924      	ldr	r1, [pc, #144]	; (8002080 <spi_send_receive+0xe4>)
 8001ff0:	4826      	ldr	r0, [pc, #152]	; (800208c <spi_send_receive+0xf0>)
 8001ff2:	f002 fb46 	bl	8004682 <HAL_SPI_TransmitReceive>
			HAL_SPI_Receive(&hspi1, (uint8_t *)spi_rx_buffer, RX_LEN, 100);
			}*/
		}

	//unpack the received bytes from rx buffer into †he valuesrec structur
	for(int i = 0; i < RX_LEN; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	e00b      	b.n	8002014 <spi_send_receive+0x78>
		((uint16_t*) &valuesrec)[i] = spi_rx_buffer[i];
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4a23      	ldr	r2, [pc, #140]	; (8002090 <spi_send_receive+0xf4>)
 8002002:	4413      	add	r3, r2
 8002004:	4920      	ldr	r1, [pc, #128]	; (8002088 <spi_send_receive+0xec>)
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800200c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < RX_LEN; i++){
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3301      	adds	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b41      	cmp	r3, #65	; 0x41
 8002018:	ddf0      	ble.n	8001ffc <spi_send_receive+0x60>
		//printf("%d\n", spi_rx_buffer[i]);
		}
	//if the communication has no issues the values will write in the control structure
	if(keycontrol==0){
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <spi_send_receive+0xf8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d128      	bne.n	8002074 <spi_send_receive+0xd8>
	check = xor_checksum((uint32_t*)&valuesrec,32);
 8002022:	2120      	movs	r1, #32
 8002024:	481a      	ldr	r0, [pc, #104]	; (8002090 <spi_send_receive+0xf4>)
 8002026:	f7ff ff99 	bl	8001f5c <xor_checksum>
 800202a:	4603      	mov	r3, r0
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <spi_send_receive+0xfc>)
 800202e:	6013      	str	r3, [r2, #0]
	if(valuesrec.checksum == check && (valuesrec.flags[0]<=3 ||valuesrec.flags[1]<=3)){
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <spi_send_receive+0xf4>)
 8002032:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <spi_send_receive+0xfc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d11a      	bne.n	8002074 <spi_send_receive+0xd8>
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <spi_send_receive+0xf4>)
 8002040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002042:	2b03      	cmp	r3, #3
 8002044:	d903      	bls.n	800204e <spi_send_receive+0xb2>
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <spi_send_receive+0xf4>)
 8002048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800204a:	2b03      	cmp	r3, #3
 800204c:	d812      	bhi.n	8002074 <spi_send_receive+0xd8>
		for(int i = 0; i < CONTROL_LEN; i++){
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	e00c      	b.n	800206e <spi_send_receive+0xd2>
			((uint16_t*) &control)[i] = ((uint16_t*) &valuesrec)[i];
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <spi_send_receive+0xf4>)
 800205a:	441a      	add	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	490e      	ldr	r1, [pc, #56]	; (800209c <spi_send_receive+0x100>)
 8002062:	440b      	add	r3, r1
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < CONTROL_LEN; i++){
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3301      	adds	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b41      	cmp	r3, #65	; 0x41
 8002072:	ddef      	ble.n	8002054 <spi_send_receive+0xb8>
		    }
		}
	}
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000418 	.word	0x20000418
 8002080:	20000208 	.word	0x20000208
 8002084:	40020000 	.word	0x40020000
 8002088:	2000028c 	.word	0x2000028c
 800208c:	20000120 	.word	0x20000120
 8002090:	20000310 	.word	0x20000310
 8002094:	200004d4 	.word	0x200004d4
 8002098:	2000046c 	.word	0x2000046c
 800209c:	20000394 	.word	0x20000394

080020a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a4:	b672      	cpsid	i
}
 80020a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <Error_Handler+0x8>
	...

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_MspInit+0x4c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_MspInit+0x4c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_MspInit+0x4c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_MspInit+0x4c>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_MspInit+0x4c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800

080020fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	; 0x30
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a4e      	ldr	r2, [pc, #312]	; (8002254 <HAL_CAN_MspInit+0x158>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d13e      	bne.n	800219c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800211e:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <HAL_CAN_MspInit+0x15c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <HAL_CAN_MspInit+0x15c>)
 8002126:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002128:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <HAL_CAN_MspInit+0x15c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10d      	bne.n	800214c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_CAN_MspInit+0x160>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_CAN_MspInit+0x160>)
 800213a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_CAN_MspInit+0x160>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_CAN_MspInit+0x160>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a41      	ldr	r2, [pc, #260]	; (800225c <HAL_CAN_MspInit+0x160>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_CAN_MspInit+0x160>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002168:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800217a:	2309      	movs	r3, #9
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4836      	ldr	r0, [pc, #216]	; (8002260 <HAL_CAN_MspInit+0x164>)
 8002186:	f001 fa05 	bl	8003594 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2014      	movs	r0, #20
 8002190:	f001 f9c9 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002194:	2014      	movs	r0, #20
 8002196:	f001 f9e2 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800219a:	e057      	b.n	800224c <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a30      	ldr	r2, [pc, #192]	; (8002264 <HAL_CAN_MspInit+0x168>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d152      	bne.n	800224c <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a2b      	ldr	r2, [pc, #172]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_CAN_MspInit+0x15c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	4a23      	ldr	r2, [pc, #140]	; (8002258 <HAL_CAN_MspInit+0x15c>)
 80021ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_CAN_MspInit+0x15c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10d      	bne.n	80021f0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_CAN_MspInit+0x160>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_CAN_MspInit+0x160>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800220c:	2360      	movs	r3, #96	; 0x60
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800221c:	2309      	movs	r3, #9
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4810      	ldr	r0, [pc, #64]	; (8002268 <HAL_CAN_MspInit+0x16c>)
 8002228:	f001 f9b4 	bl	8003594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2040      	movs	r0, #64	; 0x40
 8002232:	f001 f978 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002236:	2040      	movs	r0, #64	; 0x40
 8002238:	f001 f991 	bl	800355e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	2041      	movs	r0, #65	; 0x41
 8002242:	f001 f970 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002246:	2041      	movs	r0, #65	; 0x41
 8002248:	f001 f989 	bl	800355e <HAL_NVIC_EnableIRQ>
}
 800224c:	bf00      	nop
 800224e:	3730      	adds	r7, #48	; 0x30
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40006400 	.word	0x40006400
 8002258:	2000052c 	.word	0x2000052c
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000
 8002264:	40006800 	.word	0x40006800
 8002268:	40020400 	.word	0x40020400

0800226c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a28      	ldr	r2, [pc, #160]	; (800232c <HAL_SPI_MspInit+0xc0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d149      	bne.n	8002322 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 8002298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_SPI_MspInit+0xc4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e2:	23c0      	movs	r3, #192	; 0xc0
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022f2:	2305      	movs	r3, #5
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <HAL_SPI_MspInit+0xc8>)
 80022fe:	f001 f949 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002302:	2308      	movs	r3, #8
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002312:	2305      	movs	r3, #5
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <HAL_SPI_MspInit+0xcc>)
 800231e:	f001 f939 	bl	8003594 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002322:	bf00      	nop
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40013000 	.word	0x40013000
 8002330:	40023800 	.word	0x40023800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400

0800233c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <HAL_TIM_Base_MspInit+0x64>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10e      	bne.n	800236c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_TIM_Base_MspInit+0x68>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_TIM_Base_MspInit+0x68>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_TIM_Base_MspInit+0x68>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800236a:	e012      	b.n	8002392 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10d      	bne.n	8002392 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_TIM_Base_MspInit+0x68>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_TIM_Base_MspInit+0x68>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6453      	str	r3, [r2, #68]	; 0x44
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_TIM_Base_MspInit+0x68>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40010400 	.word	0x40010400

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <NMI_Handler+0x4>

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f8:	f000 f942 	bl	8002680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <CAN1_RX0_IRQHandler+0x10>)
 8002406:	f000 fd8e 	bl	8002f26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200000d0 	.word	0x200000d0

08002414 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002418:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800241c:	f001 fa80 	bl	8003920 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002420:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002424:	f001 fa7c 	bl	8003920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <CAN2_RX0_IRQHandler+0x10>)
 8002432:	f000 fd78 	bl	8002f26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200000f8 	.word	0x200000f8

08002440 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <CAN2_RX1_IRQHandler+0x10>)
 8002446:	f000 fd6e 	bl	8002f26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000f8 	.word	0x200000f8

08002454 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e00a      	b.n	800247c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002466:	f3af 8000 	nop.w
 800246a:	4601      	mov	r1, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60ba      	str	r2, [r7, #8]
 8002472:	b2ca      	uxtb	r2, r1
 8002474:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	dbf0      	blt.n	8002466 <_read+0x12>
	}

return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_close>:
	}
	return len;
}

int _close(int file)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
	return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b6:	605a      	str	r2, [r3, #4]
	return 0;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_isatty>:

int _isatty(int file)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	return 1;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	return 0;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <_sbrk+0x5c>)
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <_sbrk+0x60>)
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <_sbrk+0x64>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_sbrk+0x68>)
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d207      	bcs.n	8002538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002528:	f003 f8ac 	bl	8005684 <__errno>
 800252c:	4603      	mov	r3, r0
 800252e:	220c      	movs	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	e009      	b.n	800254c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <_sbrk+0x64>)
 8002548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20020000 	.word	0x20020000
 8002558:	00000400 	.word	0x00000400
 800255c:	20000530 	.word	0x20000530
 8002560:	20000688 	.word	0x20000688

08002564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <SystemInit+0x20>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <SystemInit+0x20>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800258e:	490e      	ldr	r1, [pc, #56]	; (80025c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a4:	4c0b      	ldr	r4, [pc, #44]	; (80025d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025b2:	f7ff ffd7 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b6:	f003 f86b 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ba:	f7fe fadf 	bl	8000b7c <main>
  bx  lr    
 80025be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80025cc:	08005c38 	.word	0x08005c38
  ldr r2, =_sbss
 80025d0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80025d4:	20000684 	.word	0x20000684

080025d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC_IRQHandler>
	...

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_Init+0x40>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_Init+0x40>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_Init+0x40>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 ff83 	bl	8003510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260a:	2000      	movs	r0, #0
 800260c:	f000 f808 	bl	8002620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002610:	f7ff fd4c 	bl	80020ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00

08002620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_InitTick+0x54>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x58>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002636:	fbb3 f3f1 	udiv	r3, r3, r1
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f000 ff9b 	bl	800357a <HAL_SYSTICK_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00e      	b.n	800266c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d80a      	bhi.n	800266a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002654:	2200      	movs	r2, #0
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f000 ff63 	bl	8003526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <HAL_InitTick+0x5c>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000018 	.word	0x20000018
 8002678:	20000020 	.word	0x20000020
 800267c:	2000001c 	.word	0x2000001c

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000020 	.word	0x20000020
 80026a4:	20000534 	.word	0x20000534

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000534 	.word	0x20000534

080026c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0ed      	b.n	80028ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fd0c 	bl	80020fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f4:	f7ff ffd8 	bl	80026a8 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026fa:	e012      	b.n	8002722 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026fc:	f7ff ffd4 	bl	80026a8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b0a      	cmp	r3, #10
 8002708:	d90b      	bls.n	8002722 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2205      	movs	r2, #5
 800271a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0c5      	b.n	80028ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0e5      	beq.n	80026fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0202 	bic.w	r2, r2, #2
 800273e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002740:	f7ff ffb2 	bl	80026a8 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002746:	e012      	b.n	800276e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002748:	f7ff ffae 	bl	80026a8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b0a      	cmp	r3, #10
 8002754:	d90b      	bls.n	800276e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2205      	movs	r2, #5
 8002766:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e09f      	b.n	80028ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e5      	bne.n	8002748 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e007      	b.n	80027a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7e5b      	ldrb	r3, [r3, #25]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d108      	bne.n	80027c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e007      	b.n	80027d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7e9b      	ldrb	r3, [r3, #26]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d108      	bne.n	80027ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e007      	b.n	80027fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0220 	bic.w	r2, r2, #32
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7edb      	ldrb	r3, [r3, #27]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d108      	bne.n	8002814 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0210 	bic.w	r2, r2, #16
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e007      	b.n	8002824 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0210 	orr.w	r2, r2, #16
 8002822:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7f1b      	ldrb	r3, [r3, #28]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d108      	bne.n	800283e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e007      	b.n	800284e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0208 	bic.w	r2, r2, #8
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7f5b      	ldrb	r3, [r3, #29]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d108      	bne.n	8002868 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0204 	orr.w	r2, r2, #4
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e007      	b.n	8002878 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0204 	bic.w	r2, r2, #4
 8002876:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <HAL_CAN_ConfigFilter+0x26>
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f040 80be 	bne.w	8002a5a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80028de:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_CAN_ConfigFilter+0x1bc>)
 80028e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	431a      	orrs	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2201      	movs	r2, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	401a      	ands	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d123      	bne.n	8002988 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002962:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3248      	adds	r2, #72	; 0x48
 8002968:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800297c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	3348      	adds	r3, #72	; 0x48
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d122      	bne.n	80029d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3248      	adds	r2, #72	; 0x48
 80029b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	3348      	adds	r3, #72	; 0x48
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	401a      	ands	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029f0:	e007      	b.n	8002a02 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	401a      	ands	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a1c:	e007      	b.n	8002a2e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a4c:	f023 0201 	bic.w	r2, r3, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e006      	b.n	8002a68 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40006400 	.word	0x40006400

08002a78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d12e      	bne.n	8002aea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa4:	f7ff fe00 	bl	80026a8 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002aaa:	e012      	b.n	8002ad2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aac:	f7ff fdfc 	bl	80026a8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b0a      	cmp	r3, #10
 8002ab8:	d90b      	bls.n	8002ad2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e012      	b.n	8002af8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e5      	bne.n	8002aac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e006      	b.n	8002af8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b1e:	7ffb      	ldrb	r3, [r7, #31]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d003      	beq.n	8002b2c <HAL_CAN_AddTxMessage+0x2c>
 8002b24:	7ffb      	ldrb	r3, [r7, #31]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	f040 80b8 	bne.w	8002c9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80a0 	beq.w	8002c8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	0e1b      	lsrs	r3, r3, #24
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d907      	bls.n	8002b6c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e09e      	b.n	8002caa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	409a      	lsls	r2, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10d      	bne.n	8002b9a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b88:	68f9      	ldr	r1, [r7, #12]
 8002b8a:	6809      	ldr	r1, [r1, #0]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3318      	adds	r3, #24
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	440b      	add	r3, r1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e00f      	b.n	8002bba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002baa:	68f9      	ldr	r1, [r7, #12]
 8002bac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3318      	adds	r3, #24
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	440b      	add	r3, r1
 8002bb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3318      	adds	r3, #24
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	440b      	add	r3, r1
 8002bca:	3304      	adds	r3, #4
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	7d1b      	ldrb	r3, [r3, #20]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d111      	bne.n	8002bfa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3318      	adds	r3, #24
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	6811      	ldr	r1, [r2, #0]
 8002bea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3318      	adds	r3, #24
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3307      	adds	r3, #7
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	061a      	lsls	r2, r3, #24
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3306      	adds	r3, #6
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3305      	adds	r3, #5
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	4313      	orrs	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	3204      	adds	r2, #4
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	ea43 0200 	orr.w	r2, r3, r0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3303      	adds	r3, #3
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	061a      	lsls	r2, r3, #24
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3301      	adds	r3, #1
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	4610      	mov	r0, r2
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	6811      	ldr	r1, [r2, #0]
 8002c58:	ea43 0200 	orr.w	r2, r3, r0
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	440b      	add	r3, r1
 8002c62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3318      	adds	r3, #24
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	6811      	ldr	r1, [r2, #0]
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3318      	adds	r3, #24
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	440b      	add	r3, r1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e00e      	b.n	8002caa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e006      	b.n	8002caa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d003      	beq.n	8002cda <HAL_CAN_GetRxMessage+0x24>
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	f040 80f3 	bne.w	8002ec0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10e      	bne.n	8002cfe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d116      	bne.n	8002d1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0e7      	b.n	8002ece <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0d8      	b.n	8002ece <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	331b      	adds	r3, #27
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4413      	add	r3, r2
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0204 	and.w	r2, r3, #4
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	331b      	adds	r3, #27
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0d5b      	lsrs	r3, r3, #21
 8002d4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	4413      	add	r3, r2
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	331b      	adds	r3, #27
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4413      	add	r3, r2
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0202 	and.w	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	331b      	adds	r3, #27
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 020f 	and.w	r2, r3, #15
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	331b      	adds	r3, #27
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	331b      	adds	r3, #27
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0a1a      	lsrs	r2, r3, #8
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0c1a      	lsrs	r2, r3, #16
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3302      	adds	r3, #2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e1a      	lsrs	r2, r3, #24
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3303      	adds	r3, #3
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3304      	adds	r3, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0a1a      	lsrs	r2, r3, #8
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	3305      	adds	r3, #5
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0c1a      	lsrs	r2, r3, #16
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	3306      	adds	r3, #6
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e1a      	lsrs	r2, r3, #24
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	3307      	adds	r3, #7
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d108      	bne.n	8002eac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0220 	orr.w	r2, r2, #32
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	e007      	b.n	8002ebc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e006      	b.n	8002ece <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <HAL_CAN_ActivateNotification+0x1e>
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d109      	bne.n	8002f0c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6959      	ldr	r1, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e006      	b.n	8002f1a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b08a      	sub	sp, #40	; 0x28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d07c      	beq.n	8003066 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d023      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f983 	bl	8003294 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f8e:	e016      	b.n	8002fbe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa2:	e00c      	b.n	8002fbe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb6:	e002      	b.n	8002fbe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f989 	bl	80032d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d024      	beq.n	8003012 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f963 	bl	80032a8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fe2:	e016      	b.n	8003012 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff6:	e00c      	b.n	8003012 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
 800300a:	e002      	b.n	8003012 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f969 	bl	80032e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d024      	beq.n	8003066 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003024:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f943 	bl	80032bc <HAL_CAN_TxMailbox2CompleteCallback>
 8003036:	e016      	b.n	8003066 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
 800304a:	e00c      	b.n	8003066 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	e002      	b.n	8003066 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f949 	bl	80032f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003080:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2210      	movs	r2, #16
 8003088:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2208      	movs	r2, #8
 80030a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f930 	bl	800330c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fd fd21 	bl	8000b0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00c      	beq.n	80030ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2210      	movs	r2, #16
 80030ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2208      	movs	r2, #8
 8003108:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f908 	bl	8003320 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fd0b 	bl	8000b44 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2210      	movs	r2, #16
 8003148:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8f2 	bl	8003334 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f8eb 	bl	8003348 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d07b      	beq.n	8003274 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d072      	beq.n	800326c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d043      	beq.n	800326c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03e      	beq.n	800326c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031f4:	2b60      	cmp	r3, #96	; 0x60
 80031f6:	d02b      	beq.n	8003250 <HAL_CAN_IRQHandler+0x32a>
 80031f8:	2b60      	cmp	r3, #96	; 0x60
 80031fa:	d82e      	bhi.n	800325a <HAL_CAN_IRQHandler+0x334>
 80031fc:	2b50      	cmp	r3, #80	; 0x50
 80031fe:	d022      	beq.n	8003246 <HAL_CAN_IRQHandler+0x320>
 8003200:	2b50      	cmp	r3, #80	; 0x50
 8003202:	d82a      	bhi.n	800325a <HAL_CAN_IRQHandler+0x334>
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d019      	beq.n	800323c <HAL_CAN_IRQHandler+0x316>
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d826      	bhi.n	800325a <HAL_CAN_IRQHandler+0x334>
 800320c:	2b30      	cmp	r3, #48	; 0x30
 800320e:	d010      	beq.n	8003232 <HAL_CAN_IRQHandler+0x30c>
 8003210:	2b30      	cmp	r3, #48	; 0x30
 8003212:	d822      	bhi.n	800325a <HAL_CAN_IRQHandler+0x334>
 8003214:	2b10      	cmp	r3, #16
 8003216:	d002      	beq.n	800321e <HAL_CAN_IRQHandler+0x2f8>
 8003218:	2b20      	cmp	r3, #32
 800321a:	d005      	beq.n	8003228 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800321c:	e01d      	b.n	800325a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f043 0308 	orr.w	r3, r3, #8
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003226:	e019      	b.n	800325c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	f043 0310 	orr.w	r3, r3, #16
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003230:	e014      	b.n	800325c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	f043 0320 	orr.w	r3, r3, #32
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800323a:	e00f      	b.n	800325c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003244:	e00a      	b.n	800325c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800324e:	e005      	b.n	800325c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003258:	e000      	b.n	800325c <HAL_CAN_IRQHandler+0x336>
            break;
 800325a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800326a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2204      	movs	r2, #4
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f868 	bl	800335c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <__NVIC_SetPriorityGrouping>:
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_GetPriorityGrouping>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <__NVIC_GetPriorityGrouping+0x18>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0307 	and.w	r3, r3, #7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_EnableIRQ>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db0b      	blt.n	80033fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4907      	ldr	r1, [pc, #28]	; (800340c <__NVIC_EnableIRQ+0x38>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2001      	movs	r0, #1
 80033f6:	fa00 f202 	lsl.w	r2, r0, r2
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db0a      	blt.n	800343a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	490c      	ldr	r1, [pc, #48]	; (800345c <__NVIC_SetPriority+0x4c>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	440b      	add	r3, r1
 8003434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003438:	e00a      	b.n	8003450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4908      	ldr	r1, [pc, #32]	; (8003460 <__NVIC_SetPriority+0x50>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3b04      	subs	r3, #4
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	440b      	add	r3, r1
 800344e:	761a      	strb	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000e100 	.word	0xe000e100
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <NVIC_EncodePriority>:
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf28      	it	cs
 8003482:	2304      	movcs	r3, #4
 8003484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3304      	adds	r3, #4
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <NVIC_EncodePriority+0x30>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3b03      	subs	r3, #3
 8003492:	e000      	b.n	8003496 <NVIC_EncodePriority+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	401a      	ands	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	4313      	orrs	r3, r2
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <SysTick_Config>:
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034dc:	d301      	bcc.n	80034e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034de:	2301      	movs	r3, #1
 80034e0:	e00f      	b.n	8003502 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <SysTick_Config+0x40>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ea:	210f      	movs	r1, #15
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f7ff ff8e 	bl	8003410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <SysTick_Config+0x40>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <SysTick_Config+0x40>)
 80034fc:	2207      	movs	r2, #7
 80034fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000e010 	.word	0xe000e010

08003510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff29 	bl	8003370 <__NVIC_SetPriorityGrouping>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003538:	f7ff ff3e 	bl	80033b8 <__NVIC_GetPriorityGrouping>
 800353c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f7ff ff8e 	bl	8003464 <NVIC_EncodePriority>
 8003548:	4602      	mov	r2, r0
 800354a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff5d 	bl	8003410 <__NVIC_SetPriority>
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff31 	bl	80033d4 <__NVIC_EnableIRQ>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ffa2 	bl	80034cc <SysTick_Config>
 8003588:	4603      	mov	r3, r0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e165      	b.n	800387c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	f040 8154 	bne.w	8003876 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d130      	bne.n	8003648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 0201 	and.w	r2, r3, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d017      	beq.n	8003684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d123      	bne.n	80036d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	08da      	lsrs	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3208      	adds	r2, #8
 8003698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80ae 	beq.w	8003876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_GPIO_Init+0x300>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a5c      	ldr	r2, [pc, #368]	; (8003894 <HAL_GPIO_Init+0x300>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <HAL_GPIO_Init+0x300>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003736:	4a58      	ldr	r2, [pc, #352]	; (8003898 <HAL_GPIO_Init+0x304>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4f      	ldr	r2, [pc, #316]	; (800389c <HAL_GPIO_Init+0x308>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <HAL_GPIO_Init+0x21a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4e      	ldr	r2, [pc, #312]	; (80038a0 <HAL_GPIO_Init+0x30c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x216>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4d      	ldr	r2, [pc, #308]	; (80038a4 <HAL_GPIO_Init+0x310>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_GPIO_Init+0x212>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4c      	ldr	r2, [pc, #304]	; (80038a8 <HAL_GPIO_Init+0x314>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x20e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4b      	ldr	r2, [pc, #300]	; (80038ac <HAL_GPIO_Init+0x318>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00d      	beq.n	800379e <HAL_GPIO_Init+0x20a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <HAL_GPIO_Init+0x31c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x206>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_GPIO_Init+0x320>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_GPIO_Init+0x202>
 8003792:	2306      	movs	r3, #6
 8003794:	e00c      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 8003796:	2307      	movs	r3, #7
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 800379a:	2305      	movs	r3, #5
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 800379e:	2304      	movs	r3, #4
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x21c>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	; (8003898 <HAL_GPIO_Init+0x304>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_GPIO_Init+0x324>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_GPIO_Init+0x324>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_GPIO_Init+0x324>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_GPIO_Init+0x324>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_GPIO_Init+0x324>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_GPIO_Init+0x324>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <HAL_GPIO_Init+0x324>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <HAL_GPIO_Init+0x324>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f ae96 	bls.w	80035b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40013c00 	.word	0x40013c00

080038bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e001      	b.n	80038de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
 80038f8:	4613      	mov	r3, r2
 80038fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003908:	e003      	b.n	8003912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	041a      	lsls	r2, r3, #16
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	619a      	str	r2, [r3, #24]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003936:	4a05      	ldr	r2, [pc, #20]	; (800394c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f806 	bl	8003950 <HAL_GPIO_EXTI_Callback>
  }
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40013c00 	.word	0x40013c00

08003950 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_PWREx_EnableOverDrive+0x94>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003994:	f7fe fe88 	bl	80026a8 <HAL_GetTick>
 8003998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800399a:	e009      	b.n	80039b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800399c:	f7fe fe84 	bl	80026a8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039aa:	d901      	bls.n	80039b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e01f      	b.n	80039f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d1ee      	bne.n	800399c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c4:	f7fe fe70 	bl	80026a8 <HAL_GetTick>
 80039c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ca:	e009      	b.n	80039e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039cc:	f7fe fe6c 	bl	80026a8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039da:	d901      	bls.n	80039e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e007      	b.n	80039f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_PWREx_EnableOverDrive+0x98>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ec:	d1ee      	bne.n	80039cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	420e0040 	.word	0x420e0040
 8003a00:	40007000 	.word	0x40007000
 8003a04:	420e0044 	.word	0x420e0044

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fe fdd6 	bl	80026a8 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fe fdd2 	bl	80026a8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fd36 	bl	8002620 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08005c18 	.word	0x08005c18
 8003bcc:	20000018 	.word	0x20000018
 8003bd0:	2000001c 	.word	0x2000001c

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b0ae      	sub	sp, #184	; 0xb8
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bfa:	4bcb      	ldr	r3, [pc, #812]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	f200 8206 	bhi.w	8004014 <HAL_RCC_GetSysClockFreq+0x440>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08004015 	.word	0x08004015
 8003c18:	08004015 	.word	0x08004015
 8003c1c:	08004015 	.word	0x08004015
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08004015 	.word	0x08004015
 8003c28:	08004015 	.word	0x08004015
 8003c2c:	08004015 	.word	0x08004015
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08004015 	.word	0x08004015
 8003c38:	08004015 	.word	0x08004015
 8003c3c:	08004015 	.word	0x08004015
 8003c40:	08003e45 	.word	0x08003e45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4bb9      	ldr	r3, [pc, #740]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x358>)
 8003c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c4a:	e1e7      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c4c:	4bb8      	ldr	r3, [pc, #736]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c52:	e1e3      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c54:	4bb4      	ldr	r3, [pc, #720]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c60:	4bb1      	ldr	r3, [pc, #708]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d071      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6c:	4bae      	ldr	r3, [pc, #696]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c78:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c92:	4622      	mov	r2, r4
 8003c94:	462b      	mov	r3, r5
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4621      	mov	r1, r4
 8003cac:	1a51      	subs	r1, r2, r1
 8003cae:	6439      	str	r1, [r7, #64]	; 0x40
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	018b      	lsls	r3, r1, #6
 8003cc8:	4641      	mov	r1, r8
 8003cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cce:	4641      	mov	r1, r8
 8003cd0:	018a      	lsls	r2, r1, #6
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	1a51      	subs	r1, r2, r1
 8003cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cd8:	4649      	mov	r1, r9
 8003cda:	eb63 0301 	sbc.w	r3, r3, r1
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003cec:	4649      	mov	r1, r9
 8003cee:	00cb      	lsls	r3, r1, #3
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	00ca      	lsls	r2, r1, #3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4622      	mov	r2, r4
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
 8003d06:	462b      	mov	r3, r5
 8003d08:	460a      	mov	r2, r1
 8003d0a:	eb42 0303 	adc.w	r3, r2, r3
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	024b      	lsls	r3, r1, #9
 8003d20:	4621      	mov	r1, r4
 8003d22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d26:	4621      	mov	r1, r4
 8003d28:	024a      	lsls	r2, r1, #9
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d40:	f7fc fa60 	bl	8000204 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d4e:	e067      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d50:	4b75      	ldr	r3, [pc, #468]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	0159      	lsls	r1, r3, #5
 8003d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d84:	0150      	lsls	r0, r2, #5
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	1a51      	subs	r1, r2, r1
 8003d8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d90:	4629      	mov	r1, r5
 8003d92:	eb63 0301 	sbc.w	r3, r3, r1
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003da4:	4649      	mov	r1, r9
 8003da6:	018b      	lsls	r3, r1, #6
 8003da8:	4641      	mov	r1, r8
 8003daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dae:	4641      	mov	r1, r8
 8003db0:	018a      	lsls	r2, r1, #6
 8003db2:	4641      	mov	r1, r8
 8003db4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003db8:	4649      	mov	r1, r9
 8003dba:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd2:	4692      	mov	sl, r2
 8003dd4:	469b      	mov	fp, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	eb1a 0303 	adds.w	r3, sl, r3
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	462b      	mov	r3, r5
 8003de0:	eb4b 0303 	adc.w	r3, fp, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003df2:	4629      	mov	r1, r5
 8003df4:	028b      	lsls	r3, r1, #10
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	028a      	lsls	r2, r1, #10
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e08:	2200      	movs	r2, #0
 8003e0a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e0c:	677a      	str	r2, [r7, #116]	; 0x74
 8003e0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e12:	f7fc f9f7 	bl	8000204 <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e42:	e0eb      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e44:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e50:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d06b      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5c:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	2200      	movs	r2, #0
 8003e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e70:	2300      	movs	r3, #0
 8003e72:	667b      	str	r3, [r7, #100]	; 0x64
 8003e74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e78:	4622      	mov	r2, r4
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	0159      	lsls	r1, r3, #5
 8003e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8a:	0150      	lsls	r0, r2, #5
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4621      	mov	r1, r4
 8003e92:	1a51      	subs	r1, r2, r1
 8003e94:	61b9      	str	r1, [r7, #24]
 8003e96:	4629      	mov	r1, r5
 8003e98:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003eaa:	4659      	mov	r1, fp
 8003eac:	018b      	lsls	r3, r1, #6
 8003eae:	4651      	mov	r1, sl
 8003eb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	018a      	lsls	r2, r1, #6
 8003eb8:	4651      	mov	r1, sl
 8003eba:	ebb2 0801 	subs.w	r8, r2, r1
 8003ebe:	4659      	mov	r1, fp
 8003ec0:	eb63 0901 	sbc.w	r9, r3, r1
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed8:	4690      	mov	r8, r2
 8003eda:	4699      	mov	r9, r3
 8003edc:	4623      	mov	r3, r4
 8003ede:	eb18 0303 	adds.w	r3, r8, r3
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	eb49 0303 	adc.w	r3, r9, r3
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ef8:	4629      	mov	r1, r5
 8003efa:	024b      	lsls	r3, r1, #9
 8003efc:	4621      	mov	r1, r4
 8003efe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f02:	4621      	mov	r1, r4
 8003f04:	024a      	lsls	r2, r1, #9
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f0e:	2200      	movs	r2, #0
 8003f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f18:	f7fc f974 	bl	8000204 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f26:	e065      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x420>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	00f42400 	.word	0x00f42400
 8003f30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f34:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_GetSysClockFreq+0x458>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	4611      	mov	r1, r2
 8003f40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
 8003f46:	2300      	movs	r3, #0
 8003f48:	657b      	str	r3, [r7, #84]	; 0x54
 8003f4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	0159      	lsls	r1, r3, #5
 8003f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f60:	0150      	lsls	r0, r2, #5
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4641      	mov	r1, r8
 8003f68:	1a51      	subs	r1, r2, r1
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f80:	4659      	mov	r1, fp
 8003f82:	018b      	lsls	r3, r1, #6
 8003f84:	4651      	mov	r1, sl
 8003f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	018a      	lsls	r2, r1, #6
 8003f8e:	4651      	mov	r1, sl
 8003f90:	1a54      	subs	r4, r2, r1
 8003f92:	4659      	mov	r1, fp
 8003f94:	eb63 0501 	sbc.w	r5, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	00eb      	lsls	r3, r5, #3
 8003fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa6:	00e2      	lsls	r2, r4, #3
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	18e3      	adds	r3, r4, r3
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	eb45 0303 	adc.w	r3, r5, r3
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	028b      	lsls	r3, r1, #10
 8003fca:	4621      	mov	r1, r4
 8003fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	028a      	lsls	r2, r1, #10
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fdc:	2200      	movs	r2, #0
 8003fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fe2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fe6:	f7fc f90d 	bl	8000204 <__aeabi_uldivmod>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4613      	mov	r3, r2
 8003ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_GetSysClockFreq+0x458>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0f1b      	lsrs	r3, r3, #28
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004012:	e003      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800401a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004020:	4618      	mov	r0, r3
 8004022:	37b8      	adds	r7, #184	; 0xb8
 8004024:	46bd      	mov	sp, r7
 8004026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	00f42400 	.word	0x00f42400

08004034 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e28d      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8083 	beq.w	800415a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004054:	4b94      	ldr	r3, [pc, #592]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b04      	cmp	r3, #4
 800405e:	d019      	beq.n	8004094 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004060:	4b91      	ldr	r3, [pc, #580]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004068:	2b08      	cmp	r3, #8
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800406c:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004078:	d00c      	beq.n	8004094 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4b8b      	ldr	r3, [pc, #556]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d112      	bne.n	80040ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004092:	d10b      	bne.n	80040ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	4b84      	ldr	r3, [pc, #528]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05b      	beq.n	8004158 <HAL_RCC_OscConfig+0x124>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d157      	bne.n	8004158 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e25a      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x90>
 80040b6:	4b7c      	ldr	r3, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7b      	ldr	r2, [pc, #492]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <HAL_RCC_OscConfig+0xcc>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0xb4>
 80040ce:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a75      	ldr	r2, [pc, #468]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b73      	ldr	r3, [pc, #460]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a72      	ldr	r2, [pc, #456]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0xcc>
 80040e8:	4b6f      	ldr	r3, [pc, #444]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a6e      	ldr	r2, [pc, #440]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6b      	ldr	r2, [pc, #428]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe face 	bl	80026a8 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe faca 	bl	80026a8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e21f      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0xdc>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe faba 	bl	80026a8 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004138:	f7fe fab6 	bl	80026a8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e20b      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	4b57      	ldr	r3, [pc, #348]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x104>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d06f      	beq.n	8004246 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004166:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	d017      	beq.n	80041a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004172:	4b4d      	ldr	r3, [pc, #308]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800417a:	2b08      	cmp	r3, #8
 800417c:	d105      	bne.n	800418a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004192:	2b0c      	cmp	r3, #12
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004196:	4b44      	ldr	r3, [pc, #272]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x186>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1d3      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b3b      	ldr	r3, [pc, #236]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4937      	ldr	r1, [pc, #220]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	e03a      	b.n	8004246 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_OscConfig+0x278>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fe fa63 	bl	80026a8 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fe fa5f 	bl	80026a8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1b4      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4925      	ldr	r1, [pc, #148]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421a:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_OscConfig+0x278>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe fa42 	bl	80026a8 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004228:	f7fe fa3e 	bl	80026a8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e193      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d036      	beq.n	80042c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <HAL_RCC_OscConfig+0x27c>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fe fa22 	bl	80026a8 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004268:	f7fe fa1e 	bl	80026a8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e173      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_OscConfig+0x274>)
 800427c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x234>
 8004286:	e01b      	b.n	80042c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_OscConfig+0x27c>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fe fa0b 	bl	80026a8 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	e00e      	b.n	80042b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004296:	f7fe fa07 	bl	80026a8 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d907      	bls.n	80042b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e15c      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470000 	.word	0x42470000
 80042b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b4:	4b8a      	ldr	r3, [pc, #552]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80042b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1ea      	bne.n	8004296 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8097 	beq.w	80043fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d2:	4b83      	ldr	r3, [pc, #524]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	4b7f      	ldr	r3, [pc, #508]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	4a7e      	ldr	r2, [pc, #504]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6413      	str	r3, [r2, #64]	; 0x40
 80042ee:	4b7c      	ldr	r3, [pc, #496]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b79      	ldr	r3, [pc, #484]	; (80044e4 <HAL_RCC_OscConfig+0x4b0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d118      	bne.n	800433c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430a:	4b76      	ldr	r3, [pc, #472]	; (80044e4 <HAL_RCC_OscConfig+0x4b0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a75      	ldr	r2, [pc, #468]	; (80044e4 <HAL_RCC_OscConfig+0x4b0>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004316:	f7fe f9c7 	bl	80026a8 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fe f9c3 	bl	80026a8 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e118      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b6c      	ldr	r3, [pc, #432]	; (80044e4 <HAL_RCC_OscConfig+0x4b0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x31e>
 8004344:	4b66      	ldr	r3, [pc, #408]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a65      	ldr	r2, [pc, #404]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	e01c      	b.n	800438c <HAL_RCC_OscConfig+0x358>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b05      	cmp	r3, #5
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x340>
 800435a:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a60      	ldr	r2, [pc, #384]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004360:	f043 0304 	orr.w	r3, r3, #4
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	4b5e      	ldr	r3, [pc, #376]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a5d      	ldr	r2, [pc, #372]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0x358>
 8004374:	4b5a      	ldr	r3, [pc, #360]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a59      	ldr	r2, [pc, #356]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004386:	f023 0304 	bic.w	r3, r3, #4
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fe f988 	bl	80026a8 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fe f984 	bl	80026a8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0d7      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ee      	beq.n	800439c <HAL_RCC_OscConfig+0x368>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fe f972 	bl	80026a8 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c6:	e00a      	b.n	80043de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fe f96e 	bl	80026a8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0c1      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	4b40      	ldr	r3, [pc, #256]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ee      	bne.n	80043c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80ad 	beq.w	8004560 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b08      	cmp	r3, #8
 8004410:	d060      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d145      	bne.n	80044a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <HAL_RCC_OscConfig+0x4b4>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe f942 	bl	80026a8 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004428:	f7fe f93e 	bl	80026a8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e093      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	019b      	lsls	r3, r3, #6
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	3b01      	subs	r3, #1
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	491b      	ldr	r1, [pc, #108]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCC_OscConfig+0x4b4>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fe f913 	bl	80026a8 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004486:	f7fe f90f 	bl	80026a8 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e064      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x452>
 80044a4:	e05c      	b.n	8004560 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <HAL_RCC_OscConfig+0x4b4>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe f8fc 	bl	80026a8 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe f8f8 	bl	80026a8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e04d      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x480>
 80044d2:	e045      	b.n	8004560 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e040      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044ec:	4b1f      	ldr	r3, [pc, #124]	; (800456c <HAL_RCC_OscConfig+0x538>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d030      	beq.n	800455c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d129      	bne.n	800455c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d122      	bne.n	800455c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004524:	4293      	cmp	r3, r2
 8004526:	d119      	bne.n	800455c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	3b01      	subs	r3, #1
 8004536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d10f      	bne.n	800455c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e07b      	b.n	800467a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004592:	d009      	beq.n	80045a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
 800459a:	e005      	b.n	80045a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fe52 	bl	800226c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	ea42 0103 	orr.w	r1, r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0104 	and.w	r1, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0210 	and.w	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b08c      	sub	sp, #48	; 0x30
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004690:	2301      	movs	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x26>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e18a      	b.n	80049be <HAL_SPI_TransmitReceive+0x33c>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b0:	f7fd fffa 	bl	80026a8 <HAL_GetTick>
 80046b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046c6:	887b      	ldrh	r3, [r7, #2]
 80046c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d00f      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x70>
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d8:	d107      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x68>
 80046e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d003      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
 80046ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046f0:	e15b      	b.n	80049aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_SPI_TransmitReceive+0x82>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_TransmitReceive+0x82>
 80046fe:	887b      	ldrh	r3, [r7, #2]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800470a:	e14e      	b.n	80049aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b04      	cmp	r3, #4
 8004716:	d003      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2205      	movs	r2, #5
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	887a      	ldrh	r2, [r7, #2]
 8004730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	887a      	ldrh	r2, [r7, #2]
 8004736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	887a      	ldrh	r2, [r7, #2]
 8004742:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	887a      	ldrh	r2, [r7, #2]
 8004748:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d007      	beq.n	8004774 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d178      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SPI_TransmitReceive+0x10a>
 8004786:	8b7b      	ldrh	r3, [r7, #26]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d166      	bne.n	800485a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	881a      	ldrh	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	1c9a      	adds	r2, r3, #2
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b0:	e053      	b.n	800485a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d11b      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0x176>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_SPI_TransmitReceive+0x176>
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d113      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	881a      	ldrh	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	1c9a      	adds	r2, r3, #2
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d119      	bne.n	800483a <HAL_SPI_TransmitReceive+0x1b8>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d014      	beq.n	800483a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	b292      	uxth	r2, r2
 800481c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	1c9a      	adds	r2, r3, #2
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004836:	2301      	movs	r3, #1
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800483a:	f7fd ff35 	bl	80026a8 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004846:	429a      	cmp	r2, r3
 8004848:	d807      	bhi.n	800485a <HAL_SPI_TransmitReceive+0x1d8>
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d003      	beq.n	800485a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004858:	e0a7      	b.n	80049aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1a6      	bne.n	80047b2 <HAL_SPI_TransmitReceive+0x130>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1a1      	bne.n	80047b2 <HAL_SPI_TransmitReceive+0x130>
 800486e:	e07c      	b.n	800496a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_SPI_TransmitReceive+0x1fc>
 8004878:	8b7b      	ldrh	r3, [r7, #26]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d16b      	bne.n	8004956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a4:	e057      	b.n	8004956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d11c      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x26c>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d017      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x26c>
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d114      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d119      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x2ae>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d014      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800492c:	2301      	movs	r3, #1
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004930:	f7fd feba 	bl	80026a8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800493c:	429a      	cmp	r2, r3
 800493e:	d803      	bhi.n	8004948 <HAL_SPI_TransmitReceive+0x2c6>
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d102      	bne.n	800494e <HAL_SPI_TransmitReceive+0x2cc>
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004954:	e029      	b.n	80049aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1a2      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x224>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d19d      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8cc 	bl	8004b0c <SPI_EndRxTxTransaction>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d006      	beq.n	8004988 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004986:	e010      	b.n	80049aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	e000      	b.n	80049aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3730      	adds	r7, #48	; 0x30
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d4:	b2db      	uxtb	r3, r3
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a0c:	f7fd fe4c 	bl	80026a8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a1c:	f7fd fe44 	bl	80026a8 <HAL_GetTick>
 8004a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a22:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	015b      	lsls	r3, r3, #5
 8004a28:	0d1b      	lsrs	r3, r3, #20
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a32:	e054      	b.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d050      	beq.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a3c:	f7fd fe34 	bl	80026a8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d902      	bls.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d13d      	bne.n	8004ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6a:	d111      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	d004      	beq.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d107      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d10f      	bne.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e017      	b.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d19b      	bne.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000018 	.word	0x20000018

08004b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <SPI_EndRxTxTransaction+0x7c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <SPI_EndRxTxTransaction+0x80>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	0d5b      	lsrs	r3, r3, #21
 8004b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b36:	d112      	bne.n	8004b5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ff5a 	bl	80049fc <SPI_WaitFlagStateUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e00f      	b.n	8004b7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d0f2      	beq.n	8004b5e <SPI_EndRxTxTransaction+0x52>
 8004b78:	e000      	b.n	8004b7c <SPI_EndRxTxTransaction+0x70>
        break;
 8004b7a:	bf00      	nop
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000018 	.word	0x20000018
 8004b8c:	165e9f81 	.word	0x165e9f81

08004b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e041      	b.n	8004c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fbc0 	bl	800233c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 f95e 	bl	8004e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e046      	b.n	8004cd6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_TIM_Base_Start+0xb4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d022      	beq.n	8004ca0 <HAL_TIM_Base_Start+0x70>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d01d      	beq.n	8004ca0 <HAL_TIM_Base_Start+0x70>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <HAL_TIM_Base_Start+0xb8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d018      	beq.n	8004ca0 <HAL_TIM_Base_Start+0x70>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <HAL_TIM_Base_Start+0xbc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <HAL_TIM_Base_Start+0x70>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <HAL_TIM_Base_Start+0xc0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <HAL_TIM_Base_Start+0x70>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1b      	ldr	r2, [pc, #108]	; (8004cf4 <HAL_TIM_Base_Start+0xc4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_TIM_Base_Start+0x70>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <HAL_TIM_Base_Start+0xc8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <HAL_TIM_Base_Start+0x70>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_TIM_Base_Start+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d111      	bne.n	8004cc4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d010      	beq.n	8004cd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	e007      	b.n	8004cd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40010400 	.word	0x40010400
 8004cf8:	40014000 	.word	0x40014000
 8004cfc:	40001800 	.word	0x40001800

08004d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0b4      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x186>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d54:	d03e      	beq.n	8004dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5a:	f200 8087 	bhi.w	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_TIM_ConfigClockSource+0x172>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d87f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d01a      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xa6>
 8004d70:	2b70      	cmp	r3, #112	; 0x70
 8004d72:	d87b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d050      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x11a>
 8004d78:	2b60      	cmp	r3, #96	; 0x60
 8004d7a:	d877      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d03c      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0xfa>
 8004d80:	2b50      	cmp	r3, #80	; 0x50
 8004d82:	d873      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d058      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x13a>
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d86f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d064      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d867      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d05c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d05a      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	e062      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f000 f985 	bl	80050c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
      break;
 8004dd2:	e04f      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f000 f96e 	bl	80050c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 f8e2 	bl	8004fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	; 0x50
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f93b 	bl	800508e <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 f901 	bl	800502e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	; 0x60
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f92b 	bl	800508e <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 f8c2 	bl	8004fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	; 0x40
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f91b 	bl	800508e <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 f912 	bl	800508e <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e003      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a40      	ldr	r2, [pc, #256]	; (8004fa4 <TIM_Base_SetConfig+0x114>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d00f      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3d      	ldr	r2, [pc, #244]	; (8004fa8 <TIM_Base_SetConfig+0x118>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a3c      	ldr	r2, [pc, #240]	; (8004fac <TIM_Base_SetConfig+0x11c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <TIM_Base_SetConfig+0x120>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a3a      	ldr	r2, [pc, #232]	; (8004fb4 <TIM_Base_SetConfig+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2f      	ldr	r2, [pc, #188]	; (8004fa4 <TIM_Base_SetConfig+0x114>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d02b      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d027      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2c      	ldr	r2, [pc, #176]	; (8004fa8 <TIM_Base_SetConfig+0x118>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d023      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2b      	ldr	r2, [pc, #172]	; (8004fac <TIM_Base_SetConfig+0x11c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01f      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2a      	ldr	r2, [pc, #168]	; (8004fb0 <TIM_Base_SetConfig+0x120>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01b      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a29      	ldr	r2, [pc, #164]	; (8004fb4 <TIM_Base_SetConfig+0x124>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d017      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <TIM_Base_SetConfig+0x128>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <TIM_Base_SetConfig+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00f      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a26      	ldr	r2, [pc, #152]	; (8004fc0 <TIM_Base_SetConfig+0x130>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <TIM_Base_SetConfig+0x134>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <TIM_Base_SetConfig+0x138>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <TIM_Base_SetConfig+0x13c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <TIM_Base_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0xf8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <TIM_Base_SetConfig+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	615a      	str	r2, [r3, #20]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800
 8004fb0:	40000c00 	.word	0x40000c00
 8004fb4:	40010400 	.word	0x40010400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800
 8004fc4:	40001800 	.word	0x40001800
 8004fc8:	40001c00 	.word	0x40001c00
 8004fcc:	40002000 	.word	0x40002000

08004fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 030a 	bic.w	r3, r3, #10
 800500c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800502e:	b480      	push	{r7}
 8005030:	b087      	sub	sp, #28
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0210 	bic.w	r2, r3, #16
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800506a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f043 0307 	orr.w	r3, r3, #7
 80050b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	609a      	str	r2, [r3, #8]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005118:	2302      	movs	r3, #2
 800511a:	e05a      	b.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d01d      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10c      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40010400 	.word	0x40010400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40001800 	.word	0x40001800

080051fc <std>:
 80051fc:	2300      	movs	r3, #0
 80051fe:	b510      	push	{r4, lr}
 8005200:	4604      	mov	r4, r0
 8005202:	e9c0 3300 	strd	r3, r3, [r0]
 8005206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800520a:	6083      	str	r3, [r0, #8]
 800520c:	8181      	strh	r1, [r0, #12]
 800520e:	6643      	str	r3, [r0, #100]	; 0x64
 8005210:	81c2      	strh	r2, [r0, #14]
 8005212:	6183      	str	r3, [r0, #24]
 8005214:	4619      	mov	r1, r3
 8005216:	2208      	movs	r2, #8
 8005218:	305c      	adds	r0, #92	; 0x5c
 800521a:	f000 f9e5 	bl	80055e8 <memset>
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <std+0x58>)
 8005220:	6263      	str	r3, [r4, #36]	; 0x24
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <std+0x5c>)
 8005224:	62a3      	str	r3, [r4, #40]	; 0x28
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <std+0x60>)
 8005228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800522a:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <std+0x64>)
 800522c:	6323      	str	r3, [r4, #48]	; 0x30
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <std+0x68>)
 8005230:	6224      	str	r4, [r4, #32]
 8005232:	429c      	cmp	r4, r3
 8005234:	d006      	beq.n	8005244 <std+0x48>
 8005236:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800523a:	4294      	cmp	r4, r2
 800523c:	d002      	beq.n	8005244 <std+0x48>
 800523e:	33d0      	adds	r3, #208	; 0xd0
 8005240:	429c      	cmp	r4, r3
 8005242:	d105      	bne.n	8005250 <std+0x54>
 8005244:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524c:	f000 ba44 	b.w	80056d8 <__retarget_lock_init_recursive>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	08005439 	.word	0x08005439
 8005258:	0800545b 	.word	0x0800545b
 800525c:	08005493 	.word	0x08005493
 8005260:	080054b7 	.word	0x080054b7
 8005264:	20000538 	.word	0x20000538

08005268 <stdio_exit_handler>:
 8005268:	4a02      	ldr	r2, [pc, #8]	; (8005274 <stdio_exit_handler+0xc>)
 800526a:	4903      	ldr	r1, [pc, #12]	; (8005278 <stdio_exit_handler+0x10>)
 800526c:	4803      	ldr	r0, [pc, #12]	; (800527c <stdio_exit_handler+0x14>)
 800526e:	f000 b869 	b.w	8005344 <_fwalk_sglue>
 8005272:	bf00      	nop
 8005274:	20000024 	.word	0x20000024
 8005278:	080059dd 	.word	0x080059dd
 800527c:	20000030 	.word	0x20000030

08005280 <cleanup_stdio>:
 8005280:	6841      	ldr	r1, [r0, #4]
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <cleanup_stdio+0x34>)
 8005284:	4299      	cmp	r1, r3
 8005286:	b510      	push	{r4, lr}
 8005288:	4604      	mov	r4, r0
 800528a:	d001      	beq.n	8005290 <cleanup_stdio+0x10>
 800528c:	f000 fba6 	bl	80059dc <_fflush_r>
 8005290:	68a1      	ldr	r1, [r4, #8]
 8005292:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <cleanup_stdio+0x38>)
 8005294:	4299      	cmp	r1, r3
 8005296:	d002      	beq.n	800529e <cleanup_stdio+0x1e>
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fb9f 	bl	80059dc <_fflush_r>
 800529e:	68e1      	ldr	r1, [r4, #12]
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <cleanup_stdio+0x3c>)
 80052a2:	4299      	cmp	r1, r3
 80052a4:	d004      	beq.n	80052b0 <cleanup_stdio+0x30>
 80052a6:	4620      	mov	r0, r4
 80052a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ac:	f000 bb96 	b.w	80059dc <_fflush_r>
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	20000538 	.word	0x20000538
 80052b8:	200005a0 	.word	0x200005a0
 80052bc:	20000608 	.word	0x20000608

080052c0 <global_stdio_init.part.0>:
 80052c0:	b510      	push	{r4, lr}
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <global_stdio_init.part.0+0x30>)
 80052c4:	4c0b      	ldr	r4, [pc, #44]	; (80052f4 <global_stdio_init.part.0+0x34>)
 80052c6:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <global_stdio_init.part.0+0x38>)
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	4620      	mov	r0, r4
 80052cc:	2200      	movs	r2, #0
 80052ce:	2104      	movs	r1, #4
 80052d0:	f7ff ff94 	bl	80051fc <std>
 80052d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052d8:	2201      	movs	r2, #1
 80052da:	2109      	movs	r1, #9
 80052dc:	f7ff ff8e 	bl	80051fc <std>
 80052e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052e4:	2202      	movs	r2, #2
 80052e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ea:	2112      	movs	r1, #18
 80052ec:	f7ff bf86 	b.w	80051fc <std>
 80052f0:	20000670 	.word	0x20000670
 80052f4:	20000538 	.word	0x20000538
 80052f8:	08005269 	.word	0x08005269

080052fc <__sfp_lock_acquire>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__sfp_lock_acquire+0x8>)
 80052fe:	f000 b9ec 	b.w	80056da <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	20000679 	.word	0x20000679

08005308 <__sfp_lock_release>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__sfp_lock_release+0x8>)
 800530a:	f000 b9e7 	b.w	80056dc <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	20000679 	.word	0x20000679

08005314 <__sinit>:
 8005314:	b510      	push	{r4, lr}
 8005316:	4604      	mov	r4, r0
 8005318:	f7ff fff0 	bl	80052fc <__sfp_lock_acquire>
 800531c:	6a23      	ldr	r3, [r4, #32]
 800531e:	b11b      	cbz	r3, 8005328 <__sinit+0x14>
 8005320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005324:	f7ff bff0 	b.w	8005308 <__sfp_lock_release>
 8005328:	4b04      	ldr	r3, [pc, #16]	; (800533c <__sinit+0x28>)
 800532a:	6223      	str	r3, [r4, #32]
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <__sinit+0x2c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f5      	bne.n	8005320 <__sinit+0xc>
 8005334:	f7ff ffc4 	bl	80052c0 <global_stdio_init.part.0>
 8005338:	e7f2      	b.n	8005320 <__sinit+0xc>
 800533a:	bf00      	nop
 800533c:	08005281 	.word	0x08005281
 8005340:	20000670 	.word	0x20000670

08005344 <_fwalk_sglue>:
 8005344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005348:	4607      	mov	r7, r0
 800534a:	4688      	mov	r8, r1
 800534c:	4614      	mov	r4, r2
 800534e:	2600      	movs	r6, #0
 8005350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005354:	f1b9 0901 	subs.w	r9, r9, #1
 8005358:	d505      	bpl.n	8005366 <_fwalk_sglue+0x22>
 800535a:	6824      	ldr	r4, [r4, #0]
 800535c:	2c00      	cmp	r4, #0
 800535e:	d1f7      	bne.n	8005350 <_fwalk_sglue+0xc>
 8005360:	4630      	mov	r0, r6
 8005362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005366:	89ab      	ldrh	r3, [r5, #12]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d907      	bls.n	800537c <_fwalk_sglue+0x38>
 800536c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005370:	3301      	adds	r3, #1
 8005372:	d003      	beq.n	800537c <_fwalk_sglue+0x38>
 8005374:	4629      	mov	r1, r5
 8005376:	4638      	mov	r0, r7
 8005378:	47c0      	blx	r8
 800537a:	4306      	orrs	r6, r0
 800537c:	3568      	adds	r5, #104	; 0x68
 800537e:	e7e9      	b.n	8005354 <_fwalk_sglue+0x10>

08005380 <_puts_r>:
 8005380:	6a03      	ldr	r3, [r0, #32]
 8005382:	b570      	push	{r4, r5, r6, lr}
 8005384:	6884      	ldr	r4, [r0, #8]
 8005386:	4605      	mov	r5, r0
 8005388:	460e      	mov	r6, r1
 800538a:	b90b      	cbnz	r3, 8005390 <_puts_r+0x10>
 800538c:	f7ff ffc2 	bl	8005314 <__sinit>
 8005390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005392:	07db      	lsls	r3, r3, #31
 8005394:	d405      	bmi.n	80053a2 <_puts_r+0x22>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	0598      	lsls	r0, r3, #22
 800539a:	d402      	bmi.n	80053a2 <_puts_r+0x22>
 800539c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539e:	f000 f99c 	bl	80056da <__retarget_lock_acquire_recursive>
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	0719      	lsls	r1, r3, #28
 80053a6:	d513      	bpl.n	80053d0 <_puts_r+0x50>
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	b18b      	cbz	r3, 80053d0 <_puts_r+0x50>
 80053ac:	3e01      	subs	r6, #1
 80053ae:	68a3      	ldr	r3, [r4, #8]
 80053b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053b4:	3b01      	subs	r3, #1
 80053b6:	60a3      	str	r3, [r4, #8]
 80053b8:	b9e9      	cbnz	r1, 80053f6 <_puts_r+0x76>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	da2e      	bge.n	800541c <_puts_r+0x9c>
 80053be:	4622      	mov	r2, r4
 80053c0:	210a      	movs	r1, #10
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f87b 	bl	80054be <__swbuf_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d007      	beq.n	80053dc <_puts_r+0x5c>
 80053cc:	250a      	movs	r5, #10
 80053ce:	e007      	b.n	80053e0 <_puts_r+0x60>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4628      	mov	r0, r5
 80053d4:	f000 f8b0 	bl	8005538 <__swsetup_r>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d0e7      	beq.n	80053ac <_puts_r+0x2c>
 80053dc:	f04f 35ff 	mov.w	r5, #4294967295
 80053e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053e2:	07da      	lsls	r2, r3, #31
 80053e4:	d405      	bmi.n	80053f2 <_puts_r+0x72>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	059b      	lsls	r3, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_puts_r+0x72>
 80053ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ee:	f000 f975 	bl	80056dc <__retarget_lock_release_recursive>
 80053f2:	4628      	mov	r0, r5
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da04      	bge.n	8005404 <_puts_r+0x84>
 80053fa:	69a2      	ldr	r2, [r4, #24]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	dc06      	bgt.n	800540e <_puts_r+0x8e>
 8005400:	290a      	cmp	r1, #10
 8005402:	d004      	beq.n	800540e <_puts_r+0x8e>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	6022      	str	r2, [r4, #0]
 800540a:	7019      	strb	r1, [r3, #0]
 800540c:	e7cf      	b.n	80053ae <_puts_r+0x2e>
 800540e:	4622      	mov	r2, r4
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f854 	bl	80054be <__swbuf_r>
 8005416:	3001      	adds	r0, #1
 8005418:	d1c9      	bne.n	80053ae <_puts_r+0x2e>
 800541a:	e7df      	b.n	80053dc <_puts_r+0x5c>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	250a      	movs	r5, #10
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	701d      	strb	r5, [r3, #0]
 8005426:	e7db      	b.n	80053e0 <_puts_r+0x60>

08005428 <puts>:
 8005428:	4b02      	ldr	r3, [pc, #8]	; (8005434 <puts+0xc>)
 800542a:	4601      	mov	r1, r0
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	f7ff bfa7 	b.w	8005380 <_puts_r>
 8005432:	bf00      	nop
 8005434:	2000007c 	.word	0x2000007c

08005438 <__sread>:
 8005438:	b510      	push	{r4, lr}
 800543a:	460c      	mov	r4, r1
 800543c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005440:	f000 f8fc 	bl	800563c <_read_r>
 8005444:	2800      	cmp	r0, #0
 8005446:	bfab      	itete	ge
 8005448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800544a:	89a3      	ldrhlt	r3, [r4, #12]
 800544c:	181b      	addge	r3, r3, r0
 800544e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005452:	bfac      	ite	ge
 8005454:	6563      	strge	r3, [r4, #84]	; 0x54
 8005456:	81a3      	strhlt	r3, [r4, #12]
 8005458:	bd10      	pop	{r4, pc}

0800545a <__swrite>:
 800545a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	461f      	mov	r7, r3
 8005460:	898b      	ldrh	r3, [r1, #12]
 8005462:	05db      	lsls	r3, r3, #23
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	4616      	mov	r6, r2
 800546a:	d505      	bpl.n	8005478 <__swrite+0x1e>
 800546c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005470:	2302      	movs	r3, #2
 8005472:	2200      	movs	r2, #0
 8005474:	f000 f8d0 	bl	8005618 <_lseek_r>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	4632      	mov	r2, r6
 8005486:	463b      	mov	r3, r7
 8005488:	4628      	mov	r0, r5
 800548a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	f000 b8e7 	b.w	8005660 <_write_r>

08005492 <__sseek>:
 8005492:	b510      	push	{r4, lr}
 8005494:	460c      	mov	r4, r1
 8005496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549a:	f000 f8bd 	bl	8005618 <_lseek_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	bf15      	itete	ne
 80054a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80054a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054ae:	81a3      	strheq	r3, [r4, #12]
 80054b0:	bf18      	it	ne
 80054b2:	81a3      	strhne	r3, [r4, #12]
 80054b4:	bd10      	pop	{r4, pc}

080054b6 <__sclose>:
 80054b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ba:	f000 b89d 	b.w	80055f8 <_close_r>

080054be <__swbuf_r>:
 80054be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c0:	460e      	mov	r6, r1
 80054c2:	4614      	mov	r4, r2
 80054c4:	4605      	mov	r5, r0
 80054c6:	b118      	cbz	r0, 80054d0 <__swbuf_r+0x12>
 80054c8:	6a03      	ldr	r3, [r0, #32]
 80054ca:	b90b      	cbnz	r3, 80054d0 <__swbuf_r+0x12>
 80054cc:	f7ff ff22 	bl	8005314 <__sinit>
 80054d0:	69a3      	ldr	r3, [r4, #24]
 80054d2:	60a3      	str	r3, [r4, #8]
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	071a      	lsls	r2, r3, #28
 80054d8:	d525      	bpl.n	8005526 <__swbuf_r+0x68>
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	b31b      	cbz	r3, 8005526 <__swbuf_r+0x68>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	6922      	ldr	r2, [r4, #16]
 80054e2:	1a98      	subs	r0, r3, r2
 80054e4:	6963      	ldr	r3, [r4, #20]
 80054e6:	b2f6      	uxtb	r6, r6
 80054e8:	4283      	cmp	r3, r0
 80054ea:	4637      	mov	r7, r6
 80054ec:	dc04      	bgt.n	80054f8 <__swbuf_r+0x3a>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 fa73 	bl	80059dc <_fflush_r>
 80054f6:	b9e0      	cbnz	r0, 8005532 <__swbuf_r+0x74>
 80054f8:	68a3      	ldr	r3, [r4, #8]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	701e      	strb	r6, [r3, #0]
 8005506:	6962      	ldr	r2, [r4, #20]
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	429a      	cmp	r2, r3
 800550c:	d004      	beq.n	8005518 <__swbuf_r+0x5a>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	07db      	lsls	r3, r3, #31
 8005512:	d506      	bpl.n	8005522 <__swbuf_r+0x64>
 8005514:	2e0a      	cmp	r6, #10
 8005516:	d104      	bne.n	8005522 <__swbuf_r+0x64>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f000 fa5e 	bl	80059dc <_fflush_r>
 8005520:	b938      	cbnz	r0, 8005532 <__swbuf_r+0x74>
 8005522:	4638      	mov	r0, r7
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005526:	4621      	mov	r1, r4
 8005528:	4628      	mov	r0, r5
 800552a:	f000 f805 	bl	8005538 <__swsetup_r>
 800552e:	2800      	cmp	r0, #0
 8005530:	d0d5      	beq.n	80054de <__swbuf_r+0x20>
 8005532:	f04f 37ff 	mov.w	r7, #4294967295
 8005536:	e7f4      	b.n	8005522 <__swbuf_r+0x64>

08005538 <__swsetup_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <__swsetup_r+0xac>)
 800553c:	4605      	mov	r5, r0
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	460c      	mov	r4, r1
 8005542:	b118      	cbz	r0, 800554c <__swsetup_r+0x14>
 8005544:	6a03      	ldr	r3, [r0, #32]
 8005546:	b90b      	cbnz	r3, 800554c <__swsetup_r+0x14>
 8005548:	f7ff fee4 	bl	8005314 <__sinit>
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005552:	0718      	lsls	r0, r3, #28
 8005554:	d422      	bmi.n	800559c <__swsetup_r+0x64>
 8005556:	06d9      	lsls	r1, r3, #27
 8005558:	d407      	bmi.n	800556a <__swsetup_r+0x32>
 800555a:	2309      	movs	r3, #9
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	e034      	b.n	80055d4 <__swsetup_r+0x9c>
 800556a:	0758      	lsls	r0, r3, #29
 800556c:	d512      	bpl.n	8005594 <__swsetup_r+0x5c>
 800556e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005570:	b141      	cbz	r1, 8005584 <__swsetup_r+0x4c>
 8005572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005576:	4299      	cmp	r1, r3
 8005578:	d002      	beq.n	8005580 <__swsetup_r+0x48>
 800557a:	4628      	mov	r0, r5
 800557c:	f000 f8b0 	bl	80056e0 <_free_r>
 8005580:	2300      	movs	r3, #0
 8005582:	6363      	str	r3, [r4, #52]	; 0x34
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	2300      	movs	r3, #0
 800558e:	6063      	str	r3, [r4, #4]
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	6023      	str	r3, [r4, #0]
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f043 0308 	orr.w	r3, r3, #8
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	b94b      	cbnz	r3, 80055b4 <__swsetup_r+0x7c>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055aa:	d003      	beq.n	80055b4 <__swsetup_r+0x7c>
 80055ac:	4621      	mov	r1, r4
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 fa62 	bl	8005a78 <__smakebuf_r>
 80055b4:	89a0      	ldrh	r0, [r4, #12]
 80055b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055ba:	f010 0301 	ands.w	r3, r0, #1
 80055be:	d00a      	beq.n	80055d6 <__swsetup_r+0x9e>
 80055c0:	2300      	movs	r3, #0
 80055c2:	60a3      	str	r3, [r4, #8]
 80055c4:	6963      	ldr	r3, [r4, #20]
 80055c6:	425b      	negs	r3, r3
 80055c8:	61a3      	str	r3, [r4, #24]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	b943      	cbnz	r3, 80055e0 <__swsetup_r+0xa8>
 80055ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055d2:	d1c4      	bne.n	800555e <__swsetup_r+0x26>
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	0781      	lsls	r1, r0, #30
 80055d8:	bf58      	it	pl
 80055da:	6963      	ldrpl	r3, [r4, #20]
 80055dc:	60a3      	str	r3, [r4, #8]
 80055de:	e7f4      	b.n	80055ca <__swsetup_r+0x92>
 80055e0:	2000      	movs	r0, #0
 80055e2:	e7f7      	b.n	80055d4 <__swsetup_r+0x9c>
 80055e4:	2000007c 	.word	0x2000007c

080055e8 <memset>:
 80055e8:	4402      	add	r2, r0
 80055ea:	4603      	mov	r3, r0
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d100      	bne.n	80055f2 <memset+0xa>
 80055f0:	4770      	bx	lr
 80055f2:	f803 1b01 	strb.w	r1, [r3], #1
 80055f6:	e7f9      	b.n	80055ec <memset+0x4>

080055f8 <_close_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d06      	ldr	r5, [pc, #24]	; (8005614 <_close_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fc ff43 	bl	800248e <_close>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_close_r+0x1a>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_close_r+0x1a>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000674 	.word	0x20000674

08005618 <_lseek_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	; (8005638 <_lseek_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fc ff58 	bl	80024dc <_lseek>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_lseek_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_lseek_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20000674 	.word	0x20000674

0800563c <_read_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	; (800565c <_read_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fc ff02 	bl	8002454 <_read>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_read_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_read_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000674 	.word	0x20000674

08005660 <_write_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	; (8005680 <_write_r+0x20>)
 8005664:	4604      	mov	r4, r0
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	2200      	movs	r2, #0
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f7fb fddc 	bl	800122c <_write>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_write_r+0x1e>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_write_r+0x1e>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20000674 	.word	0x20000674

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000007c 	.word	0x2000007c

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4d0d      	ldr	r5, [pc, #52]	; (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	; (80056cc <__libc_init_array+0x3c>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2600      	movs	r6, #0
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4d0b      	ldr	r5, [pc, #44]	; (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	; (80056d4 <__libc_init_array+0x44>)
 80056a4:	f000 faa8 	bl	8005bf8 <_init>
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2600      	movs	r6, #0
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08005c30 	.word	0x08005c30
 80056cc:	08005c30 	.word	0x08005c30
 80056d0:	08005c30 	.word	0x08005c30
 80056d4:	08005c34 	.word	0x08005c34

080056d8 <__retarget_lock_init_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_acquire_recursive>:
 80056da:	4770      	bx	lr

080056dc <__retarget_lock_release_recursive>:
 80056dc:	4770      	bx	lr
	...

080056e0 <_free_r>:
 80056e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056e2:	2900      	cmp	r1, #0
 80056e4:	d044      	beq.n	8005770 <_free_r+0x90>
 80056e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ea:	9001      	str	r0, [sp, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f1a1 0404 	sub.w	r4, r1, #4
 80056f2:	bfb8      	it	lt
 80056f4:	18e4      	addlt	r4, r4, r3
 80056f6:	f000 f8df 	bl	80058b8 <__malloc_lock>
 80056fa:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <_free_r+0x94>)
 80056fc:	9801      	ldr	r0, [sp, #4]
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	b933      	cbnz	r3, 8005710 <_free_r+0x30>
 8005702:	6063      	str	r3, [r4, #4]
 8005704:	6014      	str	r4, [r2, #0]
 8005706:	b003      	add	sp, #12
 8005708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800570c:	f000 b8da 	b.w	80058c4 <__malloc_unlock>
 8005710:	42a3      	cmp	r3, r4
 8005712:	d908      	bls.n	8005726 <_free_r+0x46>
 8005714:	6825      	ldr	r5, [r4, #0]
 8005716:	1961      	adds	r1, r4, r5
 8005718:	428b      	cmp	r3, r1
 800571a:	bf01      	itttt	eq
 800571c:	6819      	ldreq	r1, [r3, #0]
 800571e:	685b      	ldreq	r3, [r3, #4]
 8005720:	1949      	addeq	r1, r1, r5
 8005722:	6021      	streq	r1, [r4, #0]
 8005724:	e7ed      	b.n	8005702 <_free_r+0x22>
 8005726:	461a      	mov	r2, r3
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b10b      	cbz	r3, 8005730 <_free_r+0x50>
 800572c:	42a3      	cmp	r3, r4
 800572e:	d9fa      	bls.n	8005726 <_free_r+0x46>
 8005730:	6811      	ldr	r1, [r2, #0]
 8005732:	1855      	adds	r5, r2, r1
 8005734:	42a5      	cmp	r5, r4
 8005736:	d10b      	bne.n	8005750 <_free_r+0x70>
 8005738:	6824      	ldr	r4, [r4, #0]
 800573a:	4421      	add	r1, r4
 800573c:	1854      	adds	r4, r2, r1
 800573e:	42a3      	cmp	r3, r4
 8005740:	6011      	str	r1, [r2, #0]
 8005742:	d1e0      	bne.n	8005706 <_free_r+0x26>
 8005744:	681c      	ldr	r4, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	6053      	str	r3, [r2, #4]
 800574a:	440c      	add	r4, r1
 800574c:	6014      	str	r4, [r2, #0]
 800574e:	e7da      	b.n	8005706 <_free_r+0x26>
 8005750:	d902      	bls.n	8005758 <_free_r+0x78>
 8005752:	230c      	movs	r3, #12
 8005754:	6003      	str	r3, [r0, #0]
 8005756:	e7d6      	b.n	8005706 <_free_r+0x26>
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	1961      	adds	r1, r4, r5
 800575c:	428b      	cmp	r3, r1
 800575e:	bf04      	itt	eq
 8005760:	6819      	ldreq	r1, [r3, #0]
 8005762:	685b      	ldreq	r3, [r3, #4]
 8005764:	6063      	str	r3, [r4, #4]
 8005766:	bf04      	itt	eq
 8005768:	1949      	addeq	r1, r1, r5
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	6054      	str	r4, [r2, #4]
 800576e:	e7ca      	b.n	8005706 <_free_r+0x26>
 8005770:	b003      	add	sp, #12
 8005772:	bd30      	pop	{r4, r5, pc}
 8005774:	2000067c 	.word	0x2000067c

08005778 <sbrk_aligned>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4e0e      	ldr	r6, [pc, #56]	; (80057b4 <sbrk_aligned+0x3c>)
 800577c:	460c      	mov	r4, r1
 800577e:	6831      	ldr	r1, [r6, #0]
 8005780:	4605      	mov	r5, r0
 8005782:	b911      	cbnz	r1, 800578a <sbrk_aligned+0x12>
 8005784:	f000 f9d6 	bl	8005b34 <_sbrk_r>
 8005788:	6030      	str	r0, [r6, #0]
 800578a:	4621      	mov	r1, r4
 800578c:	4628      	mov	r0, r5
 800578e:	f000 f9d1 	bl	8005b34 <_sbrk_r>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	d00a      	beq.n	80057ac <sbrk_aligned+0x34>
 8005796:	1cc4      	adds	r4, r0, #3
 8005798:	f024 0403 	bic.w	r4, r4, #3
 800579c:	42a0      	cmp	r0, r4
 800579e:	d007      	beq.n	80057b0 <sbrk_aligned+0x38>
 80057a0:	1a21      	subs	r1, r4, r0
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f9c6 	bl	8005b34 <_sbrk_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d101      	bne.n	80057b0 <sbrk_aligned+0x38>
 80057ac:	f04f 34ff 	mov.w	r4, #4294967295
 80057b0:	4620      	mov	r0, r4
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	20000680 	.word	0x20000680

080057b8 <_malloc_r>:
 80057b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	1ccd      	adds	r5, r1, #3
 80057be:	f025 0503 	bic.w	r5, r5, #3
 80057c2:	3508      	adds	r5, #8
 80057c4:	2d0c      	cmp	r5, #12
 80057c6:	bf38      	it	cc
 80057c8:	250c      	movcc	r5, #12
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	4607      	mov	r7, r0
 80057ce:	db01      	blt.n	80057d4 <_malloc_r+0x1c>
 80057d0:	42a9      	cmp	r1, r5
 80057d2:	d905      	bls.n	80057e0 <_malloc_r+0x28>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	2600      	movs	r6, #0
 80057da:	4630      	mov	r0, r6
 80057dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058b4 <_malloc_r+0xfc>
 80057e4:	f000 f868 	bl	80058b8 <__malloc_lock>
 80057e8:	f8d8 3000 	ldr.w	r3, [r8]
 80057ec:	461c      	mov	r4, r3
 80057ee:	bb5c      	cbnz	r4, 8005848 <_malloc_r+0x90>
 80057f0:	4629      	mov	r1, r5
 80057f2:	4638      	mov	r0, r7
 80057f4:	f7ff ffc0 	bl	8005778 <sbrk_aligned>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	4604      	mov	r4, r0
 80057fc:	d155      	bne.n	80058aa <_malloc_r+0xf2>
 80057fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005802:	4626      	mov	r6, r4
 8005804:	2e00      	cmp	r6, #0
 8005806:	d145      	bne.n	8005894 <_malloc_r+0xdc>
 8005808:	2c00      	cmp	r4, #0
 800580a:	d048      	beq.n	800589e <_malloc_r+0xe6>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	4631      	mov	r1, r6
 8005810:	4638      	mov	r0, r7
 8005812:	eb04 0903 	add.w	r9, r4, r3
 8005816:	f000 f98d 	bl	8005b34 <_sbrk_r>
 800581a:	4581      	cmp	r9, r0
 800581c:	d13f      	bne.n	800589e <_malloc_r+0xe6>
 800581e:	6821      	ldr	r1, [r4, #0]
 8005820:	1a6d      	subs	r5, r5, r1
 8005822:	4629      	mov	r1, r5
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ffa7 	bl	8005778 <sbrk_aligned>
 800582a:	3001      	adds	r0, #1
 800582c:	d037      	beq.n	800589e <_malloc_r+0xe6>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	442b      	add	r3, r5
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	f8d8 3000 	ldr.w	r3, [r8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d038      	beq.n	80058ae <_malloc_r+0xf6>
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	42a2      	cmp	r2, r4
 8005840:	d12b      	bne.n	800589a <_malloc_r+0xe2>
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	e00f      	b.n	8005868 <_malloc_r+0xb0>
 8005848:	6822      	ldr	r2, [r4, #0]
 800584a:	1b52      	subs	r2, r2, r5
 800584c:	d41f      	bmi.n	800588e <_malloc_r+0xd6>
 800584e:	2a0b      	cmp	r2, #11
 8005850:	d917      	bls.n	8005882 <_malloc_r+0xca>
 8005852:	1961      	adds	r1, r4, r5
 8005854:	42a3      	cmp	r3, r4
 8005856:	6025      	str	r5, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	6059      	strne	r1, [r3, #4]
 800585c:	6863      	ldr	r3, [r4, #4]
 800585e:	bf08      	it	eq
 8005860:	f8c8 1000 	streq.w	r1, [r8]
 8005864:	5162      	str	r2, [r4, r5]
 8005866:	604b      	str	r3, [r1, #4]
 8005868:	4638      	mov	r0, r7
 800586a:	f104 060b 	add.w	r6, r4, #11
 800586e:	f000 f829 	bl	80058c4 <__malloc_unlock>
 8005872:	f026 0607 	bic.w	r6, r6, #7
 8005876:	1d23      	adds	r3, r4, #4
 8005878:	1af2      	subs	r2, r6, r3
 800587a:	d0ae      	beq.n	80057da <_malloc_r+0x22>
 800587c:	1b9b      	subs	r3, r3, r6
 800587e:	50a3      	str	r3, [r4, r2]
 8005880:	e7ab      	b.n	80057da <_malloc_r+0x22>
 8005882:	42a3      	cmp	r3, r4
 8005884:	6862      	ldr	r2, [r4, #4]
 8005886:	d1dd      	bne.n	8005844 <_malloc_r+0x8c>
 8005888:	f8c8 2000 	str.w	r2, [r8]
 800588c:	e7ec      	b.n	8005868 <_malloc_r+0xb0>
 800588e:	4623      	mov	r3, r4
 8005890:	6864      	ldr	r4, [r4, #4]
 8005892:	e7ac      	b.n	80057ee <_malloc_r+0x36>
 8005894:	4634      	mov	r4, r6
 8005896:	6876      	ldr	r6, [r6, #4]
 8005898:	e7b4      	b.n	8005804 <_malloc_r+0x4c>
 800589a:	4613      	mov	r3, r2
 800589c:	e7cc      	b.n	8005838 <_malloc_r+0x80>
 800589e:	230c      	movs	r3, #12
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	4638      	mov	r0, r7
 80058a4:	f000 f80e 	bl	80058c4 <__malloc_unlock>
 80058a8:	e797      	b.n	80057da <_malloc_r+0x22>
 80058aa:	6025      	str	r5, [r4, #0]
 80058ac:	e7dc      	b.n	8005868 <_malloc_r+0xb0>
 80058ae:	605b      	str	r3, [r3, #4]
 80058b0:	deff      	udf	#255	; 0xff
 80058b2:	bf00      	nop
 80058b4:	2000067c 	.word	0x2000067c

080058b8 <__malloc_lock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__malloc_lock+0x8>)
 80058ba:	f7ff bf0e 	b.w	80056da <__retarget_lock_acquire_recursive>
 80058be:	bf00      	nop
 80058c0:	20000678 	.word	0x20000678

080058c4 <__malloc_unlock>:
 80058c4:	4801      	ldr	r0, [pc, #4]	; (80058cc <__malloc_unlock+0x8>)
 80058c6:	f7ff bf09 	b.w	80056dc <__retarget_lock_release_recursive>
 80058ca:	bf00      	nop
 80058cc:	20000678 	.word	0x20000678

080058d0 <__sflush_r>:
 80058d0:	898a      	ldrh	r2, [r1, #12]
 80058d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	4605      	mov	r5, r0
 80058d8:	0710      	lsls	r0, r2, #28
 80058da:	460c      	mov	r4, r1
 80058dc:	d458      	bmi.n	8005990 <__sflush_r+0xc0>
 80058de:	684b      	ldr	r3, [r1, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	dc05      	bgt.n	80058f0 <__sflush_r+0x20>
 80058e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	dc02      	bgt.n	80058f0 <__sflush_r+0x20>
 80058ea:	2000      	movs	r0, #0
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	d0f9      	beq.n	80058ea <__sflush_r+0x1a>
 80058f6:	2300      	movs	r3, #0
 80058f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058fc:	682f      	ldr	r7, [r5, #0]
 80058fe:	6a21      	ldr	r1, [r4, #32]
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	d032      	beq.n	800596a <__sflush_r+0x9a>
 8005904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	075a      	lsls	r2, r3, #29
 800590a:	d505      	bpl.n	8005918 <__sflush_r+0x48>
 800590c:	6863      	ldr	r3, [r4, #4]
 800590e:	1ac0      	subs	r0, r0, r3
 8005910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005912:	b10b      	cbz	r3, 8005918 <__sflush_r+0x48>
 8005914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005916:	1ac0      	subs	r0, r0, r3
 8005918:	2300      	movs	r3, #0
 800591a:	4602      	mov	r2, r0
 800591c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800591e:	6a21      	ldr	r1, [r4, #32]
 8005920:	4628      	mov	r0, r5
 8005922:	47b0      	blx	r6
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	d106      	bne.n	8005938 <__sflush_r+0x68>
 800592a:	6829      	ldr	r1, [r5, #0]
 800592c:	291d      	cmp	r1, #29
 800592e:	d82b      	bhi.n	8005988 <__sflush_r+0xb8>
 8005930:	4a29      	ldr	r2, [pc, #164]	; (80059d8 <__sflush_r+0x108>)
 8005932:	410a      	asrs	r2, r1
 8005934:	07d6      	lsls	r6, r2, #31
 8005936:	d427      	bmi.n	8005988 <__sflush_r+0xb8>
 8005938:	2200      	movs	r2, #0
 800593a:	6062      	str	r2, [r4, #4]
 800593c:	04d9      	lsls	r1, r3, #19
 800593e:	6922      	ldr	r2, [r4, #16]
 8005940:	6022      	str	r2, [r4, #0]
 8005942:	d504      	bpl.n	800594e <__sflush_r+0x7e>
 8005944:	1c42      	adds	r2, r0, #1
 8005946:	d101      	bne.n	800594c <__sflush_r+0x7c>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b903      	cbnz	r3, 800594e <__sflush_r+0x7e>
 800594c:	6560      	str	r0, [r4, #84]	; 0x54
 800594e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005950:	602f      	str	r7, [r5, #0]
 8005952:	2900      	cmp	r1, #0
 8005954:	d0c9      	beq.n	80058ea <__sflush_r+0x1a>
 8005956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800595a:	4299      	cmp	r1, r3
 800595c:	d002      	beq.n	8005964 <__sflush_r+0x94>
 800595e:	4628      	mov	r0, r5
 8005960:	f7ff febe 	bl	80056e0 <_free_r>
 8005964:	2000      	movs	r0, #0
 8005966:	6360      	str	r0, [r4, #52]	; 0x34
 8005968:	e7c0      	b.n	80058ec <__sflush_r+0x1c>
 800596a:	2301      	movs	r3, #1
 800596c:	4628      	mov	r0, r5
 800596e:	47b0      	blx	r6
 8005970:	1c41      	adds	r1, r0, #1
 8005972:	d1c8      	bne.n	8005906 <__sflush_r+0x36>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0c5      	beq.n	8005906 <__sflush_r+0x36>
 800597a:	2b1d      	cmp	r3, #29
 800597c:	d001      	beq.n	8005982 <__sflush_r+0xb2>
 800597e:	2b16      	cmp	r3, #22
 8005980:	d101      	bne.n	8005986 <__sflush_r+0xb6>
 8005982:	602f      	str	r7, [r5, #0]
 8005984:	e7b1      	b.n	80058ea <__sflush_r+0x1a>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	e7ad      	b.n	80058ec <__sflush_r+0x1c>
 8005990:	690f      	ldr	r7, [r1, #16]
 8005992:	2f00      	cmp	r7, #0
 8005994:	d0a9      	beq.n	80058ea <__sflush_r+0x1a>
 8005996:	0793      	lsls	r3, r2, #30
 8005998:	680e      	ldr	r6, [r1, #0]
 800599a:	bf08      	it	eq
 800599c:	694b      	ldreq	r3, [r1, #20]
 800599e:	600f      	str	r7, [r1, #0]
 80059a0:	bf18      	it	ne
 80059a2:	2300      	movne	r3, #0
 80059a4:	eba6 0807 	sub.w	r8, r6, r7
 80059a8:	608b      	str	r3, [r1, #8]
 80059aa:	f1b8 0f00 	cmp.w	r8, #0
 80059ae:	dd9c      	ble.n	80058ea <__sflush_r+0x1a>
 80059b0:	6a21      	ldr	r1, [r4, #32]
 80059b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059b4:	4643      	mov	r3, r8
 80059b6:	463a      	mov	r2, r7
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b0      	blx	r6
 80059bc:	2800      	cmp	r0, #0
 80059be:	dc06      	bgt.n	80059ce <__sflush_r+0xfe>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	e78e      	b.n	80058ec <__sflush_r+0x1c>
 80059ce:	4407      	add	r7, r0
 80059d0:	eba8 0800 	sub.w	r8, r8, r0
 80059d4:	e7e9      	b.n	80059aa <__sflush_r+0xda>
 80059d6:	bf00      	nop
 80059d8:	dfbffffe 	.word	0xdfbffffe

080059dc <_fflush_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	690b      	ldr	r3, [r1, #16]
 80059e0:	4605      	mov	r5, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b913      	cbnz	r3, 80059ec <_fflush_r+0x10>
 80059e6:	2500      	movs	r5, #0
 80059e8:	4628      	mov	r0, r5
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	b118      	cbz	r0, 80059f6 <_fflush_r+0x1a>
 80059ee:	6a03      	ldr	r3, [r0, #32]
 80059f0:	b90b      	cbnz	r3, 80059f6 <_fflush_r+0x1a>
 80059f2:	f7ff fc8f 	bl	8005314 <__sinit>
 80059f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f3      	beq.n	80059e6 <_fflush_r+0xa>
 80059fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a00:	07d0      	lsls	r0, r2, #31
 8005a02:	d404      	bmi.n	8005a0e <_fflush_r+0x32>
 8005a04:	0599      	lsls	r1, r3, #22
 8005a06:	d402      	bmi.n	8005a0e <_fflush_r+0x32>
 8005a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a0a:	f7ff fe66 	bl	80056da <__retarget_lock_acquire_recursive>
 8005a0e:	4628      	mov	r0, r5
 8005a10:	4621      	mov	r1, r4
 8005a12:	f7ff ff5d 	bl	80058d0 <__sflush_r>
 8005a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a18:	07da      	lsls	r2, r3, #31
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	d4e4      	bmi.n	80059e8 <_fflush_r+0xc>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	059b      	lsls	r3, r3, #22
 8005a22:	d4e1      	bmi.n	80059e8 <_fflush_r+0xc>
 8005a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a26:	f7ff fe59 	bl	80056dc <__retarget_lock_release_recursive>
 8005a2a:	e7dd      	b.n	80059e8 <_fflush_r+0xc>

08005a2c <__swhatbuf_r>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	460c      	mov	r4, r1
 8005a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a34:	2900      	cmp	r1, #0
 8005a36:	b096      	sub	sp, #88	; 0x58
 8005a38:	4615      	mov	r5, r2
 8005a3a:	461e      	mov	r6, r3
 8005a3c:	da0d      	bge.n	8005a5a <__swhatbuf_r+0x2e>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a44:	f04f 0100 	mov.w	r1, #0
 8005a48:	bf0c      	ite	eq
 8005a4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a4e:	2340      	movne	r3, #64	; 0x40
 8005a50:	2000      	movs	r0, #0
 8005a52:	6031      	str	r1, [r6, #0]
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	b016      	add	sp, #88	; 0x58
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	466a      	mov	r2, sp
 8005a5c:	f000 f848 	bl	8005af0 <_fstat_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	dbec      	blt.n	8005a3e <__swhatbuf_r+0x12>
 8005a64:	9901      	ldr	r1, [sp, #4]
 8005a66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a6e:	4259      	negs	r1, r3
 8005a70:	4159      	adcs	r1, r3
 8005a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a76:	e7eb      	b.n	8005a50 <__swhatbuf_r+0x24>

08005a78 <__smakebuf_r>:
 8005a78:	898b      	ldrh	r3, [r1, #12]
 8005a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a7c:	079d      	lsls	r5, r3, #30
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	d507      	bpl.n	8005a94 <__smakebuf_r+0x1c>
 8005a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	6163      	str	r3, [r4, #20]
 8005a90:	b002      	add	sp, #8
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	ab01      	add	r3, sp, #4
 8005a96:	466a      	mov	r2, sp
 8005a98:	f7ff ffc8 	bl	8005a2c <__swhatbuf_r>
 8005a9c:	9900      	ldr	r1, [sp, #0]
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff fe89 	bl	80057b8 <_malloc_r>
 8005aa6:	b948      	cbnz	r0, 8005abc <__smakebuf_r+0x44>
 8005aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aac:	059a      	lsls	r2, r3, #22
 8005aae:	d4ef      	bmi.n	8005a90 <__smakebuf_r+0x18>
 8005ab0:	f023 0303 	bic.w	r3, r3, #3
 8005ab4:	f043 0302 	orr.w	r3, r3, #2
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	e7e3      	b.n	8005a84 <__smakebuf_r+0xc>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	6020      	str	r0, [r4, #0]
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	9b00      	ldr	r3, [sp, #0]
 8005ac8:	6163      	str	r3, [r4, #20]
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	6120      	str	r0, [r4, #16]
 8005ace:	b15b      	cbz	r3, 8005ae8 <__smakebuf_r+0x70>
 8005ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f000 f81d 	bl	8005b14 <_isatty_r>
 8005ada:	b128      	cbz	r0, 8005ae8 <__smakebuf_r+0x70>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	431d      	orrs	r5, r3
 8005aec:	81a5      	strh	r5, [r4, #12]
 8005aee:	e7cf      	b.n	8005a90 <__smakebuf_r+0x18>

08005af0 <_fstat_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d07      	ldr	r5, [pc, #28]	; (8005b10 <_fstat_r+0x20>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	f7fc fcd2 	bl	80024a6 <_fstat>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	d102      	bne.n	8005b0c <_fstat_r+0x1c>
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	b103      	cbz	r3, 8005b0c <_fstat_r+0x1c>
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000674 	.word	0x20000674

08005b14 <_isatty_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4d06      	ldr	r5, [pc, #24]	; (8005b30 <_isatty_r+0x1c>)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	f7fc fcd1 	bl	80024c6 <_isatty>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_isatty_r+0x1a>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_isatty_r+0x1a>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	20000674 	.word	0x20000674

08005b34 <_sbrk_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d06      	ldr	r5, [pc, #24]	; (8005b50 <_sbrk_r+0x1c>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fc fcda 	bl	80024f8 <_sbrk>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_sbrk_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_sbrk_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	20000674 	.word	0x20000674

08005b54 <fmaxf>:
 8005b54:	b508      	push	{r3, lr}
 8005b56:	ed2d 8b02 	vpush	{d8}
 8005b5a:	eeb0 8a40 	vmov.f32	s16, s0
 8005b5e:	eef0 8a60 	vmov.f32	s17, s1
 8005b62:	f000 f82d 	bl	8005bc0 <__fpclassifyf>
 8005b66:	b148      	cbz	r0, 8005b7c <fmaxf+0x28>
 8005b68:	eeb0 0a68 	vmov.f32	s0, s17
 8005b6c:	f000 f828 	bl	8005bc0 <__fpclassifyf>
 8005b70:	b130      	cbz	r0, 8005b80 <fmaxf+0x2c>
 8005b72:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7a:	dc01      	bgt.n	8005b80 <fmaxf+0x2c>
 8005b7c:	eeb0 8a68 	vmov.f32	s16, s17
 8005b80:	eeb0 0a48 	vmov.f32	s0, s16
 8005b84:	ecbd 8b02 	vpop	{d8}
 8005b88:	bd08      	pop	{r3, pc}

08005b8a <fminf>:
 8005b8a:	b508      	push	{r3, lr}
 8005b8c:	ed2d 8b02 	vpush	{d8}
 8005b90:	eeb0 8a40 	vmov.f32	s16, s0
 8005b94:	eef0 8a60 	vmov.f32	s17, s1
 8005b98:	f000 f812 	bl	8005bc0 <__fpclassifyf>
 8005b9c:	b148      	cbz	r0, 8005bb2 <fminf+0x28>
 8005b9e:	eeb0 0a68 	vmov.f32	s0, s17
 8005ba2:	f000 f80d 	bl	8005bc0 <__fpclassifyf>
 8005ba6:	b130      	cbz	r0, 8005bb6 <fminf+0x2c>
 8005ba8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	d401      	bmi.n	8005bb6 <fminf+0x2c>
 8005bb2:	eeb0 8a68 	vmov.f32	s16, s17
 8005bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8005bba:	ecbd 8b02 	vpop	{d8}
 8005bbe:	bd08      	pop	{r3, pc}

08005bc0 <__fpclassifyf>:
 8005bc0:	ee10 3a10 	vmov	r3, s0
 8005bc4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8005bc8:	d00d      	beq.n	8005be6 <__fpclassifyf+0x26>
 8005bca:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8005bce:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005bd2:	d30a      	bcc.n	8005bea <__fpclassifyf+0x2a>
 8005bd4:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <__fpclassifyf+0x34>)
 8005bd6:	1e42      	subs	r2, r0, #1
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d908      	bls.n	8005bee <__fpclassifyf+0x2e>
 8005bdc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8005be0:	4258      	negs	r0, r3
 8005be2:	4158      	adcs	r0, r3
 8005be4:	4770      	bx	lr
 8005be6:	2002      	movs	r0, #2
 8005be8:	4770      	bx	lr
 8005bea:	2004      	movs	r0, #4
 8005bec:	4770      	bx	lr
 8005bee:	2003      	movs	r0, #3
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	007ffffe 	.word	0x007ffffe

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
